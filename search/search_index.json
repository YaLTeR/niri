{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome to the niri documentation!</p> <p>Feel free to look through usage and Getting started. If you're looking for ways to configure niri, check out the introduction to configuration.</p> <p>If you'd like to help with niri, there are plenty of both coding- and non-coding-related ways to do so. See CONTRIBUTING.md for an overview.</p> <p>If you're not already here, check out our new wiki website! https://yalter.github.io/niri/</p> <p>The documentation is open to contribution, see Documenting niri. Please discuss bigger changes in our Matrix room first! The wiki is generated from files in the <code>docs/wiki/</code> folder of the repository, so you can open a pull request modifying it there.</p>"},{"location":"Accessibility.html","title":"Accessibility","text":""},{"location":"Accessibility.html#screen-readers","title":"Screen readers","text":"<p>Since: 25.08</p> <p>Niri has basic support for screen readers (specifically, Orca) when running as a full desktop session, i.e. you need to start niri through a display manager or through <code>niri-session</code>. To avoid conflicts with an already running compositor, niri won't expose accessibility interfaces when started as a nested window, or as a plain <code>/usr/bin/niri</code> on a TTY.</p> <p>We implement the <code>org.freedesktop.a11y.KeyboardMonitor</code> D-Bus interface for Orca to listen and grab keyboard keys, and we expose the main niri UI elements via AccessKit. Specifically, niri will announce:</p> <ul> <li>workspace switching, for example it'll say \"Workspace 2\" when you switch to the second workspace;</li> <li>the exit confirmation dialog (appears on SuperShiftE by default);</li> <li>entering the screenshot UI and the overview (niri will say when these are focused, nothing else for now);</li> <li>whenever a config parse error occurs;</li> <li>the important hotkeys list (for now, as one big announcement without tab navigation; appears on SuperShift/ by default).</li> </ul> <p>Here's a demo video, watch with sound on.</p>   https://github.com/user-attachments/assets/afceba6f-79f1-47ec-b859-a0fcb7f8eae3   <p>Make sure Xwayland works, then run <code>orca</code>. The default config binds SuperAltS to toggle Orca, which is the standard key binding.</p> <p>Note that there are some limitations:</p> <ul> <li>We don't have an Alt-Tab window switcher yet; it's in the works.</li> <li>We don't have a bind to move focus to layer-shell panels. This is not hard to add, but it would be good to have some consensus or prior art with LXQt/Xfce on how exactly this should work.</li> <li>You need to have a screen connected and enabled. Without a screen, niri won't give focus any window. This makes sense for sighted users, and I'm not entirely sure what makes the most sense for accessibility purposes (maybe, it'd be better solved with virtual monitors).</li> <li>You need working EGL (hardware acceleration).</li> <li>We don't have screen curtain functionality yet.</li> </ul> <p>If you're shipping niri and would like to make it work better for screen readers out of the box, consider the following changes to the default niri config:</p> <ul> <li>Change the default terminal from Alacritty to one that supports screen readers. For example, GNOME Console or GNOME Terminal should work well.</li> <li>Change the default application launcher and screen locker to ones that support screen readers. For example, xfce4-appfinder is an accessible launcher. Suggestions welcome! Likely, something GTK-based will work fine.</li> <li>Add some <code>spawn-at-startup</code> command that plays a sound which will indicate to users that niri has finished loading.</li> <li>Add <code>spawn-at-startup \"orca\"</code> to run Orca automatically at niri startup.</li> </ul>"},{"location":"Accessibility.html#desktop-zoom","title":"Desktop zoom","text":"<p>There's no built-in zoom yet, but you can use third-party utilities like wooz.</p>"},{"location":"Application-Issues.html","title":"Application-Specific Issues","text":""},{"location":"Application-Issues.html#electron-applications","title":"Electron applications","text":"<p>Electron-based applications can run directly on Wayland, but it's not the default.</p> <p>For Electron &gt; 28, you can set an environment variable: <pre><code>environment {\n    ELECTRON_OZONE_PLATFORM_HINT \"auto\"\n}\n</code></pre></p> <p>For previous versions, you need to pass command-line flags to the target application: <pre><code>--enable-features=UseOzonePlatform --ozone-platform-hint=auto\n</code></pre></p> <p>If the application has a desktop entry, you can put the command-line arguments into the <code>Exec</code> section.</p>"},{"location":"Application-Issues.html#vscode","title":"VSCode","text":"<p>If you're having issues with some VSCode hotkeys, try starting <code>Xwayland</code> and setting the <code>DISPLAY=:0</code> environment variable for VSCode. That is, still running VSCode with the Wayland backend, but with <code>DISPLAY</code> set to a running Xwayland instance. Apparently, VSCode currently unconditionally queries the X server for a keymap.</p>"},{"location":"Application-Issues.html#wezterm","title":"WezTerm","text":"<p>Note</p> <p>Both of these issues seem to be fixed in the nightly build of WezTerm.</p> <p>There's a bug in WezTerm that it waits for a zero-sized Wayland configure event, so its window never shows up in niri. To work around it, put this window rule in the niri config (included in the default config):</p> <pre><code>window-rule {\n    match app-id=r#\"^org\\.wezfurlong\\.wezterm$\"#\n    default-column-width {}\n}\n</code></pre> <p>This empty default column width lets WezTerm pick its own initial width which makes it show up properly.</p> <p>There's another bug in WezTerm that causes it to choose a wrong size when it's in a tiled state, and prevent resizing it. Niri puts windows in the tiled state with <code>prefer-no-csd</code>. So if you hit this problem, comment out <code>prefer-no-csd</code> in the niri config and restart WezTerm.</p>"},{"location":"Application-Issues.html#ghidra","title":"Ghidra","text":"<p>Some Java apps like Ghidra can show up blank under xwayland-satellite. To fix this, run them with the <code>_JAVA_AWT_WM_NONREPARENTING=1</code> environment variable.</p>"},{"location":"Application-Issues.html#zen-browser","title":"Zen Browser","text":"<p>For some reason, DMABUF screencasts are disabled in the Zen Browser, so screencasting doesn't work out of the box on niri. To fix it, open <code>about:config</code> and set <code>widget.dmabuf.force-enabled</code> to <code>true</code>.</p>"},{"location":"Application-Issues.html#fullscreen-games","title":"Fullscreen games","text":"<p>Some video games, both Linux-native and on Wine, have various issues when using non-stacking desktop environments. Most of these can be avoided with Valve's gamescope, for example:</p> <pre><code>gamescope -f -w 1920 -h 1080 -W 1920 -H 1080 --force-grab-cursor --backend sdl -- &lt;game&gt;\n</code></pre> <p>This command will run  in 1080p fullscreen\u2014make sure to replace the width and height values to match your desired resolution. <code>--force-grab-cursor</code> forces gamescope to use relative mouse movement which prevents the cursor from escaping the game's window on multi-monitor setups. Note that <code>--backend sdl</code> is currently also required as gamescope's default Wayland backend doesn't lock the cursor properly (possibly related to https://github.com/ValveSoftware/gamescope/issues/1711). <p>Steam users should use gamescope through a game's launch options by replacing the game executable with <code>%command%</code>. Other game launchers such as Lutris have their own ways of setting gamescope options.</p> <p>Running X11-based games with this method doesn't require Xwayland as gamescope creates its own Xwayland server. You can run Wayland-native games as well by passing <code>--expose-wayland</code> to gamescope, therefore eliminating X11 from the equation.</p>"},{"location":"Application-Issues.html#steam","title":"Steam","text":"<p>On some systems, Steam will show a fully black window. To fix this, navigate to Settings -&gt; Interface (via Steam's tray icon, or by blindly finding the Steam menu at the top left of the window), then disable GPU accelerated rendering in web views. Restart Steam and it should now work fine.</p> <p>If you do not want to disable GPU accelerated rendering you can instead try to pass the launch argument <code>-system-composer</code> instead.</p> <p>Steam notifications don't run through the standard notification daemon and show up as floating windows in the center of the screen. You can move them to a more convenient location by adding a window rule in your niri config:</p> <pre><code>window-rule {\n    match app-id=\"steam\" title=r#\"^notificationtoasts_\\d+_desktop$\"#\n    default-floating-position x=10 y=10 relative-to=\"bottom-right\"\n}\n</code></pre>"},{"location":"Application-Issues.html#waybar-and-other-gtk-3-components","title":"Waybar and other GTK 3 components","text":"<p>If you have rounded corners on your Waybar and they show up with black pixels in the corners, then set your Waybar opacity to 0.99, which should fix it.</p> <p>GTK 3 seems to have a bug where it reports a surface as fully opaque even if it has rounded corners. This leads to niri filling the transparent pixels inside the corners with black.</p> <p>Setting the surface opacity to something below 1 fixes the problem because then GTK no longer reports the surface as opaque.</p>"},{"location":"Configuration%3A-Animations.html","title":"Animations","text":""},{"location":"Configuration%3A-Animations.html#overview","title":"Overview","text":"<p>Niri has several animations which you can configure in the same way. Additionally, you can disable or slow down all animations at once.</p> <p>Here's a quick glance at the available animations with their default values.</p> <pre><code>animations {\n    // Uncomment to turn off all animations.\n    // You can also put \"off\" into each individual animation to disable it.\n    // off\n\n    // Slow down all animations by this factor. Values below 1 speed them up instead.\n    // slowdown 3.0\n\n    // Individual animations.\n\n    workspace-switch {\n        spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001\n    }\n\n    window-open {\n        duration-ms 150\n        curve \"ease-out-expo\"\n    }\n\n    window-close {\n        duration-ms 150\n        curve \"ease-out-quad\"\n    }\n\n    horizontal-view-movement {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n\n    window-movement {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n\n    window-resize {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n\n    config-notification-open-close {\n        spring damping-ratio=0.6 stiffness=1000 epsilon=0.001\n    }\n\n    exit-confirmation-open-close {\n        spring damping-ratio=0.6 stiffness=500 epsilon=0.01\n    }\n\n    screenshot-ui-open {\n        duration-ms 200\n        curve \"ease-out-quad\"\n    }\n\n    overview-open-close {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#animation-types","title":"Animation Types","text":"<p>There are two animation types: easing and spring. Each animation can be either an easing or a spring.</p>"},{"location":"Configuration%3A-Animations.html#easing","title":"Easing","text":"<p>This is a relatively common animation type that changes the value over a set duration using an interpolation curve.</p> <p>To use this animation, set the following parameters:</p> <ul> <li><code>duration-ms</code>: duration of the animation in milliseconds.</li> <li><code>curve</code>: the easing curve to use.</li> </ul> <pre><code>animations {\n    window-open {\n        duration-ms 150\n        curve \"ease-out-expo\"\n    }\n}\n</code></pre> <p>Currently, niri only supports five curves. You can get a feel for them on pages like easings.net.</p> <ul> <li><code>ease-out-quad</code> Since: 0.1.5</li> <li><code>ease-out-cubic</code></li> <li><code>ease-out-expo</code></li> <li><code>linear</code> Since: 0.1.6</li> <li><code>cubic-bezier</code> Since: 25.08     A custom cubic B\u00e9zier curve. You need to set 4 numbers defining the control points of the curve, for example:     <pre><code>animations {\n    window-open {\n        // Same as CSS cubic-bezier(0.05, 0.7, 0.1, 1)\n        curve \"cubic-bezier\" 0.05 0.7 0.1 1\n    }\n}\n</code></pre>     You can tweak the cubic-bezier parameters on pages like easings.co.</li> </ul>"},{"location":"Configuration%3A-Animations.html#spring","title":"Spring","text":"<p>Spring animations use a model of a physical spring to animate the value. They notably feel better with touchpad gestures, because they take into account the velocity of your fingers as you release the swipe. Springs can also oscillate / bounce at the end with the right parameters if you like that sort of thing, but they don't have to (and by default they mostly don't).</p> <p>Due to springs using a physical model, the animation parameters are less obvious and generally should be tuned with trial and error. Notably, you cannot directly set the duration. You can use the Elastic app to help visualize how the spring parameters change the animation.</p> <p>A spring animation is configured like this, with three mandatory parameters:</p> <pre><code>animations {\n    workspace-switch {\n        spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001\n    }\n}\n</code></pre> <p>The <code>damping-ratio</code> goes from 0.1 to 10.0 and has the following properties:</p> <ul> <li>below 1.0: underdamped spring, will oscillate in the end.</li> <li>above 1.0: overdamped spring, won't oscillate.</li> <li>1.0: critically damped spring, comes to rest in minimum possible time without oscillations.</li> </ul> <p>However, even with damping ratio = 1.0, the spring animation may oscillate if \"launched\" with enough velocity from a touchpad swipe.</p> <p>Warning</p> <p>Overdamped springs currently have some numerical stability issues and may cause graphical glitches. Therefore, setting <code>damping-ratio</code> above <code>1.0</code> is not recommended.</p> <p>Lower <code>stiffness</code> will result in a slower animation more prone to oscillation.</p> <p>Set <code>epsilon</code> to a lower value if the animation \"jumps\" at the end.</p> <p>Tip</p> <p>The spring mass (which you can see in Elastic) is hardcoded to 1.0 and cannot be changed. Instead, change <code>stiffness</code> proportionally. E.g. increasing mass by 2\u00d7 is the same as decreasing stiffness by 2\u00d7.</p>"},{"location":"Configuration%3A-Animations.html#animations","title":"Animations","text":"<p>Now let's go into more detail on the animations that you can configure.</p>"},{"location":"Configuration%3A-Animations.html#workspace-switch","title":"<code>workspace-switch</code>","text":"<p>Animation when switching workspaces up and down, including after the vertical touchpad gesture (a spring is recommended).</p> <pre><code>animations {\n    workspace-switch {\n        spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#window-open","title":"<code>window-open</code>","text":"<p>Window opening animation.</p> <p>This one uses an easing type by default.</p> <pre><code>animations {\n    window-open {\n        duration-ms 150\n        curve \"ease-out-expo\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#custom-shader","title":"<code>custom-shader</code>","text":"<p>Since: 0.1.6</p> <p>You can write a custom shader for drawing the window during an open animation.</p> <p>See this example shader for a full documentation with several animations to experiment with.</p> <p>If a custom shader fails to compile, niri will print a warning and fall back to the default, or previous successfully compiled shader. When running niri as a systemd service, you can see the warnings in the journal: <code>journalctl -ef /usr/bin/niri</code></p> <p>Warning</p> <p>Custom shaders do not have a backwards compatibility guarantee. I may need to change their interface as I'm developing new features.</p> <p>Example: open will fill the current geometry with a solid gradient that gradually fades in.</p> <pre><code>animations {\n    window-open {\n        duration-ms 250\n        curve \"linear\"\n\n        custom-shader r\"\n            vec4 open_color(vec3 coords_geo, vec3 size_geo) {\n                vec4 color = vec4(0.0);\n\n                if (0.0 &lt;= coords_geo.x &amp;&amp; coords_geo.x &lt;= 1.0\n                        &amp;&amp; 0.0 &lt;= coords_geo.y &amp;&amp; coords_geo.y &lt;= 1.0)\n                {\n                    vec4 from = vec4(1.0, 0.0, 0.0, 1.0);\n                    vec4 to = vec4(0.0, 1.0, 0.0, 1.0);\n                    color = mix(from, to, coords_geo.y);\n                }\n\n                return color * niri_clamped_progress;\n            }\n        \"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#window-close","title":"<code>window-close</code>","text":"<p>Since: 0.1.5</p> <p>Window closing animation.</p> <p>This one uses an easing type by default.</p> <pre><code>animations {\n    window-close {\n        duration-ms 150\n        curve \"ease-out-quad\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#custom-shader_1","title":"<code>custom-shader</code>","text":"<p>Since: 0.1.6</p> <p>You can write a custom shader for drawing the window during a close animation.</p> <p>See this example shader for a full documentation with several animations to experiment with.</p> <p>If a custom shader fails to compile, niri will print a warning and fall back to the default, or previous successfully compiled shader. When running niri as a systemd service, you can see the warnings in the journal: <code>journalctl -ef /usr/bin/niri</code></p> <p>Warning</p> <p>Custom shaders do not have a backwards compatibility guarantee. I may need to change their interface as I'm developing new features.</p> <p>Example: close will fill the current geometry with a solid gradient that gradually fades away.</p> <pre><code>animations {\n    window-close {\n        custom-shader r\"\n            vec4 close_color(vec3 coords_geo, vec3 size_geo) {\n                vec4 color = vec4(0.0);\n\n                if (0.0 &lt;= coords_geo.x &amp;&amp; coords_geo.x &lt;= 1.0\n                        &amp;&amp; 0.0 &lt;= coords_geo.y &amp;&amp; coords_geo.y &lt;= 1.0)\n                {\n                    vec4 from = vec4(1.0, 0.0, 0.0, 1.0);\n                    vec4 to = vec4(0.0, 1.0, 0.0, 1.0);\n                    color = mix(from, to, coords_geo.y);\n                }\n\n                return color * (1.0 - niri_clamped_progress);\n            }\n        \"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#horizontal-view-movement","title":"<code>horizontal-view-movement</code>","text":"<p>All horizontal camera view movement animations, such as:</p> <ul> <li>When a window off-screen is focused and the camera scrolls to it.</li> <li>When a new window appears off-screen and the camera scrolls to it.</li> <li>After a horizontal touchpad gesture (a spring is recommended).</li> </ul> <pre><code>animations {\n    horizontal-view-movement {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#window-movement","title":"<code>window-movement</code>","text":"<p>Since: 0.1.5</p> <p>Movement of individual windows within a workspace.</p> <p>Includes:</p> <ul> <li>Moving window columns with <code>move-column-left</code> and <code>move-column-right</code>.</li> <li>Moving windows inside a column with <code>move-window-up</code> and <code>move-window-down</code>.</li> <li>Moving windows out of the way upon window opening and closing.</li> <li>Window movement between columns when consuming/expelling.</li> </ul> <p>This animation does not include the camera view movement, such as scrolling the workspace left and right.</p> <pre><code>animations {\n    window-movement {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#window-resize","title":"<code>window-resize</code>","text":"<p>Since: 0.1.5</p> <p>Window resize animation.</p> <p>Only manual window resizes are animated, i.e. when you resize the window with <code>switch-preset-column-width</code> or <code>maximize-column</code>. Also, very small resizes (up to 10 pixels) are not animated.</p> <pre><code>animations {\n    window-resize {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#custom-shader_2","title":"<code>custom-shader</code>","text":"<p>Since: 0.1.6</p> <p>You can write a custom shader for drawing the window during a resize animation.</p> <p>See this example shader for a full documentation with several animations to experiment with.</p> <p>If a custom shader fails to compile, niri will print a warning and fall back to the default, or previous successfully compiled shader. When running niri as a systemd service, you can see the warnings in the journal: <code>journalctl -ef /usr/bin/niri</code></p> <p>Warning</p> <p>Custom shaders do not have a backwards compatibility guarantee. I may need to change their interface as I'm developing new features.</p> <p>Example: resize will show the next (after resize) window texture right away, stretched to the current geometry.</p> <pre><code>animations {\n    window-resize {\n        custom-shader r\"\n            vec4 resize_color(vec3 coords_curr_geo, vec3 size_curr_geo) {\n                vec3 coords_tex_next = niri_geo_to_tex_next * coords_curr_geo;\n                vec4 color = texture2D(niri_tex_next, coords_tex_next.st);\n                return color;\n            }\n        \"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#config-notification-open-close","title":"<code>config-notification-open-close</code>","text":"<p>The open/close animation of the config parse error and new default config notifications.</p> <p>This one uses an underdamped spring by default (<code>damping-ratio=0.6</code>) which causes a slight oscillation in the end.</p> <pre><code>animations {\n    config-notification-open-close {\n        spring damping-ratio=0.6 stiffness=1000 epsilon=0.001\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#exit-confirmation-open-close","title":"<code>exit-confirmation-open-close</code>","text":"<p>Since: 25.08</p> <p>The open/close animation of the exit confirmation dialog.</p> <p>This one uses an underdamped spring by default (<code>damping-ratio=0.6</code>) which causes a slight oscillation in the end.</p> <pre><code>animations {\n    exit-confirmation-open-close {\n        spring damping-ratio=0.6 stiffness=500 epsilon=0.01\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#screenshot-ui-open","title":"<code>screenshot-ui-open</code>","text":"<p>Since: 0.1.8</p> <p>The open (fade-in) animation of the screenshot UI.</p> <pre><code>animations {\n    screenshot-ui-open {\n        duration-ms 200\n        curve \"ease-out-quad\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#overview-open-close","title":"<code>overview-open-close</code>","text":"<p>Since: 25.05</p> <p>The open/close zoom animation of the Overview.</p> <pre><code>animations {\n    overview-open-close {\n        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Animations.html#synchronized-animations","title":"Synchronized Animations","text":"<p>Since: 0.1.5</p> <p>Sometimes, when two animations are meant to play together synchronized, niri will drive them both with the same configuration.</p> <p>For example, if a window resize causes the view to move, then that view movement animation will also use the <code>window-resize</code> configuration (rather than the <code>horizontal-view-movement</code> configuration). This is especially important for animated resizes to look good when using <code>center-focused-column \"always\"</code>.</p> <p>As another example, resizing a window in a column vertically causes other windows to move up or down into their new position. This movement will use the <code>window-resize</code> configuration, rather than the <code>window-movement</code> configuration, to keep the animations synchronized.</p> <p>A few actions are still missing this synchronization logic, since in some cases it is difficult to implement properly. Therefore, for the best results, consider using the same parameters for related animations (they are all the same by default):</p> <ul> <li><code>horizontal-view-movement</code></li> <li><code>window-movement</code></li> <li><code>window-resize</code></li> </ul>"},{"location":"Configuration%3A-Debug-Options.html","title":"Debug Options","text":""},{"location":"Configuration%3A-Debug-Options.html#overview","title":"Overview","text":"<p>Niri has several options that are only useful for debugging, or are experimental and have known issues. They are not meant for normal use.</p> <p>Caution</p> <p>These options are not covered by the config breaking change policy. They can change or stop working at any point with little notice.</p> <p>Here are all the options at a glance:</p> <pre><code>debug {\n    preview-render \"screencast\"\n    // preview-render \"screen-capture\"\n    enable-overlay-planes\n    disable-cursor-plane\n    disable-direct-scanout\n    restrict-primary-scanout-to-matching-format\n    render-drm-device \"/dev/dri/renderD129\"\n    ignore-drm-device \"/dev/dri/renderD128\"\n    ignore-drm-device \"/dev/dri/renderD130\"\n    force-pipewire-invalid-modifier\n    dbus-interfaces-in-non-session-instances\n    wait-for-frame-completion-before-queueing\n    emulate-zero-presentation-time\n    disable-resize-throttling\n    disable-transactions\n    keep-laptop-panel-on-when-lid-is-closed\n    disable-monitor-names\n    strict-new-window-focus-policy\n    honor-xdg-activation-with-invalid-serial\n    skip-cursor-only-updates-during-vrr\n    deactivate-unfocused-windows\n    keep-max-bpc-unchanged\n}\n\nbinds {\n    Mod+Shift+Ctrl+T { toggle-debug-tint; }\n    Mod+Shift+Ctrl+O { debug-toggle-opaque-regions; }\n    Mod+Shift+Ctrl+D { debug-toggle-damage; }\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#preview-render","title":"<code>preview-render</code>","text":"<p>Make niri render the monitors the same way as for a screencast or a screen capture.</p> <p>Useful for previewing the <code>block-out-from</code> window rule.</p> <pre><code>debug {\n    preview-render \"screencast\"\n    // preview-render \"screen-capture\"\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#enable-overlay-planes","title":"<code>enable-overlay-planes</code>","text":"<p>Enable direct scanout into overlay planes. May cause frame drops during some animations on some hardware (which is why it is not the default).</p> <p>Direct scanout into the primary plane is always enabled.</p> <pre><code>debug {\n    enable-overlay-planes\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#disable-cursor-plane","title":"<code>disable-cursor-plane</code>","text":"<p>Disable the use of the cursor plane. The cursor will be rendered together with the rest of the frame.</p> <p>Useful to work around driver bugs on specific hardware.</p> <pre><code>debug {\n    disable-cursor-plane\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#disable-direct-scanout","title":"<code>disable-direct-scanout</code>","text":"<p>Disable direct scanout to both the primary plane and the overlay planes.</p> <pre><code>debug {\n    disable-direct-scanout\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#restrict-primary-scanout-to-matching-format","title":"<code>restrict-primary-scanout-to-matching-format</code>","text":"<p>Restricts direct scanout to the primary plane to when the window buffer exactly matches the composition swapchain format.</p> <p>This flag may prevent unexpected bandwidth changes when going between composition and scanout. The plan is to make it default in the future, when we implement a way to tell the clients the composition swapchain format. As is, it may prevent some clients (mpv on my machine) from scanning out to the primary plane.</p> <pre><code>debug {\n    restrict-primary-scanout-to-matching-format\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#render-drm-device","title":"<code>render-drm-device</code>","text":"<p>Override the DRM device that niri will use for all rendering.</p> <p>You can set this to make niri use a different primary GPU than the default one.</p> <pre><code>debug {\n    render-drm-device \"/dev/dri/renderD129\"\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#ignore-drm-device","title":"<code>ignore-drm-device</code>","text":"<p>Since: next release</p> <p>List DRM devices that niri will ignore. Useful for GPU passthrough when you don't want niri to open a certain device.</p> <pre><code>debug {\n    ignore-drm-device \"/dev/dri/renderD128\"\n    ignore-drm-device \"/dev/dri/renderD130\"\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#force-pipewire-invalid-modifier","title":"<code>force-pipewire-invalid-modifier</code>","text":"<p>Since: 25.01</p> <p>Forces PipeWire screencasting to use the invalid modifier, even when DRM offers more modifiers.</p> <p>Useful for testing the invalid modifier code path that is hit by drivers that don't support modifiers.</p> <pre><code>debug {\n    force-pipewire-invalid-modifier\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#dbus-interfaces-in-non-session-instances","title":"<code>dbus-interfaces-in-non-session-instances</code>","text":"<p>Make niri create its D-Bus interfaces even if it's not running as a <code>--session</code>.</p> <p>Useful for testing screencasting changes without having to relogin.</p> <p>The main niri instance will not currently take back the interfaces when you close the test instance, so you will need to relogin in the end to make screencasting work again.</p> <pre><code>debug {\n    dbus-interfaces-in-non-session-instances\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#wait-for-frame-completion-before-queueing","title":"<code>wait-for-frame-completion-before-queueing</code>","text":"<p>Wait until every frame is done rendering before handing it over to DRM.</p> <p>Useful for diagnosing certain synchronization and performance problems.</p> <pre><code>debug {\n    wait-for-frame-completion-before-queueing\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#emulate-zero-presentation-time","title":"<code>emulate-zero-presentation-time</code>","text":"<p>Emulate zero (unknown) presentation time returned from DRM.</p> <p>This is a thing on NVIDIA proprietary drivers, so this flag can be used to test that niri doesn't break too hard on those systems.</p> <pre><code>debug {\n    emulate-zero-presentation-time\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#disable-resize-throttling","title":"<code>disable-resize-throttling</code>","text":"<p>Since: 0.1.9</p> <p>Disable throttling resize events sent to windows.</p> <p>By default, when resizing quickly (e.g. interactively), a window will only receive the next size once it has made a commit for the previously requested size. This is required for resize transactions to work properly, and it also helps certain clients which don't batch incoming resizes from the compositor.</p> <p>Disabling resize throttling will send resizes to windows as fast as possible, which is potentially very fast (for example, on a 1000 Hz mouse).</p> <pre><code>debug {\n    disable-resize-throttling\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#disable-transactions","title":"<code>disable-transactions</code>","text":"<p>Since: 0.1.9</p> <p>Disable transactions (resize and close).</p> <p>By default, windows which must resize together, do resize together. For example, all windows in a column must resize at the same time to maintain the combined column height equal to the screen height, and to maintain the same window width.</p> <p>Transactions make niri wait until all windows finish resizing before showing them all on screen in one, synchronized frame. For them to work properly, resize throttling shouldn't be disabled (with the previous debug flag).</p> <pre><code>debug {\n    disable-transactions\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#keep-laptop-panel-on-when-lid-is-closed","title":"<code>keep-laptop-panel-on-when-lid-is-closed</code>","text":"<p>Since: 0.1.10</p> <p>By default, niri will disable the internal laptop monitor when the laptop lid is closed. This flag turns off this behavior and will leave the internal laptop monitor on.</p> <pre><code>debug {\n    keep-laptop-panel-on-when-lid-is-closed\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#disable-monitor-names","title":"<code>disable-monitor-names</code>","text":"<p>Since: 0.1.10</p> <p>Disables the make/model/serial monitor names, as if niri fails to read them from the EDID.</p> <p>Use this flag to work around a crash present in 0.1.9 and 0.1.10 when connecting two monitors with matching make/model/serial.</p> <pre><code>debug {\n    disable-monitor-names\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#strict-new-window-focus-policy","title":"<code>strict-new-window-focus-policy</code>","text":"<p>Since: 25.01</p> <p>Disables heuristic automatic focusing for new windows. Only windows that activate themselves with a valid xdg-activation token will be focused.</p> <pre><code>debug {\n    strict-new-window-focus-policy\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#honor-xdg-activation-with-invalid-serial","title":"<code>honor-xdg-activation-with-invalid-serial</code>","text":"<p>Since: 25.05</p> <p>Widely-used clients such as Discord and Telegram make fresh xdg-activation tokens upon clicking on their tray icon or on their notification. Most of the time, these fresh tokens will have invalid serials, because the app needs to be focused to get a valid serial, and if the user clicks on a tray icon or a notification, it is usually because the app isn't focused, and the user wants to focus it.</p> <p>By default, niri ignores xdg-activation tokens with invalid serials, to prevent windows from randomly stealing focus. This debug flag makes niri honor such tokens, making the aforementioned widely-used apps get focus when clicking on their tray icon or notification.</p> <p>Amusingly, clicking on a notification sends the app a perfectly valid activation token from the notification daemon, but these apps seem to simply ignore it. Maybe in the future these apps/toolkits (Electron, Qt) are fixed, making this debug flag unnecessary.</p> <pre><code>debug {\n    honor-xdg-activation-with-invalid-serial\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#skip-cursor-only-updates-during-vrr","title":"<code>skip-cursor-only-updates-during-vrr</code>","text":"<p>Since: 25.08</p> <p>Skips redrawing the screen from cursor input while variable refresh rate is active.</p> <p>Useful for games where the cursor isn't drawn internally to prevent erratic VRR shifts in response to cursor movement.</p> <p>Note that the current implementation has some issues, for example when there's nothing redrawing the screen (like a game), the rendering will appear to completely freeze (since cursor movements won't cause redraws).</p> <pre><code>debug {\n    skip-cursor-only-updates-during-vrr\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#deactivate-unfocused-windows","title":"<code>deactivate-unfocused-windows</code>","text":"<p>Since: 25.08</p> <p>Some clients (notably, Chromium- and Electron-based, like Teams or Slack) erroneously use the Activated xdg window state instead of keyboard focus for things like deciding whether to send notifications for new messages, or for picking where to show an IME popup. Niri keeps the Activated state on unfocused workspaces and invisible tabbed windows (to reduce unwanted animations), surfacing bugs in these applications.</p> <p>Set this debug flag to work around these problems. It will cause niri to drop the Activated state for all unfocused windows.</p> <pre><code>debug {\n    deactivate-unfocused-windows\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#keep-max-bpc-unchanged","title":"<code>keep-max-bpc-unchanged</code>","text":"<p>Since: 25.08</p> <p>When connecting monitors, niri sets their max bpc to 8 in order to reduce display bandwidth and to potentially allow more monitors to be connected at once. Restricting bpc to 8 is not a problem since we don't support HDR or color management yet and can't really make use of higher bpc.</p> <p>Apparently, setting max bpc to 8 breaks some displays driven by AMDGPU. If this happens to you, set this debug flag, which will prevent niri from changing max bpc. AMDGPU bug report: https://gitlab.freedesktop.org/drm/amd/-/issues/4487.</p> <pre><code>debug {\n    keep-max-bpc-unchanged\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#key-bindings","title":"Key Bindings","text":"<p>These are not debug options, but rather key bindings.</p>"},{"location":"Configuration%3A-Debug-Options.html#toggle-debug-tint","title":"<code>toggle-debug-tint</code>","text":"<p>Tints all surfaces green, unless they are being directly scanned out.</p> <p>Useful to check if direct scanout is working.</p> <pre><code>binds {\n    Mod+Shift+Ctrl+T { toggle-debug-tint; }\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#debug-toggle-opaque-regions","title":"<code>debug-toggle-opaque-regions</code>","text":"<p>Since: 0.1.6</p> <p>Tints regions marked as opaque with blue and the rest of the render elements with red.</p> <p>Useful to check how Wayland surfaces and internal render elements mark their parts as opaque, which is a rendering performance optimization.</p> <pre><code>binds {\n    Mod+Shift+Ctrl+O { debug-toggle-opaque-regions; }\n}\n</code></pre>"},{"location":"Configuration%3A-Debug-Options.html#debug-toggle-damage","title":"<code>debug-toggle-damage</code>","text":"<p>Since: 0.1.6</p> <p>Tints damaged regions with red.</p> <pre><code>binds {\n    Mod+Shift+Ctrl+D { debug-toggle-damage; }\n}\n</code></pre>"},{"location":"Configuration%3A-Gestures.html","title":"Gestures","text":""},{"location":"Configuration%3A-Gestures.html#overview","title":"Overview","text":"<p>Since: 25.02</p> <p>The <code>gestures</code> config section contains gesture settings. For an overview of all niri gestures, see the Gestures wiki page.</p> <p>Here's a quick glance at the available settings along with their default values.</p> <pre><code>gestures {\n    dnd-edge-view-scroll {\n        trigger-width 30\n        delay-ms 100\n        max-speed 1500\n    }\n\n    dnd-edge-workspace-switch {\n        trigger-height 50\n        delay-ms 100\n        max-speed 1500\n    }\n\n    hot-corners {\n        // off\n        top-left\n        // top-right\n        // bottom-left\n        // bottom-right\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Gestures.html#dnd-edge-view-scroll","title":"<code>dnd-edge-view-scroll</code>","text":"<p>Scroll the tiling view when moving the mouse cursor against a monitor edge during drag-and-drop (DnD). Also works on a touchscreen.</p> <p>This will work for regular drag-and-drop (e.g. dragging a file from a file manager), and for window interactive move when targeting the tiling layout.</p> <p>The options are:</p> <ul> <li><code>trigger-width</code>: size of the area near the monitor edge that will trigger the scrolling, in logical pixels.</li> <li><code>delay-ms</code>: delay in milliseconds before the scrolling starts. Avoids unwanted scrolling when dragging things across monitors.</li> <li><code>max-speed</code>: maximum scrolling speed in logical pixels per second. The scrolling speed increases linearly as you move your mouse cursor from <code>trigger-width</code> to the very edge of the monitor.</li> </ul> <pre><code>gestures {\n    // Increase the trigger area and maximum speed.\n    dnd-edge-view-scroll {\n        trigger-width 100\n        max-speed 3000\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Gestures.html#dnd-edge-workspace-switch","title":"<code>dnd-edge-workspace-switch</code>","text":"<p>Since: 25.05</p> <p>Scroll the workspaces up/down when moving the mouse cursor against a monitor edge during drag-and-drop (DnD) while in the overview. Also works on a touchscreen.</p> <p>The options are:</p> <ul> <li><code>trigger-height</code>: size of the area near the monitor edge that will trigger the scrolling, in logical pixels.</li> <li><code>delay-ms</code>: delay in milliseconds before the scrolling starts. Avoids unwanted scrolling when dragging things across monitors.</li> <li><code>max-speed</code>: maximum scrolling speed; 1500 corresponds to one screen height per second. The scrolling speed increases linearly as you move your mouse cursor from <code>trigger-width</code> to the very edge of the monitor.</li> </ul> <pre><code>gestures {\n    // Increase the trigger area and maximum speed.\n    dnd-edge-workspace-switch {\n        trigger-height 100\n        max-speed 3000\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Gestures.html#hot-corners","title":"<code>hot-corners</code>","text":"<p>Since: 25.05</p> <p>Put your mouse at the very top-left corner of a monitor to toggle the overview. Also works during drag-and-dropping something.</p> <p><code>off</code> disables the hot corners.</p> <pre><code>// Disable the hot corners.\ngestures {\n    hot-corners {\n        off\n    }\n}\n</code></pre> <p>Since: next release You can choose specific hot corners by name: <code>top-left</code>, <code>top-right</code>, <code>bottom-left</code>, <code>bottom-right</code>. If no corners are explicitly set, the top-left corner will be active by default.</p> <pre><code>// Enable the top-right and bottom-right hot corners.\ngestures {\n    hot-corners {\n        top-right\n        bottom-right\n    }\n}\n</code></pre> <p>You can also customize hot corners per-output in the output config.</p>"},{"location":"Configuration%3A-Include.html","title":"Include","text":"<p>Since: next release</p> <p>You can include other files at the top level of the config.</p> <pre><code>// Some settings...\n\ninclude \"colors.kdl\"\n\n// Some more settings...\n</code></pre> <p>Included files have the same structure as the main config file. Settings from included files will be merged with the settings from the main config file.</p> <p>Included config files can in turn include more files. All included files are watched for changes, and the config live-reloads when any of them change.</p> <p>Includes work only at the top level of the config:</p> <pre><code>// All good: include at the top level.\ninclude \"something.kdl\"\n\nlayout {\n    // NOT allowed: include inside some other section.\n    include \"other.kdl\"\n}\n</code></pre>"},{"location":"Configuration%3A-Include.html#positionality","title":"Positionality","text":"<p>Includes are positional. They will override options set prior to them. Window rules from included files will be inserted at the position of the <code>include</code> line. For example:</p> <pre><code>// colors.kdl\nlayout {\n    border {\n        active-color \"green\"\n    }\n}\n\noverview {\n    backdrop-color \"green\"\n}\n</code></pre> <pre><code>// config.kdl\nlayout {\n    border {\n        active-color \"red\"\n    }\n}\n\n// This overrides the border color and the backdrop color to green.\ninclude \"colors.kdl\"\n\n// This sets the overview backdrop color to red again.\noverview {\n    backdrop-color \"red\"\n}\n</code></pre> <p>The end result:</p> <ul> <li>the border color is green (from <code>colors.kdl</code>),</li> <li>the overview backdrop color is red (it was set after <code>colors.kdl</code>).</li> </ul> <p>Another example:</p> <pre><code>// rules.kdl\nwindow-rule {\n    match app-id=\"Alacritty\"\n    open-maximized false\n}\n</code></pre> <pre><code>// config.kdl\nwindow-rule {\n    open-maximized true\n}\n\n// Window rules get inserted at this position.\ninclude \"rules.kdl\"\n\nwindow-rule {\n    match app-id=\"firefox$\"\n    open-maximized true\n}\n</code></pre> <p>This is equivalent to the following config file:</p> <pre><code>window-rule {\n    open-maximized true\n}\n\n// Included from rules.kdl.\nwindow-rule {\n    match app-id=\"Alacritty\"\n    open-maximized false\n}\n\nwindow-rule {\n    match app-id=\"firefox$\"\n    open-maximized true\n}\n</code></pre>"},{"location":"Configuration%3A-Include.html#merging","title":"Merging","text":"<p>Most config sections are merged between includes, meaning that you can set only a few properties, and only those properties will change.</p> <pre><code>// colors.kdl\nlayout {\n    // Does not affect gaps, border width, etc.\n    // Only changes colors as written.\n    focus-ring {\n        active-color \"blue\"\n    }\n\n    border {\n        active-color \"green\"\n    }\n}\n</code></pre> <pre><code>// config.kdl\ninclude \"colors.kdl\"\n\nlayout {\n    // Does not set border and focus-ring colors,\n    // so colors from colors.kdl are used.\n    gaps 8\n\n    border {\n        width 8\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Include.html#multipart-sections","title":"Multipart sections","text":"<p>Multipart sections like <code>window-rule</code>, <code>output</code>, or <code>workspace</code> are inserted as is without merging:</p> <pre><code>// laptop.kdl\noutput \"eDP-1\" {\n    // ...\n}\n</code></pre> <pre><code>// config.kdl\noutput \"DP-2\" {\n    // ...\n}\n\ninclude \"laptop.kdl\"\n\n// End result: both DP-2 and eDP-1 settings.\n</code></pre>"},{"location":"Configuration%3A-Include.html#binds","title":"Binds","text":"<p><code>binds</code> will override previously-defined conflicting keys:</p> <pre><code>// binds.kdl\nbinds {\n    Mod+T { spawn \"alacritty\"; }\n}\n</code></pre> <pre><code>// config.kdl\ninclude \"binds.kdl\"\n\nbinds {\n    // Overrides Mod+T from binds.kdl.\n    Mod+T { spawn \"foot\"; }\n}\n</code></pre>"},{"location":"Configuration%3A-Include.html#flags","title":"Flags","text":"<p>Most flags can be disabled with <code>false</code>:</p> <pre><code>// csd.kdl\n\n// Write \"false\" to explicitly disable.\nprefer-no-csd false\n</code></pre> <pre><code>// config.kdl\n\n// Enable prefer-no-csd in the main config.\nprefer-no-csd\n\n// Including csd.kdl will disable it again.\ninclude \"csd.kdl\"\n</code></pre>"},{"location":"Configuration%3A-Include.html#non-merging-sections","title":"Non-merging sections","text":"<p>Some sections where the contents represent a combined structure are not merged. Examples are <code>struts</code>, <code>preset-column-widths</code>, individual subsections in <code>animations</code>, pointing device sections in <code>input</code>.</p> <pre><code>// struts.kdl\nlayout {\n    struts {\n        left 64\n        right 64\n    }\n}\n</code></pre> <pre><code>// config.kdl\nlayout {\n    struts {\n        top 64\n        bottom 64\n    }\n}\n\ninclude \"struts.kdl\"\n\n// Struts are not merged.\n// End result is only left and right struts.\n</code></pre>"},{"location":"Configuration%3A-Include.html#border-special-case","title":"Border special case","text":"<p>There's one special case that differs between the main config and included configs.</p> <p>Writing <code>layout { border {} }</code> in an included config does nothing (since no properties are changed). However, writing the same in the main config will enable the border, i.e. it's equivalent to <code>layout { border { on; } }</code>.</p> <p>So, if you want to move your layout configuration from the main config to a separate file, remember to add <code>on</code> to the border section, for example:</p> <pre><code>// separate.kdl\nlayout {\n    border {\n        // Add this line:\n        on\n\n        width 4\n        active-color \"#ffc87f\"\n        inactive-color \"#505050\"\n    }\n}\n</code></pre> <p>The reason for this special case is that this is how it historically worked: back when I added borders, we didn't have any <code>on</code> flags, so I made writing the <code>border {}</code> section enable the border, with an explicit <code>off</code> to disable it. It wouldn't be too problematic to change it, however the default config always had a pre-filled <code>layout { border { off; } }</code> section with a note saying that commenting out the <code>off</code> is enough to enable the border. Many people likely have this part of the default config embedded in their configs now, so changing how it works would just cause a lot of confusion.</p>"},{"location":"Configuration%3A-Input.html","title":"Input","text":""},{"location":"Configuration%3A-Input.html#overview","title":"Overview","text":"<p>In this section you can configure input devices like keyboard and mouse, and some input-related options.</p> <p>There's a section for each device type: <code>keyboard</code>, <code>touchpad</code>, <code>mouse</code>, <code>trackpoint</code>, <code>tablet</code>, <code>touch</code>. Settings in those sections will apply to every device of that type. Currently, there's no way to configure specific devices individually (but that is planned).</p> <p>All settings at a glance:</p> <pre><code>input {\n    keyboard {\n        xkb {\n            // layout \"us\"\n            // variant \"colemak_dh_ortho\"\n            // options \"compose:ralt,ctrl:nocaps\"\n            // model \"\"\n            // rules \"\"\n            // file \"~/.config/keymap.xkb\"\n        }\n\n        // repeat-delay 600\n        // repeat-rate 25\n        // track-layout \"global\"\n        numlock\n    }\n\n    touchpad {\n        // off\n        tap\n        // dwt\n        // dwtp\n        // drag false\n        // drag-lock\n        natural-scroll\n        // accel-speed 0.2\n        // accel-profile \"flat\"\n        // scroll-factor 1.0\n        // scroll-factor vertical=1.0 horizontal=-2.0\n        // scroll-method \"two-finger\"\n        // scroll-button 273\n        // scroll-button-lock\n        // tap-button-map \"left-middle-right\"\n        // click-method \"clickfinger\"\n        // left-handed\n        // disabled-on-external-mouse\n        // middle-emulation\n    }\n\n    mouse {\n        // off\n        // natural-scroll\n        // accel-speed 0.2\n        // accel-profile \"flat\"\n        // scroll-factor 1.0\n        // scroll-factor vertical=1.0 horizontal=-2.0\n        // scroll-method \"no-scroll\"\n        // scroll-button 273\n        // scroll-button-lock\n        // left-handed\n        // middle-emulation\n    }\n\n    trackpoint {\n        // off\n        // natural-scroll\n        // accel-speed 0.2\n        // accel-profile \"flat\"\n        // scroll-method \"on-button-down\"\n        // scroll-button 273\n        // scroll-button-lock\n        // left-handed\n        // middle-emulation\n    }\n\n    trackball {\n        // off\n        // natural-scroll\n        // accel-speed 0.2\n        // accel-profile \"flat\"\n        // scroll-method \"on-button-down\"\n        // scroll-button 273\n        // scroll-button-lock\n        // left-handed\n        // middle-emulation\n    }\n\n    tablet {\n        // off\n        map-to-output \"eDP-1\"\n        // left-handed\n        // calibration-matrix 1.0 0.0 0.0 0.0 1.0 0.0\n    }\n\n    touch {\n        // off\n        map-to-output \"eDP-1\"\n        // calibration-matrix 1.0 0.0 0.0 0.0 1.0 0.0\n    }\n\n    // disable-power-key-handling\n    // warp-mouse-to-focus\n    // focus-follows-mouse max-scroll-amount=\"0%\"\n    // workspace-auto-back-and-forth\n\n    // mod-key \"Super\"\n    // mod-key-nested \"Alt\"\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#keyboard","title":"Keyboard","text":""},{"location":"Configuration%3A-Input.html#layout","title":"Layout","text":"<p>In the <code>xkb</code> section, you can set layout, variant, options, model and rules. These are passed directly to libxkbcommon, which is also used by most other Wayland compositors. See the <code>xkeyboard-config(7)</code> manual for more information.</p> <pre><code>input {\n    keyboard {\n        xkb {\n            layout \"us\"\n            variant \"colemak_dh_ortho\"\n            options \"compose:ralt,ctrl:nocaps\"\n        }\n    }\n}\n</code></pre> <p>Tip</p> <p>Since: 25.02</p> <p>Alternatively, you can directly set a path to a .xkb file containing an xkb keymap. This overrides all other xkb settings.</p> <pre><code>input {\n    keyboard {\n        xkb {\n            file \"~/.config/keymap.xkb\"\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>Since: 25.08</p> <p>If the <code>xkb</code> section is empty (like it is by default), niri will fetch xkb settings from systemd-localed at <code>org.freedesktop.locale1</code> over D-Bus. This way, for example, system installers can dynamically set the niri keyboard layout. You can see this layout in <code>localectl</code> and change it with <code>localectl set-x11-keymap</code>, for example:</p> <pre><code>$ localectl set-x11-keymap \"us\" \"\" \"colemak_dh_ortho\" \"compose:ralt,ctrl:nocaps\"\n$ localectl\nSystem Locale: LANG=en_US.UTF-8\n               LC_NUMERIC=ru_RU.UTF-8\n               LC_TIME=ru_RU.UTF-8\n               LC_MONETARY=ru_RU.UTF-8\n               LC_PAPER=ru_RU.UTF-8\n               LC_MEASUREMENT=ru_RU.UTF-8\n    VC Keymap: us-colemak_dh_ortho\n   X11 Layout: us\n  X11 Variant: colemak_dh_ortho\n  X11 Options: compose:ralt,ctrl:nocaps\n</code></pre> <p>By default, <code>localectl</code> will set the TTY keymap to the closest match of the XKB keymap. You can prevent that with a <code>--no-convert</code> flag, for example: <code>localectl set-x11-keymap --no-convert \"us,ru\"</code>.</p> <p>These settings are picked up by some other programs too, like GDM.</p> <p>When using multiple layouts, niri can remember the current layout globally (the default) or per-window. You can control this with the <code>track-layout</code> option.</p> <ul> <li><code>global</code>: layout change is global for all windows.</li> <li><code>window</code>: layout is tracked for each window individually.</li> </ul> <pre><code>input {\n    keyboard {\n        track-layout \"global\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#repeat","title":"Repeat","text":"<p>Delay is in milliseconds before the keyboard repeat starts. Rate is in characters per second.</p> <pre><code>input {\n    keyboard {\n        repeat-delay 600\n        repeat-rate 25\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#num-lock","title":"Num Lock","text":"<p>Since: 25.05</p> <p>Set the <code>numlock</code> flag to turn on Num Lock automatically at startup.</p> <p>You might want to disable (comment out) <code>numlock</code> if you're using a laptop with a keyboard that overlays Num Lock keys on top of regular keys.</p> <pre><code>input {\n    keyboard {\n        numlock\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#pointing-devices","title":"Pointing Devices","text":"<p>Most settings for the pointing devices are passed directly to libinput. Other Wayland compositors also use libinput, so it's likely you will find the same settings there. For flags like <code>tap</code>, omit them or comment them out to disable the setting.</p> <p>A few settings are common between input devices:</p> <ul> <li><code>off</code>: if set, no events will be sent from this device.</li> </ul> <p>A few settings are common between <code>touchpad</code>, <code>mouse</code>, <code>trackpoint</code>, and <code>trackball</code>:</p> <ul> <li><code>natural-scroll</code>: if set, inverts the scrolling direction.</li> <li><code>accel-speed</code>: pointer acceleration speed, valid values are from <code>-1.0</code> to <code>1.0</code> where the default is <code>0.0</code>.</li> <li><code>accel-profile</code>: can be <code>adaptive</code> (the default) or <code>flat</code> (disables pointer acceleration).</li> <li><code>scroll-method</code>: when to generate scroll events instead of pointer motion events, can be <code>no-scroll</code>, <code>two-finger</code>, <code>edge</code>, or <code>on-button-down</code>.   The default and supported methods vary depending on the device type.</li> <li><code>scroll-button</code>: Since: 0.1.10 the button code used for the <code>on-button-down</code> scroll method. You can find it in <code>libinput debug-events</code>.</li> <li><code>scroll-button-lock</code>: Since: 25.08 when enabled, the button does not need to be held down. Pressing once engages scrolling, pressing a second time disengages it, and double click acts as single click of the the underlying button.</li> <li><code>left-handed</code>: if set, changes the device to left-handed mode.</li> <li><code>middle-emulation</code>: emulate a middle mouse click by pressing left and right mouse buttons at once.</li> </ul> <p>Settings specific to <code>touchpad</code>s:</p> <ul> <li><code>tap</code>: tap-to-click.</li> <li><code>dwt</code>: disable-when-typing.</li> <li><code>dwtp</code>: disable-when-trackpointing.</li> <li><code>drag</code>: Since: 25.05 can be <code>true</code> or <code>false</code>, controls if tap-and-drag is enabled.</li> <li><code>drag-lock</code>: Since: 25.02 if set, lifting the finger off for a short time while dragging will not drop the dragged item. See the libinput documentation.</li> <li><code>tap-button-map</code>: can be <code>left-right-middle</code> or <code>left-middle-right</code>, controls which button corresponds to a two-finger tap and a three-finger tap.</li> <li><code>click-method</code>: can be <code>button-areas</code> or <code>clickfinger</code>, changes the click method.</li> <li><code>disabled-on-external-mouse</code>: do not send events while external pointer device is plugged in.</li> </ul> <p>Settings specific to <code>touchpad</code> and <code>mouse</code>:</p> <ul> <li> <p><code>scroll-factor</code>: Since: 0.1.10 scales the scrolling speed by this value.</p> <p>Since: 25.08 You can also override horizontal and vertical scroll factor separately like so: <code>scroll-factor horizontal=2.0 vertical=-1.0</code></p> </li> </ul> <p>Settings specific to <code>tablet</code> and <code>touch</code>:</p> <ul> <li><code>calibration-matrix</code>: set to six floating point numbers to change the calibration matrix. See the <code>LIBINPUT_CALIBRATION_MATRIX</code> documentation for examples.<ul> <li>Since: 25.02 for <code>tablet</code></li> <li>Since: next release for <code>touch</code></li> </ul> </li> </ul> <p>Tablets and touchscreens are absolute pointing devices that can be mapped to a specific output like so:</p> <pre><code>input {\n    tablet {\n        map-to-output \"eDP-1\"\n    }\n\n    touch {\n        map-to-output \"eDP-1\"\n    }\n}\n</code></pre> <p>Valid output names are the same as the ones used for output configuration.</p> <p>Since: 0.1.7 When a tablet is not mapped to any output, it will map to the union of all connected outputs, without aspect ratio correction.</p>"},{"location":"Configuration%3A-Input.html#general-settings","title":"General Settings","text":"<p>These settings are not specific to a particular input device.</p>"},{"location":"Configuration%3A-Input.html#disable-power-key-handling","title":"<code>disable-power-key-handling</code>","text":"<p>By default, niri will take over the power button to make it sleep instead of power off. Set this if you would like to configure the power button elsewhere (i.e. <code>logind.conf</code>).</p> <pre><code>input {\n    disable-power-key-handling\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#warp-mouse-to-focus","title":"<code>warp-mouse-to-focus</code>","text":"<p>Makes the mouse warp to newly focused windows.</p> <p>Does not make the cursor visible if it had been hidden.</p> <pre><code>input {\n    warp-mouse-to-focus\n}\n</code></pre> <p>By default, the cursor warps separately horizontally and vertically. I.e. if moving the mouse only horizontally is enough to put it inside the newly focused window, then the mouse will move only horizontally, and not vertically.</p> <p>Since: 25.05 You can customize this with the <code>mode</code> property.</p> <ul> <li><code>mode=\"center-xy\"</code>: warps by both X and Y coordinates together. So if the mouse was anywhere outside the newly focused window, it will warp to the center of the window.</li> <li><code>mode=\"center-xy-always\"</code>: warps by both X and Y coordinates together, even if the mouse was already somewhere inside the newly focused window.</li> </ul> <pre><code>input {\n    warp-mouse-to-focus mode=\"center-xy\"\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#focus-follows-mouse","title":"<code>focus-follows-mouse</code>","text":"<p>Focuses windows and outputs automatically when moving the mouse over them.</p> <pre><code>input {\n    focus-follows-mouse\n}\n</code></pre> <p>Since: 0.1.8 You can optionally set <code>max-scroll-amount</code>. Then, focus-follows-mouse won't focus a window if it will result in the view scrolling more than the set amount. The value is a percentage of the working area width.</p> <pre><code>input {\n    // Allow focus-follows-mouse when it results in scrolling at most 10% of the screen.\n    focus-follows-mouse max-scroll-amount=\"10%\"\n}\n</code></pre> <pre><code>input {\n    // Allow focus-follows-mouse only when it will not scroll the view.\n    focus-follows-mouse max-scroll-amount=\"0%\"\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#workspace-auto-back-and-forth","title":"<code>workspace-auto-back-and-forth</code>","text":"<p>Normally, switching to the same workspace by index twice will do nothing (since you're already on that workspace). If this flag is enabled, switching to the same workspace by index twice will switch back to the previous workspace.</p> <p>Niri will correctly switch to the workspace you came from, even if workspaces were reordered in the meantime.</p> <pre><code>input {\n    workspace-auto-back-and-forth\n}\n</code></pre>"},{"location":"Configuration%3A-Input.html#mod-key-mod-key-nested","title":"<code>mod-key</code>, <code>mod-key-nested</code>","text":"<p>Since: 25.05</p> <p>Customize the <code>Mod</code> key for key bindings. Only valid modifiers are allowed, e.g. <code>Super</code>, <code>Alt</code>, <code>Mod3</code>, <code>Mod5</code>, <code>Ctrl</code>, <code>Shift</code>.</p> <p>By default, <code>Mod</code> is equal to <code>Super</code> when running niri on a TTY, and to <code>Alt</code> when running niri as a nested winit window.</p> <p>Note</p> <p>There are a lot of default bindings with Mod, none of them \"make it through\" to the underlying window. You probably don't want to set <code>mod-key</code> to Ctrl or Shift, since Ctrl is commonly used for app hotkeys, and Shift is used for, well, regular typing.</p> <pre><code>// Switch the mod keys around: use Alt normally, and Super inside a nested window.\ninput {\n    mod-key \"Alt\"\n    mod-key-nested \"Super\"\n}\n</code></pre>"},{"location":"Configuration%3A-Introduction.html","title":"Introduction","text":""},{"location":"Configuration%3A-Introduction.html#per-section-documentation","title":"Per-Section Documentation","text":"<p>You can find documentation for various sections of the config on these wiki pages:</p> <ul> <li><code>input {}</code></li> <li><code>output \"eDP-1\" {}</code></li> <li><code>binds {}</code></li> <li><code>switch-events {}</code></li> <li><code>layout {}</code></li> <li>top-level options</li> <li><code>window-rule {}</code></li> <li><code>layer-rule {}</code></li> <li><code>animations {}</code></li> <li><code>gestures {}</code></li> <li><code>debug {}</code></li> <li><code>include \"other.kdl\"</code></li> </ul>"},{"location":"Configuration%3A-Introduction.html#loading","title":"Loading","text":"<p>Niri will load configuration from <code>$XDG_CONFIG_HOME/niri/config.kdl</code> or <code>~/.config/niri/config.kdl</code>, falling back to <code>/etc/niri/config.kdl</code>. If both of these files are missing, niri will create <code>$XDG_CONFIG_HOME/niri/config.kdl</code> with the contents of the default configuration file, which are embedded into the niri binary at build time. Please use the default configuration file as the starting point for your custom configuration.</p> <p>The configuration is live-reloaded. Simply edit and save the config file, and your changes will be applied. This includes key bindings, output settings like mode, window rules, and everything else.</p> <p>You can run <code>niri validate</code> to parse the config and see any errors.</p> <p>To use a different config file path, pass it in the <code>--config</code> or <code>-c</code> argument to <code>niri</code>.</p> <p>You can also set <code>$NIRI_CONFIG</code> to the path of the config file. <code>--config</code> always takes precedence. If <code>--config</code> or <code>$NIRI_CONFIG</code> doesn't point to a real file, the config will not be loaded. If <code>$NIRI_CONFIG</code> is set to an empty string, it is ignored and the default config location is used instead.</p>"},{"location":"Configuration%3A-Introduction.html#syntax","title":"Syntax","text":"<p>The config is written in KDL.</p>"},{"location":"Configuration%3A-Introduction.html#comments","title":"Comments","text":"<p>Lines starting with <code>//</code> are comments; they are ignored.</p> <p>Also, you can put <code>/-</code> in front of a section to comment out the entire section:</p> <pre><code>/-output \"eDP-1\" {\n    // Everything inside here is ignored.\n    // The display won't be turned off\n    // as the whole section is commented out.\n    off\n}\n</code></pre>"},{"location":"Configuration%3A-Introduction.html#flags","title":"Flags","text":"<p>Toggle options in niri are commonly represented as flags. Writing out the flag enables it, and omitting it or commenting it out disables it. For example:</p> <pre><code>// \"Focus follows mouse\" is enabled.\ninput {\n    focus-follows-mouse\n\n    // Other settings...\n}\n</code></pre> <pre><code>// \"Focus follows mouse\" is disabled.\ninput {\n    // focus-follows-mouse\n\n    // Other settings...\n}\n</code></pre>"},{"location":"Configuration%3A-Introduction.html#sections","title":"Sections","text":"<p>Most sections cannot be repeated. For example:</p> <pre><code>// This is valid: every section appears once.\ninput {\n    keyboard {\n        // ...\n    }\n\n    touchpad {\n        // ...\n    }\n}\n</code></pre> <pre><code>// This is NOT valid: input section appears twice.\ninput {\n    keyboard {\n        // ...\n    }\n}\n\ninput {\n    touchpad {\n        // ...\n    }\n}\n</code></pre> <p>Exceptions are, for example, sections that configure different devices by name:</p> <pre><code>output \"eDP-1\" {\n    // ...\n}\n\n// This is valid: this section configures a different output.\noutput \"HDMI-A-1\" {\n    // ...\n}\n\n// This is NOT valid: \"eDP-1\" already appeared above.\n// It will either throw a config parsing error, or otherwise not work.\noutput \"eDP-1\" {\n    // ...\n}\n</code></pre>"},{"location":"Configuration%3A-Introduction.html#defaults","title":"Defaults","text":"<p>Omitting most of the sections of the config file will leave you with the default values for that section. A notable exception is <code>binds {}</code>: they do not get filled with defaults, so make sure you do not erase this section.</p>"},{"location":"Configuration%3A-Introduction.html#breaking-change-policy","title":"Breaking Change Policy","text":"<p>As a rule, niri updates should not break existing config files. (For example, the default config from niri v0.1.0 still parses fine on v25.02 as I'm writing this.)</p> <p>Exceptions can be made for parsing bugs. For example, niri used to accept multiple binds to the same key, but this was not intended and did not do anything (the first bind was always used). A patch release changed niri from silently accepting this to causing a parsing failure. This is not a blanket rule, I will consider the potential impact of every breaking change like this before deciding to carry on with it.</p> <p>Keep in mind that the breaking change policy applies only to niri releases. Commits between releases can and do occasionally break the config as new features are ironed out. However, I do try to limit these, since several people are running git builds.</p>"},{"location":"Configuration%3A-Key-Bindings.html","title":"Key Bindings","text":""},{"location":"Configuration%3A-Key-Bindings.html#overview","title":"Overview","text":"<p>Key bindings are declared in the <code>binds {}</code> section of the config.</p> <p>Note</p> <p>This is one of the few sections that does not get automatically filled with defaults if you omit it, so make sure to copy it from the default config.</p> <p>Each bind is a hotkey followed by one action enclosed in curly brackets. For example:</p> <pre><code>binds {\n    Mod+Left { focus-column-left; }\n    Super+Alt+L { spawn \"swaylock\"; }\n}\n</code></pre> <p>The hotkey consists of modifiers separated by <code>+</code> signs, followed by an XKB key name in the end.</p> <p>Valid modifiers are:</p> <ul> <li><code>Ctrl</code> or <code>Control</code>;</li> <li><code>Shift</code>;</li> <li><code>Alt</code>;</li> <li><code>Super</code> or <code>Win</code>;</li> <li><code>ISO_Level3_Shift</code> or <code>Mod5</code>\u2014this is the AltGr key on certain layouts;</li> <li><code>ISO_Level5_Shift</code>: can be used with an xkb lv5 option like <code>lv5:caps_switch</code>;</li> <li><code>Mod</code>.</li> </ul> <p><code>Mod</code> is a special modifier that is equal to <code>Super</code> when running niri on a TTY, and to <code>Alt</code> when running niri as a nested winit window. This way, you can test niri in a window without causing too many conflicts with the host compositor's key bindings. For this reason, most of the default keys use the <code>Mod</code> modifier.</p> <p>Since: 25.05 You can customize the <code>Mod</code> key in the <code>input</code> section of the config.</p> <p>Tip</p> <p>To find an XKB name for a particular key, you may use a program like <code>wev</code>.</p> <p>Open it from a terminal and press the key that you want to detect. In the terminal, you will see output like this:</p> <pre><code>[14:     wl_keyboard] key: serial: 757775; time: 44940343; key: 113; state: 1 (pressed)\n                      sym: Left         (65361), utf8: ''\n[14:     wl_keyboard] key: serial: 757776; time: 44940432; key: 113; state: 0 (released)\n                      sym: Left         (65361), utf8: ''\n[14:     wl_keyboard] key: serial: 757777; time: 44940753; key: 114; state: 1 (pressed)\n                      sym: Right        (65363), utf8: ''\n[14:     wl_keyboard] key: serial: 757778; time: 44940846; key: 114; state: 0 (released)\n                      sym: Right        (65363), utf8: ''\n</code></pre> <p>Here, look at <code>sym: Left</code> and <code>sym: Right</code>: these are the key names. I was pressing the left and the right arrow in this example.</p> <p>Keep in mind that binding shifted keys requires spelling out Shift and the unshifted version of the key, according to your XKB layout. For example, on the US QWERTY layout, &lt; is on Shift + ,, so to bind it, you spell out something like <code>Mod+Shift+Comma</code>.</p> <p>As another example, if you've configured the French B\u00c9PO XKB layout, your &lt; is on AltGr + \u00ab. AltGr is <code>ISO_Level3_Shift</code>, or equivalently <code>Mod5</code>, so to bind it, you spell out something like <code>Mod+Mod5+guillemotleft</code>.</p> <p>When resolving latin keys, niri will search for the first configured XKB layout that has the latin key. So for example with US QWERTY and RU layouts configured, US QWERTY will be used for latin binds.</p> <p>Since: 0.1.8 Binds will repeat by default (i.e. holding down a bind will make it trigger repeatedly). You can disable that for specific binds with <code>repeat=false</code>:</p> <pre><code>binds {\n    Mod+T repeat=false { spawn \"alacritty\"; }\n}\n</code></pre> <p>Binds can also have a cooldown, which will rate-limit the bind and prevent it from repeatedly triggering too quickly.</p> <pre><code>binds {\n    Mod+T cooldown-ms=500 { spawn \"alacritty\"; }\n}\n</code></pre> <p>This is mostly useful for the scroll bindings.</p>"},{"location":"Configuration%3A-Key-Bindings.html#scroll-bindings","title":"Scroll Bindings","text":"<p>You can bind mouse wheel scroll ticks using the following syntax. These binds will change direction based on the <code>natural-scroll</code> setting.</p> <pre><code>binds {\n    Mod+WheelScrollDown cooldown-ms=150 { focus-workspace-down; }\n    Mod+WheelScrollUp   cooldown-ms=150 { focus-workspace-up; }\n    Mod+WheelScrollRight                { focus-column-right; }\n    Mod+WheelScrollLeft                 { focus-column-left; }\n}\n</code></pre> <p>Similarly, you can bind touchpad scroll \"ticks\". Touchpad scrolling is continuous, so for these binds it is split into discrete intervals based on distance travelled.</p> <p>These binds are also affected by touchpad's <code>natural-scroll</code>, so these example binds are \"inverted\", since niri has <code>natural-scroll</code> enabled for touchpads by default.</p> <pre><code>binds {\n    Mod+TouchpadScrollDown { spawn \"wpctl\" \"set-volume\" \"@DEFAULT_AUDIO_SINK@\" \"0.02+\"; }\n    Mod+TouchpadScrollUp   { spawn \"wpctl\" \"set-volume\" \"@DEFAULT_AUDIO_SINK@\" \"0.02-\"; }\n}\n</code></pre> <p>Both mouse wheel and touchpad scroll binds will prevent applications from receiving any scroll events when their modifiers are held down. For example, if you have a <code>Mod+WheelScrollDown</code> bind, then while holding <code>Mod</code>, all mouse wheel scrolling will be consumed by niri.</p>"},{"location":"Configuration%3A-Key-Bindings.html#mouse-click-bindings","title":"Mouse Click Bindings","text":"<p>Since: 25.01</p> <p>You can bind mouse clicks using the following syntax.</p> <pre><code>binds {\n    Mod+MouseLeft    { close-window; }\n    Mod+MouseRight   { close-window; }\n    Mod+MouseMiddle  { close-window; }\n    Mod+MouseForward { close-window; }\n    Mod+MouseBack    { close-window; }\n}\n</code></pre> <p>Mouse clicks operate on the window that was focused at the time of the click, not the window you're clicking.</p> <p>Note that binding <code>Mod+MouseLeft</code> or <code>Mod+MouseRight</code> will override the corresponding gesture (moving or resizing the window).</p>"},{"location":"Configuration%3A-Key-Bindings.html#custom-hotkey-overlay-titles","title":"Custom Hotkey Overlay Titles","text":"<p>Since: 25.02</p> <p>The hotkey overlay (the Important Hotkeys dialog) shows a hardcoded list of binds. You can customize this list using the <code>hotkey-overlay-title</code> property.</p> <p>To add a bind to the hotkey overlay, set the property to the title that you want to show: <pre><code>binds {\n    Mod+Shift+S hotkey-overlay-title=\"Toggle Dark/Light Style\" { spawn \"some-script.sh\"; }\n}\n</code></pre></p> <p>Binds with custom titles are listed after the hardcoded binds and before non-customized Spawn binds.</p> <p>To remove a hardcoded bind from the hotkey overlay, set the property to null: <pre><code>binds {\n    Mod+Q hotkey-overlay-title=null { close-window; }\n}\n</code></pre></p> <p>Tip</p> <p>When multiple key combinations are bound to the same action: - If any of the binds has a custom hotkey overlay title, niri will show that bind. - Otherwise, if any of the binds has a null title, niri will hide the bind. - Otherwise, niri will show the first key combination.</p> <p>Custom titles support Pango markup:</p> <pre><code>binds {\n    Mod+Shift+S hotkey-overlay-title=\"&lt;b&gt;Toggle&lt;/b&gt; &lt;span foreground='red'&gt;Dark&lt;/span&gt;/Light Style\" { spawn \"some-script.sh\"; }\n}\n</code></pre> <p></p>"},{"location":"Configuration%3A-Key-Bindings.html#actions","title":"Actions","text":"<p>Every action that you can bind is also available for programmatic invocation via <code>niri msg action</code>. Run <code>niri msg action</code> to get a full list of actions along with their short descriptions.</p> <p>Here are a few actions that benefit from more explanation.</p>"},{"location":"Configuration%3A-Key-Bindings.html#spawn","title":"<code>spawn</code>","text":"<p>Run a program.</p> <p><code>spawn</code> accepts a path to the program binary as the first argument, followed by arguments to the program. For example:</p> <pre><code>binds {\n    // Run alacritty.\n    Mod+T { spawn \"alacritty\"; }\n\n    // Run `wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1+`.\n    XF86AudioRaiseVolume { spawn \"wpctl\" \"set-volume\" \"@DEFAULT_AUDIO_SINK@\" \"0.1+\"; }\n}\n</code></pre> <p>Tip</p> <p>Since: 0.1.5</p> <p>Spawn bindings have a special <code>allow-when-locked=true</code> property that makes them work even while the session is locked:</p> <pre><code>binds {\n    // This mute bind will work even when the session is locked.\n    XF86AudioMute allow-when-locked=true { spawn \"wpctl\" \"set-mute\" \"@DEFAULT_AUDIO_SINK@\" \"toggle\"; }\n}\n</code></pre> <p>For <code>spawn</code>, niri does not use a shell to run commands, which means that you need to manually separate arguments. See <code>spawn-sh</code> below for an action that uses a shell.</p> <pre><code>binds {\n    // Correct: every argument is in its own quotes.\n    Mod+T { spawn \"alacritty\" \"-e\" \"/usr/bin/fish\"; }\n\n    // Wrong: will interpret the whole `alacritty -e /usr/bin/fish` string as the binary path.\n    Mod+D { spawn \"alacritty -e /usr/bin/fish\"; }\n\n    // Wrong: will pass `-e /usr/bin/fish` as one argument, which alacritty won't understand.\n    Mod+Q { spawn \"alacritty\" \"-e /usr/bin/fish\"; }\n}\n</code></pre> <p>This also means that you cannot expand environment variables or <code>~</code>. If you need this, you can run the command through a shell manually.</p> <pre><code>binds {\n    // Wrong: no shell expansion here. These strings will be passed literally to the program.\n    Mod+T { spawn \"grim\" \"-o\" \"$MAIN_OUTPUT\" \"~/screenshot.png\"; }\n\n    // Correct: run this through a shell manually so that it can expand the arguments.\n    // Note that the entire command is passed as a SINGLE argument,\n    // because shell will do its own argument splitting by whitespace.\n    Mod+D { spawn \"sh\" \"-c\" \"grim -o $MAIN_OUTPUT ~/screenshot.png\"; }\n\n    // You can also use a shell to run multiple commands,\n    // use pipes, process substitution, and so on.\n    Mod+Q { spawn \"sh\" \"-c\" \"notify-send clipboard \\\"$(wl-paste)\\\"\"; }\n}\n</code></pre> <p>As a special case, niri will expand <code>~</code> to the home directory only at the beginning of the program name.</p> <pre><code>binds {\n    // This will work: one ~ at the very beginning.\n    Mod+T { spawn \"~/scripts/do-something.sh\"; }\n}\n</code></pre>"},{"location":"Configuration%3A-Key-Bindings.html#spawn-sh","title":"<code>spawn-sh</code>","text":"<p>Since: 25.08</p> <p>Run a command through the shell.</p> <p>The argument is a single string that is passed verbatim to <code>sh</code>. You can use shell variables, pipelines, <code>~</code> expansion, and everything else as expected.</p> <pre><code>binds {\n    // Works with spawn-sh: all arguments in the same string.\n    Mod+D { spawn-sh \"alacritty -e /usr/bin/fish\"; }\n\n    // Works with spawn-sh: shell variable ($MAIN_OUTPUT), ~ expansion.\n    Mod+T { spawn-sh \"grim -o $MAIN_OUTPUT ~/screenshot.png\"; }\n\n    // Works with spawn-sh: process substitution.\n    Mod+Q { spawn-sh \"notify-send clipboard \\\"$(wl-paste)\\\"\"; }\n\n    // Works with spawn-sh: multiple commands.\n    Super+Alt+S { spawn-sh \"pkill orca || exec orca\"; }\n}\n</code></pre> <p><code>spawn-sh \"some command\"</code> is equivalent to <code>spawn \"sh\" \"-c\" \"some command\"</code>\u2014it's just a less confusing shorthand. Keep in mind that going through the shell incurs a tiny performance penalty compared to directly <code>spawn</code>ing some binary.</p> <p>Using <code>sh</code> is hardcoded, consistent with other compositors. If you want a different shell, write it out using <code>spawn</code>, e.g. <code>spawn \"fish\" \"-c\" \"some fish command\"</code>.</p>"},{"location":"Configuration%3A-Key-Bindings.html#quit","title":"<code>quit</code>","text":"<p>Exit niri after showing a confirmation dialog to avoid accidentally triggering it.</p> <pre><code>binds {\n    Mod+Shift+E { quit; }\n}\n</code></pre> <p>If you want to skip the confirmation dialog, set the flag like so:</p> <pre><code>binds {\n    Mod+Shift+E { quit skip-confirmation=true; }\n}\n</code></pre>"},{"location":"Configuration%3A-Key-Bindings.html#do-screen-transition","title":"<code>do-screen-transition</code>","text":"<p>Since: 0.1.6</p> <p>Freeze the screen for a brief moment then crossfade to the new contents.</p> <pre><code>binds {\n    Mod+Return { do-screen-transition; }\n}\n</code></pre> <p>This action is mainly useful to trigger from scripts changing the system theme or style (between light and dark for example). It makes transitions like this, where windows change their style one by one, look smooth and synchronized.</p> <p>For example, using the GNOME color scheme setting:</p> <pre><code>niri msg action do-screen-transition\ndconf write /org/gnome/desktop/interface/color-scheme \"\\\"prefer-dark\\\"\"\n</code></pre> <p>By default, the screen is frozen for 250 ms to give windows time to redraw, before the crossfade. You can set this delay like this:</p> <pre><code>binds {\n    Mod+Return { do-screen-transition delay-ms=100; }\n}\n</code></pre> <p>Or, in scripts:</p> <pre><code>niri msg action do-screen-transition --delay-ms 100\n</code></pre>"},{"location":"Configuration%3A-Key-Bindings.html#toggle-window-rule-opacity","title":"<code>toggle-window-rule-opacity</code>","text":"<p>Since: 25.02</p> <p>Toggle the opacity window rule of the focused window. This only has an effect if the window's opacity window rule is already set to semitransparent.</p> <pre><code>binds {\n    Mod+O { toggle-window-rule-opacity; }\n}\n</code></pre>"},{"location":"Configuration%3A-Key-Bindings.html#screenshot-screenshot-screen-screenshot-window","title":"<code>screenshot</code>, <code>screenshot-screen</code>, <code>screenshot-window</code>","text":"<p>Actions for taking screenshots.</p> <ul> <li><code>screenshot</code>: opens the built-in interactive screenshot UI.</li> <li><code>screenshot-screen</code>, <code>screenshow-window</code>: takes a screenshot of the focused screen or window respectively.</li> </ul> <p>The screenshot is both stored to the clipboard and saved to disk, according to the <code>screenshot-path</code> option.</p> <p>Since: 25.02 You can disable saving to disk for a specific bind with the <code>write-to-disk=false</code> property:</p> <pre><code>binds {\n    Ctrl+Print { screenshot-screen write-to-disk=false; }\n    Alt+Print { screenshot-window write-to-disk=false; }\n}\n</code></pre> <p>In the interactive screenshot UI, pressing CtrlC will copy the screenshot to the clipboard without writing it to disk.</p> <p>Since: 25.05 You can hide the mouse pointer in screenshots with the <code>show-pointer=false</code> property:</p> <pre><code>binds {\n    // The pointer will be hidden by default\n    // (you can still show it by pressing P).\n    Print { screenshot show-pointer=false; }\n\n    // The pointer will be hidden on the screenshot.\n    Ctrl+Print { screenshot-screen show-pointer=false; }\n}\n</code></pre>"},{"location":"Configuration%3A-Key-Bindings.html#toggle-keyboard-shortcuts-inhibit","title":"<code>toggle-keyboard-shortcuts-inhibit</code>","text":"<p>Since: 25.02</p> <p>Applications such as remote-desktop clients and software KVM switches may request that niri stops processing its keyboard shortcuts so that they may, for example, forward the key presses as-is to a remote machine. <code>toggle-keyboard-shortcuts-inhibit</code> is an escape hatch that toggles the inhibitor. It's a good idea to bind it, so a buggy application can't hold your session hostage.</p> <pre><code>binds {\n    Mod+Escape { toggle-keyboard-shortcuts-inhibit; }\n}\n</code></pre> <p>You can also make certain binds ignore inhibiting with the <code>allow-inhibiting=false</code> property. They will always be handled by niri and never passed to the window.</p> <pre><code>binds {\n    // This bind will always work, even when using a virtual machine.\n    Super+Alt+L allow-inhibiting=false { spawn \"swaylock\"; }\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html","title":"Layer Rules","text":""},{"location":"Configuration%3A-Layer-Rules.html#overview","title":"Overview","text":"<p>Since: 25.01</p> <p>Layer rules let you adjust behavior for individual layer-shell surfaces. They have <code>match</code> and <code>exclude</code> directives that control which layer-shell surfaces the rule should apply to, and a number of properties that you can set.</p> <p>Layer rules are processed and work very similarly to window rules, just with different matchers and properties. Please read the window rules wiki page to learn how matching works.</p> <p>Here are all matchers and properties that a layer rule could have:</p> <pre><code>layer-rule {\n    match namespace=\"waybar\"\n    match at-startup=true\n\n    // Properties that apply continuously.\n    opacity 0.5\n    block-out-from \"screencast\"\n    // block-out-from \"screen-capture\"\n\n    shadow {\n        on\n        // off\n        softness 40\n        spread 5\n        offset x=0 y=5\n        draw-behind-window true\n        color \"#00000064\"\n        // inactive-color \"#00000064\"\n    }\n\n    geometry-corner-radius 12\n    place-within-backdrop true\n    baba-is-float true\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html#layer-surface-matching","title":"Layer Surface Matching","text":"<p>Let's look at the matchers in more detail.</p>"},{"location":"Configuration%3A-Layer-Rules.html#namespace","title":"<code>namespace</code>","text":"<p>This is a regular expression that should match anywhere in the surface namespace. You can read about the supported regular expression syntax here.</p> <pre><code>// Match surfaces with namespace containing \"waybar\",\nlayer-rule {\n    match namespace=\"waybar\"\n}\n</code></pre> <p>You can find the namespaces of all open layer-shell surfaces by running <code>niri msg layers</code>.</p>"},{"location":"Configuration%3A-Layer-Rules.html#at-startup","title":"<code>at-startup</code>","text":"<p>Can be <code>true</code> or <code>false</code>. Matches during the first 60 seconds after starting niri.</p> <pre><code>// Show layer-shell surfaces with 0.5 opacity at niri startup, but not afterwards.\nlayer-rule {\n    match at-startup=true\n\n    opacity 0.5\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html#dynamic-properties","title":"Dynamic Properties","text":"<p>These properties apply continuously to open layer-shell surfaces.</p>"},{"location":"Configuration%3A-Layer-Rules.html#block-out-from","title":"<code>block-out-from</code>","text":"<p>You can block out surfaces from xdg-desktop-portal screencasts or all screen captures. They will be replaced with solid black rectangles.</p> <p>This can be useful for notifications.</p> <p>The same caveats and instructions apply as for the <code>block-out-from</code> window rule, so check the documentation there.</p> <p></p> <pre><code>// Block out mako notifications from screencasts.\nlayer-rule {\n    match namespace=\"^notifications$\"\n\n    block-out-from \"screencast\"\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html#opacity","title":"<code>opacity</code>","text":"<p>Set the opacity of the surface. <code>0.0</code> is fully transparent, <code>1.0</code> is fully opaque. This is applied on top of the surface's own opacity, so semitransparent surfaces will become even more transparent.</p> <p>Opacity is applied to every child of the layer-shell surface individually, so subsurfaces and pop-up menus will show window content behind them.</p> <pre><code>// Make fuzzel semitransparent.\nlayer-rule {\n    match namespace=\"^launcher$\"\n\n    opacity 0.95\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html#shadow","title":"<code>shadow</code>","text":"<p>Since: 25.02</p> <p>Override the shadow options for the surface.</p> <p>These rules have the same options as the normal <code>shadow</code> config in the layout section, so check the documentation there.</p> <p>Unlike window shadows, layer surface shadows always need to be enabled with a layer rule. That is, enabling shadows in the layout config section won't automatically enable them for layer surfaces.</p> <p>Note</p> <p>Layer surfaces have no way to tell niri about their visual geometry. For example, if a layer surface includes some invisible margins (like mako), niri has no way of knowing that, and will draw the shadow behind the entire surface, including the invisible margins.</p> <p>So to use niri shadows, you'll need to configure layer-shell clients to remove their own margins or shadows.</p> <pre><code>// Add a shadow for fuzzel.\nlayer-rule {\n    match namespace=\"^launcher$\"\n\n    shadow {\n        on\n    }\n\n    // Fuzzel defaults to 10 px rounded corners.\n    geometry-corner-radius 10\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html#geometry-corner-radius","title":"<code>geometry-corner-radius</code>","text":"<p>Since: 25.02</p> <p>Set the corner radius of the surface.</p> <p>This setting will only affect the shadow\u2014it will round its corners to match the geometry corner radius.</p> <pre><code>layer-rule {\n    match namespace=\"^launcher$\"\n\n    geometry-corner-radius 12\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html#place-within-backdrop","title":"<code>place-within-backdrop</code>","text":"<p>Since: 25.05</p> <p>Set to <code>true</code> to place the surface into the backdrop visible in the Overview and between workspaces.</p> <p>This will only work for background layer surfaces that ignore exclusive zones (typical for wallpaper tools). Layers within the backdrop will ignore all input.</p> <pre><code>// Put swaybg inside the overview backdrop.\nlayer-rule {\n    match namespace=\"^wallpaper$\"\n\n    place-within-backdrop true\n}\n</code></pre>"},{"location":"Configuration%3A-Layer-Rules.html#baba-is-float","title":"<code>baba-is-float</code>","text":"<p>Since: 25.05</p> <p>Make your layer surfaces FLOAT up and down.</p> <p>This is a natural extension of the April Fools' 2025 feature.</p> <pre><code>// Make fuzzel FLOAT.\nlayer-rule {\n    match namespace=\"^launcher$\"\n\n    baba-is-float true\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html","title":"Layout","text":""},{"location":"Configuration%3A-Layout.html#overview","title":"Overview","text":"<p>In the <code>layout {}</code> section you can change various settings that influence how windows are positioned and sized.</p> <p>Here are the contents of this section at a glance:</p> <pre><code>layout {\n    gaps 16\n    center-focused-column \"never\"\n    always-center-single-column\n    empty-workspace-above-first\n    default-column-display \"tabbed\"\n    background-color \"#003300\"\n\n    preset-column-widths {\n        proportion 0.33333\n        proportion 0.5\n        proportion 0.66667\n    }\n\n    default-column-width { proportion 0.5; }\n\n    preset-window-heights {\n        proportion 0.33333\n        proportion 0.5\n        proportion 0.66667\n    }\n\n    focus-ring {\n        // off\n        on\n        width 4\n        active-color \"#7fc8ff\"\n        inactive-color \"#505050\"\n        urgent-color \"#9b0000\"\n        // active-gradient from=\"#80c8ff\" to=\"#bbddff\" angle=45\n        // inactive-gradient from=\"#505050\" to=\"#808080\" angle=45 relative-to=\"workspace-view\"\n        // urgent-gradient from=\"#800\" to=\"#a33\" angle=45\n    }\n\n    border {\n        off\n        // on\n        width 4\n        active-color \"#ffc87f\"\n        inactive-color \"#505050\"\n        urgent-color \"#9b0000\"\n        // active-gradient from=\"#ffbb66\" to=\"#ffc880\" angle=45 relative-to=\"workspace-view\"\n        // inactive-gradient from=\"#505050\" to=\"#808080\" angle=45 relative-to=\"workspace-view\" in=\"srgb-linear\"\n        // urgent-gradient from=\"#800\" to=\"#a33\" angle=45\n    }\n\n    shadow {\n        off\n        // on\n        softness 30\n        spread 5\n        offset x=0 y=5\n        draw-behind-window true\n        color \"#00000070\"\n        // inactive-color \"#00000054\"\n    }\n\n    tab-indicator {\n        // off\n        on\n        hide-when-single-tab\n        place-within-column\n        gap 5\n        width 4\n        length total-proportion=1.0\n        position \"right\"\n        gaps-between-tabs 2\n        corner-radius 8\n        active-color \"red\"\n        inactive-color \"gray\"\n        urgent-color \"blue\"\n        // active-gradient from=\"#80c8ff\" to=\"#bbddff\" angle=45\n        // inactive-gradient from=\"#505050\" to=\"#808080\" angle=45 relative-to=\"workspace-view\"\n        // urgent-gradient from=\"#800\" to=\"#a33\" angle=45\n    }\n\n    insert-hint {\n        // off\n        on\n        color \"#ffc87f80\"\n        // gradient from=\"#ffbb6680\" to=\"#ffc88080\" angle=45 relative-to=\"workspace-view\"\n    }\n\n    struts {\n        // left 64\n        // right 64\n        // top 64\n        // bottom 64\n    }\n}\n</code></pre> <p>Since: next release You can override these settings for specific outputs and named workspaces.</p>"},{"location":"Configuration%3A-Layout.html#gaps","title":"<code>gaps</code>","text":"<p>Set gaps around (inside and outside) windows in logical pixels.</p> <p>Since: 0.1.7 You can use fractional values. The value will be rounded to physical pixels according to the scale factor of every output. For example, <code>gaps 0.5</code> on an output with <code>scale 2</code> will result in one physical-pixel wide gaps.</p> <p>Since: 0.1.8 You can emulate \"inner\" vs. \"outer\" gaps with negative <code>struts</code> values (see the struts section below).</p> <pre><code>layout {\n    gaps 16\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#center-focused-column","title":"<code>center-focused-column</code>","text":"<p>When to center a column when changing focus. This can be set to:</p> <ul> <li><code>\"never\"</code>: no special centering, focusing an off-screen column will scroll it to the left or right edge of the screen. This is the default.</li> <li><code>\"always\"</code>, the focused column will always be centered.</li> <li><code>\"on-overflow\"</code>, focusing a column will center it if it doesn't fit on screen together with the previously focused column.</li> </ul> <pre><code>layout {\n    center-focused-column \"always\"\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#always-center-single-column","title":"<code>always-center-single-column</code>","text":"<p>Since: 0.1.9</p> <p>If set, niri will always center a single column on a workspace, regardless of the <code>center-focused-column</code> option.</p> <pre><code>layout {\n    always-center-single-column\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#empty-workspace-above-first","title":"<code>empty-workspace-above-first</code>","text":"<p>Since: 25.01</p> <p>If set, niri will always add an empty workspace at the very start, in addition to the empty workspace at the very end.</p> <pre><code>layout {\n    empty-workspace-above-first\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#default-column-display","title":"<code>default-column-display</code>","text":"<p>Since: 25.02</p> <p>Sets the default display mode for new columns. Can be <code>normal</code> or <code>tabbed</code>.</p> <pre><code>// Make all new columns tabbed by default.\nlayout {\n    default-column-display \"tabbed\"\n\n    // You may also want to hide the tab indicator\n    // when there's only a single window in a column.\n    tab-indicator {\n        hide-when-single-tab\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#preset-column-widths","title":"<code>preset-column-widths</code>","text":"<p>Set the widths that the <code>switch-preset-column-width</code> action (Mod+R) toggles between.</p> <p><code>proportion</code> sets the width as a fraction of the output width, taking gaps into account. For example, you can perfectly fit four windows sized <code>proportion 0.25</code> on an output, regardless of the gaps setting. The default preset widths are <sup>1</sup>\u2044<sub>3</sub>, <sup>1</sup>\u2044<sub>2</sub> and <sup>2</sup>\u2044<sub>3</sub> of the output.</p> <p><code>fixed</code> sets the window width in logical pixels exactly.</p> <pre><code>layout {\n    // Cycle between 1/3, 1/2, 2/3 of the output, and a fixed 1280 logical pixels.\n    preset-column-widths {\n        proportion 0.33333\n        proportion 0.5\n        proportion 0.66667\n        fixed 1280\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#default-column-width","title":"<code>default-column-width</code>","text":"<p>Set the default width of the new windows.</p> <p>The syntax is the same as in <code>preset-column-widths</code> above.</p> <pre><code>layout {\n    // Open new windows sized 1/3 of the output.\n    default-column-width { proportion 0.33333; }\n}\n</code></pre> <p>You can also leave the brackets empty, then the windows themselves will decide their initial width.</p> <pre><code>layout {\n    // New windows decide their initial width themselves.\n    default-column-width {}\n}\n</code></pre> <p>Note</p> <p><code>default-column-width {}</code> causes niri to send a (0, H) size in the initial configure request.</p> <p>This is a bit unclearly defined in the Wayland protocol, so some clients may misinterpret it. Either way, <code>default-column-width {}</code> is most useful for specific windows, in form of a window rule with the same syntax.</p>"},{"location":"Configuration%3A-Layout.html#preset-window-heights","title":"<code>preset-window-heights</code>","text":"<p>Since: 0.1.9</p> <p>Set the heights that the <code>switch-preset-window-height</code> action (Mod+Shift+R) toggles between.</p> <p><code>proportion</code> sets the height as a fraction of the output height, taking gaps into account. The default preset heights are <sup>1</sup>\u2044<sub>3</sub>, <sup>1</sup>\u2044<sub>2</sub> and <sup>2</sup>\u2044<sub>3</sub> of the output.</p> <p><code>fixed</code> sets the height in logical pixels exactly.</p> <pre><code>layout {\n    // Cycle between 1/3, 1/2, 2/3 of the output, and a fixed 720 logical pixels.\n    preset-window-heights {\n        proportion 0.33333\n        proportion 0.5\n        proportion 0.66667\n        fixed 720\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#focus-ring-and-border","title":"<code>focus-ring</code> and <code>border</code>","text":"<p>Focus ring and border are drawn around windows and indicate the active window. They are very similar and have the same options.</p> <p>The difference is that the focus ring is drawn only around the active window, whereas borders are drawn around all windows and affect their sizes (windows shrink to make space for the borders).</p> Focus Ring Border <p>Tip</p> <p>By default, focus ring and border are rendered as a solid background rectangle behind windows. That is, they will show up through semitransparent windows. This is because windows using client-side decorations can have an arbitrary shape.</p> <p>If you don't like that, you should uncomment the <code>prefer-no-csd</code> setting at the top level of the config. Niri will draw focus rings and borders around windows that agree to omit their client-side decorations.</p> <p>Alternatively, you can override this behavior with the <code>draw-border-with-background</code> window rule.</p> <p>Focus ring and border have the following options.</p> <pre><code>layout {\n    // focus-ring has the same options.\n    border {\n        // Uncomment this line to disable the border.\n        // off\n\n        // Width of the border in logical pixels.\n        width 4\n\n        active-color \"#ffc87f\"\n        inactive-color \"#505050\"\n\n        // Color of the border around windows that request your attention.\n        urgent-color \"#9b0000\"\n\n        // active-gradient from=\"#ffbb66\" to=\"#ffc880\" angle=45 relative-to=\"workspace-view\"\n        // inactive-gradient from=\"#505050\" to=\"#808080\" angle=45 relative-to=\"workspace-view\" in=\"srgb-linear\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#width","title":"Width","text":"<p>Set the thickness of the border in logical pixels.</p> <p>Since: 0.1.7 You can use fractional values. The value will be rounded to physical pixels according to the scale factor of every output. For example, <code>width 0.5</code> on an output with <code>scale 2</code> will result in one physical-pixel thick borders.</p> <pre><code>layout {\n    border {\n        width 2\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#colors","title":"Colors","text":"<p>Colors can be set in a variety of ways:</p> <ul> <li>CSS named colors: <code>\"red\"</code></li> <li>RGB hex: <code>\"#rgb\"</code>, <code>\"#rgba\"</code>, <code>\"#rrggbb\"</code>, <code>\"#rrggbbaa\"</code></li> <li>CSS-like notation: <code>\"rgb(255, 127, 0)\"</code>, <code>\"rgba()\"</code>, <code>\"hsl()\"</code> and a few others.</li> </ul> <p><code>active-color</code> is the color of the focus ring / border around the active window, and <code>inactive-color</code> is the color of the focus ring / border around all other windows.</p> <p>The focus ring is only drawn around the active window on each monitor, so with a single monitor you will never see its <code>inactive-color</code>. You will see it if you have multiple monitors, though.</p> <p>There's also a deprecated syntax for setting colors with four numbers representing R, G, B and A: <code>active-color 127 200 255 255</code>.</p>"},{"location":"Configuration%3A-Layout.html#gradients","title":"Gradients","text":"<p>Similarly to colors, you can set <code>active-gradient</code> and <code>inactive-gradient</code>, which will take precedence.</p> <p>Gradients are rendered the same as CSS <code>linear-gradient(angle, from, to)</code>. The angle works the same as in <code>linear-gradient</code>, and is optional, defaulting to <code>180</code> (top-to-bottom gradient). You can use any CSS linear-gradient tool on the web to set these up, like css-gradient.com.</p> <pre><code>layout {\n    focus-ring {\n        active-gradient from=\"#80c8ff\" to=\"#bbddff\" angle=45\n    }\n}\n</code></pre> <p>Gradients can be colored relative to windows individually (the default), or to the whole view of the workspace. To do that, set <code>relative-to=\"workspace-view\"</code>. Here's a visual example:</p> Default <code>relative-to=\"workspace-view\"</code> <pre><code>layout {\n    border {\n        active-gradient from=\"#ffbb66\" to=\"#ffc880\" angle=45 relative-to=\"workspace-view\"\n        inactive-gradient from=\"#505050\" to=\"#808080\" angle=45 relative-to=\"workspace-view\"\n    }\n}\n</code></pre> <p>Since: 0.1.8 You can set the gradient interpolation color space using syntax like <code>in=\"srgb-linear\"</code> or <code>in=\"oklch longer hue\"</code>. Supported color spaces are:</p> <ul> <li><code>srgb</code> (the default),</li> <li><code>srgb-linear</code>,</li> <li><code>oklab</code>,</li> <li><code>oklch</code> with <code>shorter hue</code> or <code>longer hue</code> or <code>increasing hue</code> or <code>decreasing hue</code>.</li> </ul> <p>They are rendered the same as CSS. For example, <code>active-gradient from=\"#f00f\" to=\"#0f05\" angle=45 in=\"oklch longer hue\"</code> will look the same as CSS <code>linear-gradient(45deg in oklch longer hue, #f00f, #0f05)</code>.</p> <p></p> <pre><code>layout {\n    border {\n        active-gradient from=\"#f00f\" to=\"#0f05\" angle=45 in=\"oklch longer hue\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#shadow","title":"<code>shadow</code>","text":"<p>Since: 25.02</p> <p>Shadow rendered behind a window.</p> <p>Set <code>on</code> to enable the shadow.</p> <p><code>softness</code> controls the shadow softness/size in logical pixels, same as CSS box-shadow blur radius. Setting <code>softness 0</code> will give you hard shadows.</p> <p><code>spread</code> is the distance to expand the window rectangle in logical pixels, same as CSS box-shadow spread. Since: 25.05 Spread can be negative.</p> <p><code>offset</code> moves the shadow relative to the window in logical pixels, same as CSS box-shadow offset. For example, <code>offset x=2 y=2</code> will move the shadow 2 logical pixels downwards and to the right.</p> <p>Set <code>draw-behind-window</code> to <code>true</code> to make shadows draw behind the window rather than just around it. Note that niri has no way of knowing about the CSD window corner radius. It has to assume that windows have square corners, leading to shadow artifacts inside the CSD rounded corners. This setting fixes those artifacts.</p> <p>However, instead you may want to set <code>prefer-no-csd</code> and/or <code>geometry-corner-radius</code>. Then, niri will know the corner radius and draw the shadow correctly, without having to draw it behind the window. These will also remove client-side shadows if the window draws any.</p> <p><code>color</code> is the shadow color and opacity.</p> <p><code>inactive-color</code> lets you override the shadow color for inactive windows; by default, a more transparent <code>color</code> is used.</p> <p>Shadow drawing will follow the window corner radius set with the <code>geometry-corner-radius</code> window rule.</p> <p>Note</p> <p>Currently, shadow drawing only supports matching radius for all corners. If you set <code>geometry-corner-radius</code> to four values instead of one, the first (top-left) corner radius will be used for shadows.</p> <pre><code>// Enable shadows.\nlayout {\n    shadow {\n        on\n    }\n}\n\n// Also ask windows to omit client-side decorations, so that\n// they don't draw their own window shadows.\nprefer-no-csd\n</code></pre>"},{"location":"Configuration%3A-Layout.html#tab-indicator","title":"<code>tab-indicator</code>","text":"<p>Since: 25.02</p> <p>Controls the appearance of the tab indicator that appears next to columns in tabbed display mode.</p> <p>Set <code>off</code> to hide the tab indicator.</p> <p>Set <code>hide-when-single-tab</code> to hide the indicator for tabbed columns that only have a single window.</p> <p>Set <code>place-within-column</code> to put the tab indicator \"within\" the column, rather than outside. This will include it in column sizing and avoid overlaying adjacent columns.</p> <p><code>gap</code> sets the gap between the tab indicator and the window in logical pixels. The gap can be negative, this will put the tab indicator on top of the window.</p> <p><code>width</code> sets the thickness of the indicator in logical pixels.</p> <p><code>length</code> controls the length of the indicator. Set the <code>total-proportion</code> property to make tabs take up this much length relative to the window size. By default, the tab indicator has length equal to half of the window size, or <code>length total-proportion=0.5</code>.</p> <p><code>position</code> sets the position of the tab indicator relative to the window. It can be <code>left</code>, <code>right</code>, <code>top</code>, or <code>bottom</code>.</p> <p><code>gaps-between-tabs</code> controls the gap between individual tabs in logical pixels.</p> <p><code>corner-radius</code> sets the rounded corner radius for tabs in the indicator in logical pixels. When <code>gaps-between-tabs</code> is zero, only the first and the last tabs have rounded corners, otherwise all tabs do.</p> <p><code>active-color</code>, <code>inactive-color</code>, <code>urgent-color</code>, <code>active-gradient</code>, <code>inactive-gradient</code>, <code>urgent-gradient</code> let you override the colors for the tabs. They have the same semantics as the border and focus ring colors and gradients.</p> <p>Tab colors are picked in this order:</p> <ol> <li>Colors from the <code>tab-indicator</code> window rule, if set.</li> <li>Colors from the <code>tab-indicator</code> layout options, if set (you're here).</li> <li>If neither are set, niri picks the color matching the window border or focus ring, whichever one is active.</li> </ol> <pre><code>// Make the tab indicator wider and match the window height,\n// also put it at the top and within the column.\nlayout {\n    tab-indicator {\n        width 8\n        gap 8\n        length total-proportion=1.0\n        position \"top\"\n        place-within-column\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#insert-hint","title":"<code>insert-hint</code>","text":"<p>Since: 0.1.10 </p> <p>Settings for the window insert position hint during an interactive window move.</p> <p><code>off</code> disables the insert hint altogether.</p> <p><code>color</code> and <code>gradient</code> let you change the color of the hint and have the same syntax as colors and gradients in border and focus ring.</p> <pre><code>layout {\n    insert-hint {\n        // off\n        color \"#ffc87f80\"\n        gradient from=\"#ffbb6680\" to=\"#ffc88080\" angle=45 relative-to=\"workspace-view\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#struts","title":"<code>struts</code>","text":"<p>Struts shrink the area occupied by windows, similarly to layer-shell panels. You can think of them as a kind of outer gaps. They are set in logical pixels.</p> <p>Left and right struts will cause the next window to the side to always peek out slightly. Top and bottom struts will simply add outer gaps in addition to the area occupied by layer-shell panels and regular gaps.</p> <p>Since: 0.1.7 You can use fractional values. The value will be rounded to physical pixels according to the scale factor of every output. For example, <code>top 0.5</code> on an output with <code>scale 2</code> will result in one physical-pixel wide top strut.</p> <pre><code>layout {\n    struts {\n        left 64\n        right 64\n        top 64\n        bottom 64\n    }\n}\n</code></pre> <p></p> <p>Since: 0.1.8 You can use negative values. They will push the windows outwards, even outside the edges of the screen.</p> <p>You can use negative struts with matching gaps value to emulate \"inner\" vs. \"outer\" gaps. For example, use this for inner gaps without outer gaps:</p> <pre><code>layout {\n    gaps 16\n\n    struts {\n        left -16\n        right -16\n        top -16\n        bottom -16\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Layout.html#background-color","title":"<code>background-color</code>","text":"<p>Since: 25.05</p> <p>Set the default background color that niri draws for workspaces. This is visible when you're not using any background tools like swaybg.</p> <pre><code>layout {\n    background-color \"#003300\"\n}\n</code></pre> <p>You can also set the color per-output in the output config.</p>"},{"location":"Configuration%3A-Miscellaneous.html","title":"Miscellaneous","text":"<p>This page documents all top-level options that don't otherwise have dedicated pages.</p> <p>Here are all of these options at a glance:</p> <pre><code>spawn-at-startup \"waybar\"\nspawn-at-startup \"alacritty\"\nspawn-sh-at-startup \"qs -c ~/source/qs/MyAwesomeShell\"\n\nprefer-no-csd\n\nscreenshot-path \"~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png\"\n\nenvironment {\n    QT_QPA_PLATFORM \"wayland\"\n    DISPLAY null\n}\n\ncursor {\n    xcursor-theme \"breeze_cursors\"\n    xcursor-size 48\n\n    hide-when-typing\n    hide-after-inactive-ms 1000\n}\n\noverview {\n    zoom 0.5\n    backdrop-color \"#262626\"\n\n    workspace-shadow {\n        // off\n        softness 40\n        spread 10\n        offset x=0 y=10\n        color \"#00000050\"\n    }\n}\n\nxwayland-satellite {\n    // off\n    path \"xwayland-satellite\"\n}\n\nclipboard {\n    disable-primary\n}\n\nhotkey-overlay {\n    skip-at-startup\n    hide-not-bound\n}\n\nconfig-notification {\n    disable-failed\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#spawn-at-startup","title":"<code>spawn-at-startup</code>","text":"<p>Add lines like this to spawn processes at niri startup.</p> <p><code>spawn-at-startup</code> accepts a path to the program binary as the first argument, followed by arguments to the program.</p> <p>This option works the same way as the <code>spawn</code> key binding action, so please read about all its subtleties there.</p> <pre><code>spawn-at-startup \"waybar\"\nspawn-at-startup \"alacritty\"\n</code></pre> <p>Note that running niri as a systemd session supports xdg-desktop-autostart out of the box, which may be more convenient to use. Thanks to this, apps that you configured to autostart in GNOME will also \"just work\" in niri, without any manual <code>spawn-at-startup</code> configuration.</p>"},{"location":"Configuration%3A-Miscellaneous.html#spawn-sh-at-startup","title":"<code>spawn-sh-at-startup</code>","text":"<p>Since: 25.08</p> <p>Add lines like this to run shell commands at niri startup.</p> <p>The argument is a single string that is passed verbatim to <code>sh</code>. You can use shell variables, pipelines, <code>~</code> expansion and everything else as expected.</p> <p>See detailed description in the docs for the <code>spawn-sh</code> key binding action.</p> <pre><code>// Pass all arguments in the same string.\nspawn-sh-at-startup \"qs -c ~/source/qs/MyAwesomeShell\"\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#prefer-no-csd","title":"<code>prefer-no-csd</code>","text":"<p>This flag will make niri ask the applications to omit their client-side decorations.</p> <p>If an application will specifically ask for CSD, the request will be honored. Additionally, clients will be informed that they are tiled, removing some rounded corners.</p> <p>With <code>prefer-no-csd</code> set, applications that negotiate server-side decorations through the xdg-decoration protocol will have focus ring and border drawn around them without a solid colored background.</p> <p>Note</p> <p>Unlike most other options, changing <code>prefer-no-csd</code> will not entirely affect already running applications. It will make some windows rectangular, but won't remove the title bars. This mainly has to do with niri working around a bug in SDL2 that prevents SDL2 applications from starting.</p> <p>Restart applications after changing <code>prefer-no-csd</code> in the config to fully apply it.</p> <pre><code>prefer-no-csd\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#screenshot-path","title":"<code>screenshot-path</code>","text":"<p>Set the path where screenshots are saved. A <code>~</code> at the front will be expanded to the home directory.</p> <p>The path is formatted with <code>strftime(3)</code> to give you the screenshot date and time.</p> <p>Niri will create the last folder of the path if it doesn't exist.</p> <pre><code>screenshot-path \"~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png\"\n</code></pre> <p>You can also set this option to <code>null</code> to disable saving screenshots to disk.</p> <pre><code>screenshot-path null\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#environment","title":"<code>environment</code>","text":"<p>Override environment variables for processes spawned by niri.</p> <pre><code>environment {\n    // Set a variable like this:\n    // QT_QPA_PLATFORM \"wayland\"\n\n    // Remove a variable by using null as the value:\n    // DISPLAY null\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#cursor","title":"<code>cursor</code>","text":"<p>Change the theme and size of the cursor as well as set the <code>XCURSOR_THEME</code> and <code>XCURSOR_SIZE</code> environment variables.</p> <pre><code>cursor {\n    xcursor-theme \"breeze_cursors\"\n    xcursor-size 48\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#hide-when-typing","title":"<code>hide-when-typing</code>","text":"<p>Since: 0.1.10</p> <p>If set, hides the cursor when pressing a key on the keyboard.</p> <p>Note</p> <p>This setting might interfere with games running in Wine in native Wayland mode that use mouselook, such as first-person games. If your character's point of view jumps down when you press a key and move the mouse simultaneously, try disabling this setting.</p> <pre><code>cursor {\n    hide-when-typing\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#hide-after-inactive-ms","title":"<code>hide-after-inactive-ms</code>","text":"<p>Since: 0.1.10</p> <p>If set, the cursor will automatically hide once this number of milliseconds passes since the last cursor movement.</p> <pre><code>cursor {\n    // Hide the cursor after one second of inactivity.\n    hide-after-inactive-ms 1000\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#overview","title":"<code>overview</code>","text":"<p>Since: 25.05</p> <p>Settings for the Overview.</p>"},{"location":"Configuration%3A-Miscellaneous.html#zoom","title":"<code>zoom</code>","text":"<p>Control how much the workspaces zoom out in the overview. <code>zoom</code> ranges from 0 to 0.75 where lower values make everything smaller.</p> <pre><code>// Make workspaces four times smaller than normal in the overview.\noverview {\n    zoom 0.25\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#backdrop-color","title":"<code>backdrop-color</code>","text":"<p>Set the backdrop color behind workspaces in the overview. The backdrop is also visible between workspaces when switching.</p> <p>The alpha channel for this color will be ignored.</p> <pre><code>// Make the backdrop light.\noverview {\n    backdrop-color \"#777777\"\n}\n</code></pre> <p>You can also set the color per-output in the output config.</p>"},{"location":"Configuration%3A-Miscellaneous.html#workspace-shadow","title":"<code>workspace-shadow</code>","text":"<p>Control the shadow behind workspaces visible in the overview.</p> <p>Settings here mirror the normal <code>shadow</code> config in the layout section, so check the documentation there.</p> <p>Workspace shadows are configured for a workspace size normalized to 1080 pixels tall, then zoomed out together with the workspace. Practically, this means that you'll want bigger spread, offset, and softness compared to window shadows.</p> <pre><code>// Disable workspace shadows in the overview.\noverview {\n    workspace-shadow {\n        off\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#xwayland-satellite","title":"<code>xwayland-satellite</code>","text":"<p>Since: 25.08</p> <p>Settings for integration with xwayland-satellite.</p> <p>When a recent enough xwayland-satellite is detected, niri will create the X11 sockets and set <code>DISPLAY</code>, then automatically spawn <code>xwayland-satellite</code> when an X11 client tries to connect. If Xwayland dies, niri will keep watching the X11 socket and restart <code>xwayland-satellite</code> as needed. This is very similar to how built-in Xwayland works in other compositors.</p> <p><code>off</code> disables the integration: niri won't create an X11 socket and won't set the <code>DISPLAY</code> environment variable.</p> <p><code>path</code> sets the path to the <code>xwayland-satellite</code> binary. By default, it's just <code>xwayland-satellite</code>, so it's looked up like any other non-absolute program name.</p> <pre><code>// Use a custom build of xwayland-satellite.\nxwayland-satellite {\n    path \"~/source/rs/xwayland-satellite/target/release/xwayland-satellite\"\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#clipboard","title":"<code>clipboard</code>","text":"<p>Since: 25.02</p> <p>Clipboard settings.</p> <p>Set the <code>disable-primary</code> flag to disable the primary clipboard (middle-click paste). Toggling this flag will only apply to applications started afterward.</p> <pre><code>clipboard {\n    disable-primary\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#hotkey-overlay","title":"<code>hotkey-overlay</code>","text":"<p>Settings for the \"Important Hotkeys\" overlay.</p>"},{"location":"Configuration%3A-Miscellaneous.html#skip-at-startup","title":"<code>skip-at-startup</code>","text":"<p>Set the <code>skip-at-startup</code> flag if you don't want to see the hotkey help at niri startup.</p> <pre><code>hotkey-overlay {\n    skip-at-startup\n}\n</code></pre>"},{"location":"Configuration%3A-Miscellaneous.html#hide-not-bound","title":"<code>hide-not-bound</code>","text":"<p>Since: 25.08</p> <p>By default, niri will show the most important actions even if they aren't bound to any key, to prevent confusion. Set the <code>hide-not-bound</code> flag if you want to hide all actions not bound to any key.</p> <pre><code>hotkey-overlay {\n    hide-not-bound\n}\n</code></pre> <p>You can customize which binds the hotkey overlay shows using the <code>hotkey-overlay-title</code> property.</p>"},{"location":"Configuration%3A-Miscellaneous.html#config-notification","title":"<code>config-notification</code>","text":"<p>Since: 25.08</p> <p>Settings for the config created/failed notification.</p> <p>Set the <code>disable-failed</code> flag to disable the \"Failed to parse the config file\" notification. For example, if you have a custom one.</p> <pre><code>config-notification {\n    disable-failed\n}\n</code></pre>"},{"location":"Configuration%3A-Named-Workspaces.html","title":"Named Workspaces","text":""},{"location":"Configuration%3A-Named-Workspaces.html#overview","title":"Overview","text":"<p>Since: 0.1.6</p> <p>You can declare named workspaces at the top level of the config:</p> <pre><code>workspace \"browser\"\n\nworkspace \"chat\" {\n    open-on-output \"Some Company CoolMonitor 1234\"\n}\n</code></pre> <p>Contrary to normal dynamic workspaces, named workspaces always exist, even when they have no windows. Otherwise, they behave like any other workspace: you can move them around, move to a different monitor, and so on.</p> <p>Actions like <code>focus-workspace</code> or <code>move-column-to-workspace</code> can refer to workspaces by name. Also, you can use an <code>open-on-workspace</code> window rule to make a window open on a specific named workspace:</p> <pre><code>// Declare a workspace named \"chat\" that opens on the \"DP-2\" output.\nworkspace \"chat\" {\n    open-on-output \"DP-2\"\n}\n\n// Open Fractal on the \"chat\" workspace, if it runs at niri startup.\nwindow-rule {\n    match at-startup=true app-id=r#\"^org\\.gnome\\.Fractal$\"#\n    open-on-workspace \"chat\"\n}\n</code></pre> <p>Named workspaces initially appear in the order they are declared in the config file. When editing the config while niri is running, newly declared named workspaces will appear at the very top of a monitor.</p> <p>If you delete some named workspace from the config, the workspace will become normal (unnamed), and if there are no windows on it, it will be removed (as any other normal workspace). There's no way to give a name to an already existing workspace, but you can simply move windows that you want to a new, empty named workspace.</p> <p>Since: 0.1.9 <code>open-on-output</code> can now use monitor manufacturer, model, and serial. Before, it could only use the connector name.</p> <p>Since: 25.01 You can use <code>set-workspace-name</code> and <code>unset-workspace-name</code> actions to change workspace names dynamically.</p> <p>Since: 25.02 Named workspaces no longer update/forget their original output when opening a new window on them (unnamed workspaces will keep doing that). This means that named workspaces \"stick\" to their original output in more cases, reflecting their more permanent nature. Explicitly moving a named workspace to a different monitor will still update its original output.</p>"},{"location":"Configuration%3A-Named-Workspaces.html#layout-config-overrides","title":"Layout config overrides","text":"<p>Since: next release</p> <p>You can customize layout settings for named workspaces with a <code>layout {}</code> block:</p> <pre><code>workspace \"aesthetic\" {\n    // Layout config overrides just for this named workspace.\n    layout {\n        gaps 32\n\n        struts {\n            left 64\n            right 64\n            bottom 64\n            top 64\n        }\n\n        border {\n            on\n            width 4\n        }\n\n        // ...any other setting.\n    }\n}\n</code></pre> <p>It accepts all the same options as the top-level <code>layout {}</code> block, except:</p> <ul> <li><code>empty-workspace-above-first</code>: this is an output-level setting, doesn't make sense on a workspace.</li> <li><code>insert-hint</code>: currently we always draw these at the output level, so it's not customizable per-workspace.</li> </ul> <p>In order to unset a flag, write it with <code>false</code>, e.g.:</p> <pre><code>layout {\n    // Enabled globally.\n    always-center-single-column\n}\n\nworkspace \"uncentered\" {\n    layout {\n        // Unset on this workspace.\n        always-center-single-column false\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html","title":"Outputs","text":""},{"location":"Configuration%3A-Outputs.html#overview","title":"Overview","text":"<p>By default, niri will attempt to turn on all connected monitors using their preferred modes. You can disable or adjust this with <code>output</code> sections.</p> <p>Here's what it looks like with all properties written out:</p> <pre><code>output \"eDP-1\" {\n    // off\n    mode \"1920x1080@120.030\"\n    scale 2.0\n    transform \"90\"\n    position x=1280 y=0\n    variable-refresh-rate // on-demand=true\n    focus-at-startup\n    backdrop-color \"#001100\"\n\n    hot-corners {\n        // off\n        top-left\n        // top-right\n        // bottom-left\n        // bottom-right\n    }\n\n    layout {\n        // ...layout settings for eDP-1...\n    }\n}\n\noutput \"HDMI-A-1\" {\n    // ...settings for HDMI-A-1...\n}\n\noutput \"Some Company CoolMonitor 1234\" {\n    // ...settings for CoolMonitor...\n}\n</code></pre> <p>Outputs are matched by connector name (i.e. <code>eDP-1</code>, <code>HDMI-A-1</code>), or by monitor manufacturer, model, and serial, separated by a single space each. You can find all of these by running <code>niri msg outputs</code>.</p> <p>Usually, the built-in monitor in laptops will be called <code>eDP-1</code>.</p> <p>Since: 0.1.6 The output name is case-insensitive.</p> <p>Since: 0.1.9 Outputs can be matched by manufacturer, model, and serial. Before, they could be matched only by the connector name.</p>"},{"location":"Configuration%3A-Outputs.html#off","title":"<code>off</code>","text":"<p>This flag turns off that output entirely.</p> <pre><code>// Turn off that monitor.\noutput \"HDMI-A-1\" {\n    off\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#mode","title":"<code>mode</code>","text":"<p>Set the monitor resolution and refresh rate.</p> <p>The format is <code>&lt;width&gt;x&lt;height&gt;</code> or <code>&lt;width&gt;x&lt;height&gt;@&lt;refresh rate&gt;</code>. If the refresh rate is omitted, niri will pick the highest refresh rate for the resolution.</p> <p>If the mode is omitted altogether or doesn't work, niri will try to pick one automatically.</p> <p>Run <code>niri msg outputs</code> while inside a niri instance to list all outputs and their modes. The refresh rate that you set here must match exactly, down to the three decimal digits, to what you see in <code>niri msg outputs</code>.</p> <pre><code>// Set a high refresh rate for this monitor.\n// High refresh rate monitors tend to use 60 Hz as their preferred mode,\n// requiring a manual mode setting.\noutput \"HDMI-A-1\" {\n    mode \"2560x1440@143.912\"\n}\n\n// Use a lower resolution on the built-in laptop monitor\n// (for example, for testing purposes).\noutput \"eDP-1\" {\n    mode \"1280x720\"\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#scale","title":"<code>scale</code>","text":"<p>Set the scale of the monitor.</p> <p>Since: 0.1.6 If scale is unset, niri will guess an appropriate scale based on the physical dimensions and the resolution of the monitor.</p> <p>Since: 0.1.7 You can use fractional scale values, for example <code>scale 1.5</code> for 150% scale.</p> <p>Since: 0.1.7 Dot is no longer needed for integer scale, for example you can write <code>scale 2</code> instead of <code>scale 2.0</code>.</p> <p>Since: 0.1.7 Scale below 0 and above 10 will now fail during config parsing. Scale was previously clamped to these values anyway.</p> <pre><code>output \"eDP-1\" {\n    scale 2.0\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#transform","title":"<code>transform</code>","text":"<p>Rotate the output counter-clockwise.</p> <p>Valid values are: <code>\"normal\"</code>, <code>\"90\"</code>, <code>\"180\"</code>, <code>\"270\"</code>, <code>\"flipped\"</code>, <code>\"flipped-90\"</code>, <code>\"flipped-180\"</code> and <code>\"flipped-270\"</code>. Values with <code>flipped</code> additionally flip the output.</p> <pre><code>output \"HDMI-A-1\" {\n    transform \"90\"\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#position","title":"<code>position</code>","text":"<p>Set the position of the output in the global coordinate space.</p> <p>This affects directional monitor actions like <code>focus-monitor-left</code>, and cursor movement. The cursor can only move between directly adjacent outputs.</p> <p>Note</p> <p>Output scale and rotation has to be taken into account for positioning: outputs are sized in logical, or scaled, pixels. For example, a 3840\u00d72160 output with scale 2.0 will have a logical size of 1920\u00d71080, so to put another output directly adjacent to it on the right, set its x to 1920. If the position is unset or results in an overlap, the output is instead placed automatically.</p> <pre><code>output \"HDMI-A-1\" {\n    position x=1280 y=0\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#automatic-positioning","title":"Automatic Positioning","text":"<p>Niri repositions outputs from scratch every time the output configuration changes (which includes monitors disconnecting and connecting). The following algorithm is used for positioning outputs.</p> <ol> <li>Collect all connected monitors and their logical sizes.</li> <li>Sort them by their name. This makes it so the automatic positioning does not depend on the order the monitors are connected. This is important because the connection order is non-deterministic at compositor startup.</li> <li>Try to place every output with explicitly configured <code>position</code>, in order. If the output overlaps previously placed outputs, place it to the right of all previously placed outputs. In this case, niri will also print a warning.</li> <li>Place every output without explicitly configured <code>position</code> by putting it to the right of all previously placed outputs.</li> </ol>"},{"location":"Configuration%3A-Outputs.html#variable-refresh-rate","title":"<code>variable-refresh-rate</code>","text":"<p>Since: 0.1.5</p> <p>This flag enables variable refresh rate (VRR, also known as adaptive sync, FreeSync, or G-Sync), if the output supports it.</p> <p>You can check whether an output supports VRR in <code>niri msg outputs</code>.</p> <p>Note</p> <p>Some drivers have various issues with VRR.</p> <p>If the cursor moves at a low framerate with VRR, try setting the <code>disable-cursor-plane</code> debug flag and reconnecting the monitor.</p> <p>If a monitor is not detected as VRR-capable when it should, sometimes unplugging a different monitor fixes it.</p> <p>Some monitors will continuously modeset (flash black) with VRR enabled; I'm not sure if there's a way to fix it.</p> <pre><code>output \"HDMI-A-1\" {\n    variable-refresh-rate\n}\n</code></pre> <p>Since: 0.1.9 You can also set the <code>on-demand=true</code> property, which will only enable VRR when this output shows a window matching the <code>variable-refresh-rate</code> window rule. This is helpful to avoid various issues with VRR, since it can be disabled most of the time, and only enabled for specific windows, like games or video players.</p> <pre><code>output \"HDMI-A-1\" {\n    variable-refresh-rate on-demand=true\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#focus-at-startup","title":"<code>focus-at-startup</code>","text":"<p>Since: 25.05</p> <p>Focus this output by default when niri starts.</p> <p>If multiple outputs with <code>focus-at-startup</code> are connected, they are prioritized in the order that they appear in the config.</p> <p>When none of the connected outputs are explicitly <code>focus-at-startup</code>, niri will focus the first one sorted by name (same output sorting as used elsewhere in niri).</p> <pre><code>// Focus HDMI-A-1 by default.\noutput \"HDMI-A-1\" {\n    focus-at-startup\n}\n\n// ...if HDMI-A-1 wasn't connected, focus DP-2 instead.\noutput \"DP-2\" {\n    focus-at-startup\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#background-color","title":"<code>background-color</code>","text":"<p>Since: 0.1.8</p> <p>Set the background color that niri draws for workspaces on this output. This is visible when you're not using any background tools like swaybg.</p> <p>Until: 25.05 The alpha channel for this color will be ignored.</p> <p>Since: next release This setting is deprecated, set <code>background-color</code> in the output <code>layout {}</code> block instead.</p> <pre><code>output \"HDMI-A-1\" {\n    background-color \"#003300\"\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#backdrop-color","title":"<code>backdrop-color</code>","text":"<p>Since: 25.05</p> <p>Set the backdrop color that niri draws for this output. This is visible between workspaces or in the overview.</p> <p>The alpha channel for this color will be ignored.</p> <pre><code>output \"HDMI-A-1\" {\n    backdrop-color \"#001100\"\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#hot-corners","title":"<code>hot-corners</code>","text":"<p>Since: next release</p> <p>Customize the hot corners for this output. By default, hot corners in the gestures settings are used for all outputs.</p> <p>Hot corners toggle the overview when you put your mouse at the very corner of a monitor.</p> <p><code>off</code> will disable the hot corners on this output, and writing specific corners will enable only those hot corners on this output.</p> <pre><code>// Enable the bottom-left and bottom-right hot corners on HDMI-A-1.\noutput \"HDMI-A-1\" {\n    hot-corners {\n        bottom-left\n        bottom-right\n    }\n}\n\n// Disable the hot corners on DP-2.\noutput \"DP-2\" {\n    hot-corners {\n        off\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Outputs.html#layout-config-overrides","title":"Layout config overrides","text":"<p>Since: next release</p> <p>You can customize layout settings for an output with a <code>layout {}</code> block:</p> <pre><code>output \"SomeCompany VerticalMonitor 1234\" {\n    transform \"90\"\n\n    // Layout config overrides just for this output.\n    layout {\n        default-column-width { proportion 1.0; }\n\n        // ...any other setting.\n    }\n}\n\noutput \"SomeCompany UltrawideMonitor 1234\" {\n    // Narrower proportions and more presets for an ultrawide.\n    layout {\n        default-column-width { proportion 0.25; }\n\n        preset-column-widths {\n            proportion 0.2\n            proportion 0.25\n            proportion 0.5\n            proportion 0.75\n            proportion 0.8\n        }\n    }\n}\n</code></pre> <p>It accepts all the same options as the top-level <code>layout {}</code> block.</p> <p>In order to unset a flag, write it with <code>false</code>, e.g.:</p> <pre><code>layout {\n    // Enabled globally.\n    always-center-single-column\n}\n\noutput \"eDP-1\" {\n    layout {\n        // Unset on this output.\n        always-center-single-column false\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Overview.html","title":"Configuration: Overview","text":"<p>This wiki page has moved to: Introduction.</p>"},{"location":"Configuration%3A-Switch-Events.html","title":"Switch Events","text":""},{"location":"Configuration%3A-Switch-Events.html#overview","title":"Overview","text":"<p>Since: 0.1.10</p> <p>Switch event bindings are declared in the <code>switch-events {}</code> section of the config.</p> <p>Here are all the events that you can bind at a glance:</p> <pre><code>switch-events {\n    lid-close { spawn \"notify-send\" \"The laptop lid is closed!\"; }\n    lid-open { spawn \"notify-send\" \"The laptop lid is open!\"; }\n    tablet-mode-on { spawn \"bash\" \"-c\" \"gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled true\"; }\n    tablet-mode-off { spawn \"bash\" \"-c\" \"gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled false\"; }\n}\n</code></pre> <p>The syntax is similar to key bindings. Currently, only the <code>spawn</code> action are supported.</p> <p>Note</p> <p>In contrast to key bindings, switch event bindings are always executed, even when the session is locked.</p>"},{"location":"Configuration%3A-Switch-Events.html#lid-close-lid-open","title":"<code>lid-close</code>, <code>lid-open</code>","text":"<p>These events correspond to closing and opening of the laptop lid.</p> <p>Note that niri will already automatically turn the internal laptop monitor on and off in accordance with the laptop lid.</p> <pre><code>switch-events {\n    lid-close { spawn \"notify-send\" \"The laptop lid is closed!\"; }\n    lid-open { spawn \"notify-send\" \"The laptop lid is open!\"; }\n}\n</code></pre>"},{"location":"Configuration%3A-Switch-Events.html#tablet-mode-on-tablet-mode-off","title":"<code>tablet-mode-on</code>, <code>tablet-mode-off</code>","text":"<p>These events trigger when a convertible laptop goes into or out of tablet mode. In tablet mode, the keyboard and mouse are usually inaccessible, so you can use these events to activate the on-screen keyboard.</p> <pre><code>switch-events {\n    tablet-mode-on { spawn \"bash\" \"-c\" \"gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled true\"; }\n    tablet-mode-off { spawn \"bash\" \"-c\" \"gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled false\"; }\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html","title":"Window Rules","text":""},{"location":"Configuration%3A-Window-Rules.html#overview","title":"Overview","text":"<p>Window rules let you adjust behavior for individual windows. They have <code>match</code> and <code>exclude</code> directives that control which windows the rule should apply to, and a number of properties that you can set.</p> <p>Window rules are processed in order of appearance in the config file. This means that you can put more generic rules first, then override them for specific windows later. For example:</p> <pre><code>// Set open-maximized to true for all windows.\nwindow-rule {\n    open-maximized true\n}\n\n// Then, for Alacritty, set open-maximized back to false.\nwindow-rule {\n    match app-id=\"Alacritty\"\n    open-maximized false\n}\n</code></pre> <p>Tip</p> <p>In general, you cannot \"unset\" a property in a later rule, only set it to a different value. Use the <code>exclude</code> directives to avoid applying a rule for specific windows.</p> <p>Here are all matchers and properties that a window rule could have:</p> <pre><code>window-rule {\n    match title=\"Firefox\"\n    match app-id=\"Alacritty\"\n    match is-active=true\n    match is-focused=false\n    match is-active-in-column=true\n    match is-floating=true\n    match is-window-cast-target=true\n    match is-urgent=true\n    match at-startup=true\n\n    // Properties that apply once upon window opening.\n    default-column-width { proportion 0.75; }\n    default-window-height { fixed 500; }\n    open-on-output \"Some Company CoolMonitor 1234\"\n    open-on-workspace \"chat\"\n    open-maximized true\n    open-maximized-to-edges true\n    open-fullscreen true\n    open-floating true\n    open-focused false\n\n    // Properties that apply continuously.\n    draw-border-with-background false\n    opacity 0.5\n    block-out-from \"screencast\"\n    // block-out-from \"screen-capture\"\n    variable-refresh-rate true\n    default-column-display \"tabbed\"\n    default-floating-position x=100 y=200 relative-to=\"bottom-left\"\n    scroll-factor 0.75\n\n    focus-ring {\n        // off\n        on\n        width 4\n        active-color \"#7fc8ff\"\n        inactive-color \"#505050\"\n        urgent-color \"#9b0000\"\n        // active-gradient from=\"#80c8ff\" to=\"#bbddff\" angle=45\n        // inactive-gradient from=\"#505050\" to=\"#808080\" angle=45 relative-to=\"workspace-view\"\n        // urgent-gradient from=\"#800\" to=\"#a33\" angle=45\n    }\n\n    border {\n        // Same as focus-ring.\n    }\n\n    shadow {\n        // on\n        off\n        softness 40\n        spread 5\n        offset x=0 y=5\n        draw-behind-window true\n        color \"#00000064\"\n        // inactive-color \"#00000064\"\n    }\n\n    tab-indicator {\n        active-color \"red\"\n        inactive-color \"gray\"\n        urgent-color \"blue\"\n        // active-gradient from=\"#80c8ff\" to=\"#bbddff\" angle=45\n        // inactive-gradient from=\"#505050\" to=\"#808080\" angle=45 relative-to=\"workspace-view\"\n        // urgent-gradient from=\"#800\" to=\"#a33\" angle=45\n    }\n\n    geometry-corner-radius 12\n    clip-to-geometry true\n    tiled-state true\n    baba-is-float true\n\n    min-width 100\n    max-width 200\n    min-height 300\n    max-height 300\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#window-matching","title":"Window Matching","text":"<p>Each window rule can have several <code>match</code> and <code>exclude</code> directives. In order for the rule to apply, a window needs to match any of the <code>match</code> directives, and none of the <code>exclude</code> directives.</p> <pre><code>window-rule {\n    // Match all Telegram windows...\n    match app-id=r#\"^org\\.telegram\\.desktop$\"#\n\n    // ...except the media viewer window.\n    exclude title=\"^Media viewer$\"\n\n    // Properties to apply.\n    open-on-output \"HDMI-A-1\"\n}\n</code></pre> <p>Match and exclude directives have the same syntax. There can be multiple matchers in one directive, then the window should match all of them for the directive to apply.</p> <pre><code>window-rule {\n    // Match Firefox windows with Gmail in title.\n    match app-id=\"firefox\" title=\"Gmail\"\n}\n\nwindow-rule {\n    // Match Firefox, but only when it is active...\n    match app-id=\"firefox\" is-active=true\n\n    // ...or match Telegram...\n    match app-id=r#\"^org\\.telegram\\.desktop$\"#\n\n    // ...but don't match the Telegram media viewer.\n    // If you open a tab in Firefox titled \"Media viewer\",\n    // it will not be excluded because it doesn't match the app-id\n    // of this exclude directive.\n    exclude app-id=r#\"^org\\.telegram\\.desktop$\"# title=\"Media viewer\"\n}\n</code></pre> <p>Let's look at the matchers in more detail.</p>"},{"location":"Configuration%3A-Window-Rules.html#title-and-app-id","title":"<code>title</code> and <code>app-id</code>","text":"<p>These are regular expressions that should match anywhere in the window title and app ID respectively. You can read about the supported regular expression syntax here.</p> <pre><code>// Match windows with title containing \"Mozilla Firefox\",\n// or windows with app ID containing \"Alacritty\".\nwindow-rule {\n    match title=\"Mozilla Firefox\"\n    match app-id=\"Alacritty\"\n}\n</code></pre> <p>Raw KDL strings can be helpful for writing out regular expressions:</p> <pre><code>window-rule {\n    exclude app-id=r#\"^org\\.keepassxc\\.KeePassXC$\"#\n}\n</code></pre> <p>You can find the title and the app ID of a window by running <code>niri msg pick-window</code> and clicking on the window in question.</p> <p>Tip</p> <p>Another way to find the window title and app ID is to configure the <code>wlr/taskbar</code> module in Waybar to include them in the tooltip:</p> <pre><code>\"wlr/taskbar\": {\n    \"tooltip-format\": \"{title} | {app_id}\",\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#is-active","title":"<code>is-active</code>","text":"<p>Can be <code>true</code> or <code>false</code>. Matches active windows (same windows that have the active border / focus ring color).</p> <p>Every workspace on the focused monitor will have one active window. This means that you will usually have multiple active windows (one per workspace), and when you switch between workspaces, you can see two active windows at once.</p> <pre><code>window-rule {\n    match is-active=true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#is-focused","title":"<code>is-focused</code>","text":"<p>Can be <code>true</code> or <code>false</code>. Matches the window that has the keyboard focus.</p> <p>Contrary to <code>is-active</code>, there can only be a single focused window. Also, when opening a layer-shell application launcher or pop-up menu, the keyboard focus goes to layer-shell. While layer-shell has the keyboard focus, windows will not match this rule.</p> <pre><code>window-rule {\n    match is-focused=true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#is-active-in-column","title":"<code>is-active-in-column</code>","text":"<p>Since: 0.1.6</p> <p>Can be <code>true</code> or <code>false</code>. Matches the window that is the \"active\" window in its column.</p> <p>Contrary to <code>is-active</code>, there is always one <code>is-active-in-column</code> window in each column. It is the window that was last focused in the column, i.e. the one that will gain focus if this column is focused.</p> <p>Since: 25.01 This rule will match <code>true</code> during the initial window opening.</p> <pre><code>window-rule {\n    match is-active-in-column=true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#is-floating","title":"<code>is-floating</code>","text":"<p>Since: 25.01</p> <p>Can be <code>true</code> or <code>false</code>. Matches floating windows.</p> <p>Note</p> <p>This matcher will apply only after the window is already open. This means that you cannot use it to change the window opening properties like <code>default-window-height</code> or <code>open-on-workspace</code>.</p> <pre><code>window-rule {\n    match is-floating=true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#is-window-cast-target","title":"<code>is-window-cast-target</code>","text":"<p>Since: 25.02</p> <p>Can be <code>true</code> or <code>false</code>. Matches <code>true</code> for windows that are target of an ongoing window screencast.</p> <p>Note</p> <p>This only matches individual-window screencasts. It will not match windows that happen to be visible in a monitor screencast, for example.</p> <pre><code>// Indicate screencasted windows with red colors.\nwindow-rule {\n    match is-window-cast-target=true\n\n    focus-ring {\n        active-color \"#f38ba8\"\n        inactive-color \"#7d0d2d\"\n    }\n\n    border {\n        inactive-color \"#7d0d2d\"\n    }\n\n    shadow {\n        color \"#7d0d2d70\"\n    }\n\n    tab-indicator {\n        active-color \"#f38ba8\"\n        inactive-color \"#7d0d2d\"\n    }\n}\n</code></pre> <p>Example:</p> <p></p>"},{"location":"Configuration%3A-Window-Rules.html#is-urgent","title":"<code>is-urgent</code>","text":"<p>Since: 25.05</p> <p>Can be <code>true</code> or <code>false</code>. Matches windows that request the user's attention.</p> <pre><code>window-rule {\n    match is-urgent=true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#at-startup","title":"<code>at-startup</code>","text":"<p>Since: 0.1.6</p> <p>Can be <code>true</code> or <code>false</code>. Matches during the first 60 seconds after starting niri.</p> <p>This is useful for properties like <code>open-on-output</code> which you may want to apply only right after starting niri.</p> <pre><code>// Open windows on the HDMI-A-1 monitor at niri startup, but not afterwards.\nwindow-rule {\n    match at-startup=true\n    open-on-output \"HDMI-A-1\"\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#window-opening-properties","title":"Window Opening Properties","text":"<p>These properties apply once, when a window first opens.</p> <p>To be precise, they apply at the point when niri sends the initial configure request to the window.</p>"},{"location":"Configuration%3A-Window-Rules.html#default-column-width","title":"<code>default-column-width</code>","text":"<p>Set the default width for the new window.</p> <p>This works for floating windows too, despite the word \"column\" in the name.</p> <pre><code>// Give Blender and GIMP some guaranteed width on opening.\nwindow-rule {\n    match app-id=\"^blender$\"\n\n    // GIMP app ID contains the version like \"gimp-2.99\",\n    // so we only match the beginning (with ^) and not the end.\n    match app-id=\"^gimp\"\n\n    default-column-width { fixed 1200; }\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#default-window-height","title":"<code>default-window-height</code>","text":"<p>Since: 25.01</p> <p>Set the default height for the new window.</p> <pre><code>// Open the Firefox picture-in-picture window as floating with 480\u00d7270 size.\nwindow-rule {\n    match app-id=\"firefox$\" title=\"^Picture-in-Picture$\"\n\n    open-floating true\n    default-column-width { fixed 480; }\n    default-window-height { fixed 270; }\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#open-on-output","title":"<code>open-on-output</code>","text":"<p>Make the window open on a specific output.</p> <p>If such an output does not exist, the window will open on the currently focused output as usual.</p> <p>If the window opens on an output that is not currently focused, the window will not be automatically focused.</p> <pre><code>// Open Firefox and Telegram (but not its Media Viewer)\n// on a specific monitor.\nwindow-rule {\n    match app-id=\"firefox$\"\n    match app-id=r#\"^org\\.telegram\\.desktop$\"#\n    exclude app-id=r#\"^org\\.telegram\\.desktop$\"# title=\"^Media viewer$\"\n\n    open-on-output \"HDMI-A-1\"\n    // Or:\n    // open-on-output \"Some Company CoolMonitor 1234\"\n}\n</code></pre> <p>Since: 0.1.9 <code>open-on-output</code> can now use monitor manufacturer, model, and serial. Before, it could only use the connector name.</p>"},{"location":"Configuration%3A-Window-Rules.html#open-on-workspace","title":"<code>open-on-workspace</code>","text":"<p>Since: 0.1.6</p> <p>Make the window open on a specific named workspace.</p> <p>If such a workspace does not exist, the window will open on the currently focused workspace as usual.</p> <p>If the window opens on an output that is not currently focused, the window will not be automatically focused.</p> <pre><code>// Open Fractal on the \"chat\" workspace.\nwindow-rule {\n    match app-id=r#\"^org\\.gnome\\.Fractal$\"#\n\n    open-on-workspace \"chat\"\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#open-maximized","title":"<code>open-maximized</code>","text":"<p>Make the window open as a maximized column.</p> <pre><code>// Maximize Firefox by default.\nwindow-rule {\n    match app-id=\"firefox$\"\n\n    open-maximized true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#open-maximized-to-edges","title":"<code>open-maximized-to-edges</code>","text":"<p>Since: next release</p> <p>Make the window open maximized to edges.</p> <pre><code>window-rule {\n    open-maximized-to-edges true\n}\n</code></pre> <p>You can also set this to <code>false</code> to prevent a window from opening maximized to edges.</p> <pre><code>window-rule {\n    open-maximized-to-edges false\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#open-fullscreen","title":"<code>open-fullscreen</code>","text":"<p>Make the window open fullscreen.</p> <pre><code>window-rule {\n    open-fullscreen true\n}\n</code></pre> <p>You can also set this to <code>false</code> to prevent a window from opening fullscreen.</p> <pre><code>// Make the Telegram media viewer open in windowed mode.\nwindow-rule {\n    match app-id=r#\"^org\\.telegram\\.desktop$\"# title=\"^Media viewer$\"\n\n    open-fullscreen false\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#open-floating","title":"<code>open-floating</code>","text":"<p>Since: 25.01</p> <p>Make the window open in the floating layout.</p> <pre><code>// Open the Firefox picture-in-picture window as floating.\nwindow-rule {\n    match app-id=\"firefox$\" title=\"^Picture-in-Picture$\"\n\n    open-floating true\n}\n</code></pre> <p>You can also set this to <code>false</code> to prevent a window from opening in the floating layout.</p> <pre><code>// Open all windows in the tiling layout, overriding any auto-floating logic.\nwindow-rule {\n    open-floating false\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#open-focused","title":"<code>open-focused</code>","text":"<p>Since: 25.01</p> <p>Set this to <code>false</code> to prevent this window from being automatically focused upon opening.</p> <pre><code>// Don't give focus to the GIMP startup splash screen.\nwindow-rule {\n    match app-id=\"^gimp\" title=\"^GIMP Startup$\"\n\n    open-focused false\n}\n</code></pre> <p>You can also set this to <code>true</code> to focus the window, even if normally it wouldn't get auto-focused.</p> <pre><code>// Always focus the KeePassXC-Browser unlock dialog.\n//\n// This dialog opens parented to the KeePassXC window rather than the browser,\n// so it doesn't get auto-focused by default.\nwindow-rule {\n    match app-id=r#\"^org\\.keepassxc\\.KeePassXC$\"# title=\"^Unlock Database - KeePassXC$\"\n\n    open-focused true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#dynamic-properties","title":"Dynamic Properties","text":"<p>These properties apply continuously to open windows.</p>"},{"location":"Configuration%3A-Window-Rules.html#block-out-from","title":"<code>block-out-from</code>","text":"<p>You can block out windows from xdg-desktop-portal screencasts. They will be replaced with solid black rectangles.</p> <p>This can be useful for password managers or messenger windows, etc. For layer-shell notification pop-ups and the like, you can use a <code>block-out-from</code> layer rule.</p> <p></p> <p>To preview and set up this rule, check the <code>preview-render</code> option in the debug section of the config.</p> <p>Caution</p> <p>The window is not blocked out from third-party screenshot tools. If you open some screenshot tool with preview while screencasting, blocked out windows will be visible on the screencast.</p> <p>The built-in screenshot UI is not affected by this problem though. If you open the screenshot UI while screencasting, you will be able to select the area to screenshot while seeing all windows normally, but on a screencast the selection UI will display with windows blocked out.</p> <pre><code>// Block out password managers from screencasts.\nwindow-rule {\n    match app-id=r#\"^org\\.keepassxc\\.KeePassXC$\"#\n    match app-id=r#\"^org\\.gnome\\.World\\.Secrets$\"#\n\n    block-out-from \"screencast\"\n}\n</code></pre> <p>Alternatively, you can block out the window out of all screen captures, including third-party screenshot tools. This way you avoid accidentally showing the window on a screencast when opening a third-party screenshot preview.</p> <p>This setting will still let you use the interactive built-in screenshot UI, but it will block out the window from the fully automatic screenshot actions, such as <code>screenshot-screen</code> and <code>screenshot-window</code>. The reasoning is that with an interactive selection, you can make sure that you avoid screenshotting sensitive content.</p> <pre><code>window-rule {\n    block-out-from \"screen-capture\"\n}\n</code></pre> <p>Warning</p> <p>Be careful when blocking out windows based on a dynamically changing window title.</p> <p>For example, you might try to block out specific Firefox tabs like this:</p> <pre><code>window-rule {\n    // Doesn't quite work! Try to block out the Gmail tab.\n    match app-id=\"firefox$\" title=\"- Gmail \"\n\n    block-out-from \"screencast\"\n}\n</code></pre> <p>It will work, but when switching from a sensitive tab to a regular tab, the contents of the sensitive tab will show up on a screencast for an instant.</p> <p>This is because window title (and app ID) are not double-buffered in the Wayland protocol, so they are not tied to specific window contents. There's no robust way for Firefox to synchronize visibly showing a different tab and changing the window title.</p>"},{"location":"Configuration%3A-Window-Rules.html#opacity","title":"<code>opacity</code>","text":"<p>Set the opacity of the window. <code>0.0</code> is fully transparent, <code>1.0</code> is fully opaque. This is applied on top of the window's own opacity, so semitransparent windows will become even more transparent.</p> <p>Opacity is applied to every surface of the window individually, so subsurfaces and pop-up menus will show window content behind them.</p> <p></p> <p>Also, focus ring and border with background will show through semitransparent windows (see <code>prefer-no-csd</code> and the <code>draw-border-with-background</code> window rule below).</p> <p>Opacity can be toggled on or off for a window using the <code>toggle-window-rule-opacity</code> action.</p> <pre><code>// Make inactive windows semitransparent.\nwindow-rule {\n    match is-active=false\n\n    opacity 0.95\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#variable-refresh-rate","title":"<code>variable-refresh-rate</code>","text":"<p>Since: 0.1.9</p> <p>If set to true, whenever this window displays on an output with on-demand VRR, it will enable VRR on that output.</p> <pre><code>// Configure some output with on-demand VRR.\noutput \"HDMI-A-1\" {\n    variable-refresh-rate on-demand=true\n}\n\n// Enable on-demand VRR when mpv displays on the output.\nwindow-rule {\n    match app-id=\"^mpv$\"\n\n    variable-refresh-rate true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#default-column-display","title":"<code>default-column-display</code>","text":"<p>Since: 25.02</p> <p>Set the default display mode for columns created from this window.</p> <p>This is used any time a window goes into its own column. For example: - Opening a new window. - Expelling a window into its own column. - Moving a window from the floating layout to the tiling layout.</p> <pre><code>// Make Evince windows open as tabbed columns.\nwindow-rule {\n    match app-id=\"^evince$\"\n\n    default-column-display \"tabbed\"\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#default-floating-position","title":"<code>default-floating-position</code>","text":"<p>Since: 25.01</p> <p>Set the initial position for this window when it opens on, or moves to the floating layout.</p> <p>Afterward, the window will remember its last floating position.</p> <p>By default, new floating windows open at the center of the screen, and windows from the tiling layout open close to their visual screen position.</p> <p>The position uses logical coordinates relative to the working area. By default, they are relative to the top-left corner of the working area, but you can change this by setting <code>relative-to</code> to one of these values: <code>top-left</code>, <code>top-right</code>, <code>bottom-left</code>, <code>bottom-right</code>, <code>top</code>, <code>bottom</code>, <code>left</code>, or <code>right</code>.</p> <p>For example, if you have a bar at the top, then <code>x=0 y=0</code> will put the top-left corner of the window directly below the bar. If instead you write <code>x=0 y=0 relative-to=\"top-right\"</code>, then the top-right corner of the window will align with the top-right corner of the workspace, also directly below the bar. When only one side is specified (e.g. top) the window will align to the center of that side.</p> <p>The coordinates change direction based on <code>relative-to</code>. For example, by default (top-left), <code>x=100 y=200</code> will put the window 100 pixels to the right and 200 pixels down from the top-left corner. If you use <code>x=100 y=200 relative-to=\"bottom-left\"</code>, it will put the window 100 pixels to the right and 200 pixels up from the bottom-left corner.</p> <pre><code>// Open the Firefox picture-in-picture window at the bottom-left corner of the screen\n// with a small gap.\nwindow-rule {\n    match app-id=\"firefox$\" title=\"^Picture-in-Picture$\"\n\n    default-floating-position x=32 y=32 relative-to=\"bottom-left\"\n}\n</code></pre> <p>You can use single-side <code>relative-to</code> to get a dropdown-like effect.</p> <pre><code>// Example: a \"dropdown\" terminal.\nwindow-rule {\n    // Match by \"dropdown\" app ID.\n    // You need to set this app ID when running your terminal, e.g.:\n    // spawn \"alacritty\" \"--class\" \"dropdown\"\n    match app-id=\"^dropdown$\"\n\n    // Open it as floating.\n    open-floating true\n    // Anchor to the top edge of the screen.\n    default-floating-position x=0 y=0 relative-to=\"top\"\n    // Half of the screen high.\n    default-window-height { proportion 0.5; }\n    // 80% of the screen wide.\n    default-column-width { proportion 0.8; }\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#scroll-factor","title":"<code>scroll-factor</code>","text":"<p>Since: 25.02</p> <p>Set a scroll factor for all scroll events sent to a window.</p> <p>This will be multiplied with the scroll factor set for your input device in the input section.</p> <pre><code>// Make scrolling in Firefox a bit slower.\nwindow-rule {\n    match app-id=\"firefox$\"\n\n    scroll-factor 0.75\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#draw-border-with-background","title":"<code>draw-border-with-background</code>","text":"<p>Override whether the border and the focus ring draw with a background.</p> <p>Set this to <code>true</code> to draw them as solid colored rectangles even for windows which agreed to omit their client-side decorations. Set this to <code>false</code> to draw them as borders around the window even for windows which use client-side decorations.</p> <p>This property can be useful for rectangular windows that do not support the xdg-decoration protocol.</p> With Background Without Background <pre><code>window-rule {\n    draw-border-with-background false\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#focus-ring-and-border","title":"<code>focus-ring</code> and <code>border</code>","text":"<p>Since: 0.1.6</p> <p>Override the focus ring and border options for the window.</p> <p>These rules have the same options as the normal <code>focus-ring</code> and <code>border</code> config in the layout section, so check the documentation there.</p> <p>However, in addition to <code>off</code> to disable the border/focus ring, this window rule has an <code>on</code> flag that enables the border/focus ring for the window even if it was otherwise disabled. The <code>on</code> flag has precedence over the <code>off</code> flag, in case both are set.</p> <pre><code>window-rule {\n    focus-ring {\n        off\n        width 2\n    }\n}\n\nwindow-rule {\n    border {\n        on\n        width 8\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#shadow","title":"<code>shadow</code>","text":"<p>Since: 25.02</p> <p>Override the shadow options for the window.</p> <p>This rule has the same options as the normal <code>shadow</code> config in the layout section, so check the documentation there.</p> <p>However, in addition to <code>on</code> to enable the shadow, this window rule has an <code>off</code> flag that disables the shadow for the window even if it was otherwise enabled. The <code>on</code> flag has precedence over the <code>off</code> flag, in case both are set.</p> <pre><code>// Turn on shadows for floating windows.\nwindow-rule {\n    match is-floating=true\n\n    shadow {\n        on\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#tab-indicator","title":"<code>tab-indicator</code>","text":"<p>Since: 25.02</p> <p>Override the tab indicator options for the window.</p> <p>Options in this rule match the same options as the normal <code>tab-indicator</code> config in the layout section, so check the documentation there.</p> <pre><code>// Make KeePassXC tab have a dark red inactive color.\nwindow-rule {\n    match app-id=r#\"^org\\.keepassxc\\.KeePassXC$\"#\n\n    tab-indicator {\n        inactive-color \"darkred\"\n    }\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#geometry-corner-radius","title":"<code>geometry-corner-radius</code>","text":"<p>Since: 0.1.6</p> <p>Set the corner radius of the window.</p> <p>On its own, this setting will only affect the border and the focus ring\u2014they will round their corners to match the geometry corner radius. If you'd like to force-round the corners of the window itself, set <code>clip-to-geometry true</code> in addition to this setting.</p> <pre><code>window-rule {\n    geometry-corner-radius 12\n}\n</code></pre> <p>The radius is set in logical pixels, and controls the radius of the window itself, that is, the inner radius of the border:</p> <p></p> <p>Instead of one radius, you can set four, for each corner. The order is the same as in CSS: top-left, top-right, bottom-right, bottom-left.</p> <pre><code>window-rule {\n    geometry-corner-radius 8 8 0 0\n}\n</code></pre> <p>This way, you can match GTK 3 applications which have square bottom corners:</p> <p></p>"},{"location":"Configuration%3A-Window-Rules.html#clip-to-geometry","title":"<code>clip-to-geometry</code>","text":"<p>Since: 0.1.6</p> <p>Clips the window to its visual geometry.</p> <p>This will cut out any client-side window shadows, and also round window corners according to <code>geometry-corner-radius</code>.</p> <p></p> <pre><code>window-rule {\n    clip-to-geometry true\n}\n</code></pre> <p>Enable border, set <code>geometry-corner-radius</code> and <code>clip-to-geometry</code>, and you've got a classic setup:</p> <p></p> <pre><code>prefer-no-csd\n\nlayout {\n    focus-ring {\n        off\n    }\n\n    border {\n        width 2\n    }\n}\n\nwindow-rule {\n    geometry-corner-radius 12\n    clip-to-geometry true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#tiled-state","title":"<code>tiled-state</code>","text":"<p>Since: 25.05</p> <p>Informs the window that it is tiled. Usually, windows will react by becoming rectangular and hiding their client-side shadows. Windows that snap their size to a grid (e.g. terminals like foot) will usually disable this snapping when they are tiled.</p> <p>By default, niri will set the tiled state to <code>true</code> together with <code>prefer-no-csd</code> in order to improve behavior for apps that don't support server-side decorations. You can use this window rule to override this, for example to get rectangular windows with CSD.</p> <pre><code>// Make tiled windows rectangular while using CSD.\nwindow-rule {\n    match is-floating=false\n\n    tiled-state true\n}\n</code></pre>"},{"location":"Configuration%3A-Window-Rules.html#baba-is-float","title":"<code>baba-is-float</code>","text":"<p>Since: 25.02</p> <p>Make your windows FLOAT up and down.</p> <p>This is an April Fools' 2025 feature.</p> <pre><code>window-rule {\n    match is-floating=true\n\n    baba-is-float true\n}\n</code></pre>   https://github.com/user-attachments/assets/3f4cb1a4-40b2-4766-98b7-eec014c19509"},{"location":"Configuration%3A-Window-Rules.html#size-overrides","title":"Size Overrides","text":"<p>You can amend the window's minimum and maximum size in logical pixels.</p> <p>Keep in mind that the window itself always has a final say in its size. These values instruct niri to never ask the window to be smaller than the minimum you set, or to be bigger than the maximum you set.</p> <p>Note</p> <p><code>max-height</code> will only apply to automatically-sized windows if it is equal to <code>min-height</code>. Either set it equal to <code>min-height</code>, or change the window height manually after opening it with <code>set-window-height</code>.</p> <p>This is a limitation of niri's window height distribution algorithm.</p> <pre><code>window-rule {\n    min-width 100\n    max-width 200\n    min-height 300\n    max-height 300\n}\n</code></pre> <pre><code>// Fix OBS with server-side decorations missing a minimum width.\nwindow-rule {\n    match app-id=r#\"^com\\.obsproject\\.Studio$\"#\n\n    min-width 876\n}\n</code></pre>"},{"location":"Development%3A-Animation-Timing.html","title":"Animation Timing","text":"<p>Time, Dr. Freeman? Is it really that... time again?</p> <p>A compositor deals with one or more monitors on mostly fixed refresh cycles. For example, a 170\u00a0Hz monitor can draw a frame every ~5.88\u00a0ms.</p> <p>Most of the time, the compositor doesn't actually redraw the monitor: when nothing changes on screen (e.g. you're reading a document and aren't moving your cursor), it would be wasteful to wake up the GPU to composite the same image. During an animation however, screen contents do change every frame. Niri will generally start drawing the next frame as soon as the previous one shows up on screen.</p> <p>Since the monitor refresh cycle is fixed in most cases (even with VRR, there's a maximum refresh rate), the compositor can predict when the next frame will show up on the monitor, and render ongoing animations for that exact moment in time. This way, all animation frames are perfectly timed with no jitter, regardless of when exactly the rendering code had a chance to run. For example, even if the compositor has to process new window events, delaying the rendering by a few ms, the animation timing will remain exactly aligned to the monitor refresh cycle.</p> <p>There are hence several properties that a compositor wants from its timing system.</p> <ol> <li>It should be possible to get the state of the animations at a specific time in the near future, for rendering a frame exactly timed to when the monitor will show it.<ul> <li>This time override ability should be usable in tests to advance the time in a fully controlled fashion.</li> </ul> </li> <li>Animations in response to user actions should begin at the moment when the action happens.    For example, pressing a workspace switch key should start the animation at the instant when the user pressed the key (rather than, say, slightly in the future where we predicted the next monitor frame, which we had already rendered by now).</li> <li>During the processing of a single action, querying the current time should return the exact same value.    Even if the processing finishes a few microseconds after it started, querying the time in the end should return the same thing.    This generally makes writing code much more sane; otherwise you'd need to for example avoid reading the position of some element twice in a row, since it could have moved by one pixel in-between, screwing with the logic.    Also, fetching the current system time can be quite expensive in terms of overhead.</li> <li>It should be reasonably easy to implement an animation slow-down preference, so all animations can be slowed down or sped up by the same factor.</li> </ol> <p>The solution in niri is a <code>LazyClock</code>, a clock that remembers one timestamp. Initially, the timestamp is empty, so when you ask <code>LazyClock</code> for the current time, it will fetch and return the system time, and also remember it. Subsequently, it will keep returning the same timestamp that it had remembered.</p> <p>You can also clear the timestamp, then <code>LazyClock</code> will fetch the system time anew when it's needed. In niri, the timestamp is cleared at the end of every event loop iteration, right before going to sleep waiting for new events. This way, anything that happens next (like a user key press) will fetch and use the most up-to-date timestamp as soon as one is needed, but then the processing code will keep getting the exact same timestamp, since <code>LazyClock</code> stores it.</p> <p>You can also just manually set the timestamp to a specific value. This is how we render a frame for the predicted time of when the monitor will show it. Also, this is used by tests: they simply always set the timestamp and never use the system time.</p> <p>Finally, there's an <code>AdjustableClock</code> wrapper on top that provides the ability to control the slow-down rate by modifying the timestamps returned by the clock.</p> <p>An important detail is that with rate changes, timestamps from the <code>AdjustableClock</code> will drift away and become unrelated to the system time. However, our target timestamp (for rendering) comes from the system time, so the override works directly on the underlying <code>LazyClock</code>. That is, overriding the timestamp and then querying the <code>AdjustableClock</code> will return a different timestamp that is correct and consistent with the adjustments made by <code>AdjustableClock</code>. This is reflected in the API by naming the function <code>Clock::set_unadjusted()</code> (and there's also <code>Clock::now_unadjusted()</code> to get the raw timestamp).</p> <p>The clock is shared among all animations in niri through passing around and storing a reference-counted pointer. This way, overriding the time automatically applies to everything, whereas in tests we can use a separate clock per test so that they don't interfere with each other.</p>"},{"location":"Development%3A-Design-Principles.html","title":"Design Principles","text":""},{"location":"Development%3A-Design-Principles.html#general-principles","title":"General principles","text":"<p>These are some of the general principles that I try to follow throughout niri. They can be sidestepped in specific circumstances if there's a good reason.</p>"},{"location":"Development%3A-Design-Principles.html#opening-a-new-window-should-not-affect-the-sizes-of-any-existing-windows","title":"Opening a new window should not affect the sizes of any existing windows.","text":"<p>This is the main annoyance with traditional tiling: you want to open a new window, but it messes with your existing window sizes. Especially when you're looking at a big window like a browser or an image editor, want to open a quick terminal for something, and it makes the big window unusably small, or reflows the content, or clips part of the window.</p> <p>The usual workaround in tiling WMs is to use more workspaces: when you need a new window, you go to an empty workspace and open it there (this way, you also get your entire screen for the new window, rather than a smaller part of it).</p> <p>Scrollable tiling offers an alternative: for temporary windows, you can just open them, do what you need, and close, all without messing up the other windows or having to go to a new workspace. It also lets you group together more related windows on the same workspace by having less frequently used ones scrolled out of the view.</p>"},{"location":"Development%3A-Design-Principles.html#the-focused-window-should-not-move-around-on-its-own","title":"The focused window should not move around on its own.","text":"<p>In particular: windows opening, closing, and resizing to the left of the focused window should not cause it to visually move.</p> <p>The focused window is the window you're working in. And stuff happening outside the view shouldn't mess with what you're focused on.</p>"},{"location":"Development%3A-Design-Principles.html#actions-should-apply-immediately","title":"Actions should apply immediately.","text":"<p>This is important both for compositor responsiveness and predictability, and for keeping the code sane and free of edge cases and unnecessary asynchrony.</p> <ul> <li>Things like resizing or consuming into column take effect immediately, even if the window needs time to catch up.</li> <li>An animated workspace switch makes your input go to the final workspace and window instantly, without waiting for the animation.</li> <li>Opening the overview (which has a zoom-out animation) lets you grab windows right away, and closing the overview makes your input immediately go back to the windows, without waiting for the zoom back in.</li> </ul>"},{"location":"Development%3A-Design-Principles.html#when-disabled-eye-candy-features-should-not-affect-the-performance","title":"When disabled, eye-candy features should not affect the performance.","text":"<p>Things like animations and custom shaders do not run and are not present in the render tree when disabled. Extra offscreen rendering is avoided.</p> <p>Animations specifically are still \"started\" even when disabled, but with a duration of 0 (this way, they end as soon as the time is advanced). This does not impact performance, but helps avoid a lot of edge cases in the code.</p>"},{"location":"Development%3A-Design-Principles.html#eye-candy-features-should-not-cause-unreasonable-excessive-rendering","title":"Eye-candy features should not cause unreasonable excessive rendering.","text":"<ul> <li>For example, clip-to-geometry will prevent direct scanout in many cases (since the window surface is not completely visible). But in the cases where the surface or the subsurface is completely visible (fully within the clipped region), it will still allow for direct scanout.</li> <li>For example, animations can cause damage and even draw to an offscreen every frame, because they are expected to be short (and can be disabled). However, something like the rounded corners shader should not offscreen or cause excessive damage every frame, because it is long-running and constantly active.</li> </ul>"},{"location":"Development%3A-Design-Principles.html#be-mindful-of-invisible-state","title":"Be mindful of invisible state.","text":"<p>This is niri state that is not immediately apparent from looking at the screen. This is not bad per se, but you should carefully consider how to reduce the surprise factor.</p> <ul> <li>For example, when a monitor disconnects, all its workspaces move to another connected monitor. In order to be able to restore these workspaces when the first monitor connects again, these workspaces keep the knowledge of which was their original monitor\u2014this is an example of invisible state, since you can't tell it in any way by looking at the screen. This can have surprising consequences: imagine disconnecting a monitor at home, going to work, completely rearranging the windows there, then coming back home, and suddenly some random workspaces end up on your home monitor. In order to reduce this surprise factor, whenever a new window appears on a workspace, that workspace resets its original monitor to its current monitor. This way, the workspaces you actively worked on remain where they were.</li> <li>For example, niri preserves the view position whenever a window appears, or whenever a window goes full-screen, to restore it afterward. This way, dealing with temporary things like dialogs opening and closing, or toggling full-screen, becomes less annoying, since it doesn't mess up the view position. This is also invisible state, as you cannot tell by looking at the screen where closing a window will restore the view position. If taken to the extreme (previous view position saved forever for every open window), this can be surprising, as closing long-running windows would result in the view shifting around pretty much randomly. To reduce this surprise factor, niri remembers only one last view position per workspace, and forgets this stored view position upon window focus change.</li> </ul>"},{"location":"Development%3A-Design-Principles.html#window-layout","title":"Window layout","text":"<p>Here are some design considerations for the window layout logic.</p> <ol> <li> <p>If a window or popup is larger than the screen, it should be aligned in the top left corner.</p> <p>The top left area of a window is more likely to contain something important, so it should always be visible.</p> </li> <li> <p>Setting window width or height to a fixed pixel size (e.g. <code>set-column-width 1280</code> or <code>default-column-width { fixed 1280; }</code>) will set the size of the window itself, however setting to a proportional size (e.g. <code>set-column-width 50%</code>) will set the size of the tile, including the border added by niri.</p> <ul> <li>With proportions, the user is looking to tile multiple windows on the screen, so they should include borders.</li> <li>With fixed sizes, the user wants to test a specific client size or take a specifically sized screenshot, so they should affect the window directly.</li> <li>After the size is set, it is always converted to a value that includes the borders, to make the code sane. That is, <code>set-column-width 1000</code> followed by changing the niri border width will resize the window accordingly.</li> </ul> </li> <li> <p>Fullscreen windows are a normal part of the scrolling layout.</p> <p>This is a cool idea that scrollable tiling is uniquely positioned to implement. Fullscreen windows aren't on some \"special\" layer that covers everything; instead, they are normal tiles that you can switch away from, without disturbing the fullscreen status.</p> <p>Of course, you do want to cover your entire monitor when focused on a fullscreen window. This is specifically hardcoded into the logic: when the view is stationary on a focused fullscreen window, the top layer-shell layer and the floating windows hide away.</p> <p>This is also why fullscreening a floating window makes it go into the scrolling layout.</p> </li> </ol>"},{"location":"Development%3A-Design-Principles.html#default-config","title":"Default config","text":"<p>The default config is intended to give a familiar, helpful, and not too jarring experience to new niri users. Importantly, it is not a \"suggested rice config\"; we don't want to startle people with full-on rainbow borders and crazy shaders.</p> <p>Since we're not a complete desktop environment (and don't have the contributor base to become one), we cannot provide a fully integrated experience\u2014distro spins are better positioned to do this. As such, new niri users are expected to read through and tinker with the default niri config.</p> <p>The default config is therefore thoroughly commented with links to the relevant wiki sections. We don't include every possible option in the default config to avoid overwhelming users too much; anything overly specific or uncommon can stay on the wiki. The general rule is to include things that users are reasonably expected to want to change or know how to do. We do also advertise our more unique features though like screencast block-out-from.</p> <p>We default to CSD (<code>prefer-no-csd</code> is commented out). This gives new users easy and familiar way to move and close windows via their titlebars, especially considering that niri doesn't have serverside titlebars (so far at least).</p> <p>Focus rings are drawn fully behind windows by default. While this unfortunately messes with window transparency, which is a common source of confusion, defaulting to drawing focus rings only around windows would be even worse because it has holes inside clientside rounded corners. The ideal solution here would be to propose a Wayland protocol for windows to report their corner radius to the compositor (which would generally help for serverside decorations in different compositors).</p> <p>The default focus ring is quite thick at 4\u00a0px to look well with clientside-decorated windows and be obviously noticeable, and the default gaps are also quite big at 16\u00a0px to look well with the default focus ring width.</p> <p>The default input settings like touchpad tap and natural-scroll are how I believe most people want to use their computers.</p> <p>Shadows default to off because they are a fairly performance-intensive shader, and because many clientside-decorated windows already draw their own shadows.</p> <p>The default screenshot-path matches GNOME Shell.</p> <p>Default window rules are limited to fixing known severe issues (WezTerm) and doing something the absolute majority likely wants (make Firefox Picture-in-Picture player floating\u2014it can't do that on its own currently, maybe the pip protocol will change that).</p> <p>The default binds largely come from my own experience using PaperWM, and from other compositors. They assume QWERTY. The binds are ordered in a way to gradually introduce you to different bind configuration concepts.</p> <p>The general system is: if a hotkey switches somewhere, then adding Ctrl will move the focused window or column there. Adding Shift does an alternative action: for focus and movement it starts going across monitors, for resizes it starts acting on window height rather than width, etc. Workspace switching on ModU/I is one key up from ModJ/K used for window switching.</p> <p>Since Alt is a modifier in nested niri, binds with explicit Alt are mainly the ones only useful on the host, for example spawning a screen locker.</p>"},{"location":"Development%3A-Developing-niri.html","title":"Developing niri","text":""},{"location":"Development%3A-Developing-niri.html#running-a-local-build","title":"Running a Local Build","text":"<p>The main way of testing niri during development is running it as a nested window. The second step is usually switching to a different TTY and running niri there.</p> <p>Once a feature or fix is reasonably complete, you generally want to run a local build as your main compositor for proper testing. The easiest way to do that is to install niri normally (from a distro package for example), then overwrite the binary with <code>sudo cp ./target/release/niri /usr/bin/niri</code>. Do make sure that you know how to revert to a working version in case everything breaks though.</p> <p>If you use an RPM-based distro, you can generate an RPM package for a local build with <code>cargo generate-rpm</code>.</p>"},{"location":"Development%3A-Developing-niri.html#logging-levels","title":"Logging Levels","text":"<p>Niri uses <code>tracing</code> for logging. This is how logging levels are used:</p> <ul> <li><code>error!</code>: programming errors and bugs that are recoverable. Things you'd normally use <code>unwrap()</code> for. However, when a Wayland compositor crashes, it brings down the entire session, so it's better to recover and log an <code>error!</code> whenever reasonable. If you see an <code>ERROR</code> in the niri log, that always indicates a bug.</li> <li><code>warn!</code>: something bad but still possible happened. Informing the user that they did something wrong, or that their hardware did something weird, falls into this category. For example, config parsing errors should be indicated with a <code>warn!</code>.</li> <li><code>info!</code>: the most important messages related to normal operation. Running niri with <code>RUST_LOG=niri=info</code> should not make the user want to disable logging altogether.</li> <li><code>debug!</code>: less important messages related to normal operation. Running niri with <code>debug!</code> messages hidden should not negatively impact the UX.</li> <li><code>trace!</code>: everything that can be useful for debugging but is otherwise too spammy or performance intensive. <code>trace!</code> messages are compiled out of release builds.</li> </ul>"},{"location":"Development%3A-Developing-niri.html#tests","title":"Tests","text":"<p>We have some unit tests, most prominently for the layout code and for config parsing.</p> <p>When adding new operations to the layout, add them to the <code>Op</code> enum at the bottom of <code>src/layout/mod.rs</code> (this will automatically include it in the randomized tests), and if applicable to the <code>every_op</code> arrays below.</p> <p>When adding new config options, include them in the config parsing test.</p>"},{"location":"Development%3A-Developing-niri.html#running-tests","title":"Running Tests","text":"<p>Make sure to run <code>cargo test --all</code> to run tests from sub-crates too.</p> <p>Some tests are a bit too slow to run normally, like the randomized tests of the layout code, so they are normally skipped. Set the <code>RUN_SLOW_TESTS</code> variable to run them:</p> <pre><code>env RUN_SLOW_TESTS=1 cargo test --all\n</code></pre> <p>It also usually helps to run the randomized tests for a longer period, so that they can explore more inputs. You can control this with environment variables. This is how I usually run tests before pushing:</p> <pre><code>env RUN_SLOW_TESTS=1 PROPTEST_CASES=200000 PROPTEST_MAX_GLOBAL_REJECTS=200000 RUST_BACKTRACE=1 cargo test --release --all\n</code></pre>"},{"location":"Development%3A-Developing-niri.html#visual-tests","title":"Visual Tests","text":"<p>The <code>niri-visual-tests</code> sub-crate is a GTK application that runs hard-coded test cases so that you can visually check that they look right. It uses mock windows with the real layout and rendering code. It is especially helpful when working on animations.</p>"},{"location":"Development%3A-Developing-niri.html#profiling","title":"Profiling","text":"<p>We have integration with the Tracy profiler which you can enable by building niri with a feature flag:</p> <pre><code>cargo build --release --features=profile-with-tracy-ondemand\n</code></pre> <p>Then you can open Tracy (you will need the latest stable release) and attach to a running niri instance to collect profiling data. Profiling data is collected \"on demand\"\u2014that is, only when Tracy is connected. You can run a niri build like this as your main compositor if you'd like.</p> <p>Note</p> <p>If you need to profile niri startup or the niri CLI, you can opt for \"always on\" profiling instead, using this feature flag:</p> <pre><code>cargo build --release --features=profile-with-tracy\n</code></pre> <p>When compiled this way, niri will always collect profiling data, so you can't run a build like this as your main compositor.</p> <p>To make a niri function show up in Tracy, instrument it like this:</p> <pre><code>pub fn some_function() {\n    let _span = tracy_client::span!(\"some_function\");\n\n    // Code of the function.\n}\n</code></pre> <p>You can also enable Rust memory allocation profiling with <code>--features=profile-with-tracy-allocations</code>.</p>"},{"location":"Development%3A-Documenting-niri.html","title":"Documenting niri","text":"<p>niri's documentation files are found in <code>docs/wiki/</code> and should be viewable and browsable in at least three systems:</p> <ul> <li>The GitHub repo's markdown file preview</li> <li>The GitHub repo's wiki</li> <li>The documentation site</li> </ul>"},{"location":"Development%3A-Documenting-niri.html#the-github-repos-wiki","title":"The GitHub repo's wiki","text":"<p>This is generated with the <code>publish-wiki</code> job in <code>.github/workflows/ci.yml</code>. In order to have this job run as expected in your fork, you'll need to enable the wiki feature in your repo's settings on GitHub. This could be useful as a contributor to verify that the wiki generates the way you expect it to.</p>"},{"location":"Development%3A-Documenting-niri.html#the-documentation-site","title":"The documentation site","text":"<p>The documentation site is generated with mkdocs. The configuration files are found in <code>docs/</code>.</p> <p>To set up and run the documentation site locally, it is recommended to use uv.</p>"},{"location":"Development%3A-Documenting-niri.html#serving-the-site-locally-with-uv","title":"Serving the site locally with uv","text":"<p>In the <code>docs/</code> subdirectory:</p> <ul> <li><code>uv sync</code></li> <li><code>uv run mkdocs serve</code></li> </ul> <p>The documentation site should now be available on http://127.0.0.1:8000/niri/</p> <p>Changes made to the documentation while the development server is running will cause an automatic page refresh in the browser.</p> <p>Tip</p> <p>Images may not be visible, as they are stored on Git LFS. If this is the case, run <code>git lfs pull</code>.</p>"},{"location":"Development%3A-Documenting-niri.html#elements","title":"Elements","text":"<p>Elements such as links, admonitions, images, and snippets should work as expected in markdown file previews on GitHub, the GitHub repo's wiki, and in the documentation site.</p>"},{"location":"Development%3A-Documenting-niri.html#links","title":"Links","text":"<p>Links should in all cases be relative (e.g. <code>./FAQ.md</code>), unless it's an external one. Links should have anchors if they are meant to lead the user to a specific section on a page (e.g. <code>./Getting-Started.md#nvidia</code>).</p> <p>Tip</p> <p>mkdocs will terminate if relative links lead to non-existing documents or non-existing anchors. This means that the CI pipeline will fail when building documentation, as will <code>mkdocs serve</code> locally.</p>"},{"location":"Development%3A-Documenting-niri.html#admonitions","title":"Admonitions","text":"<p>Important</p> <p>This is an important distinction from other <code>mkdocs</code>-based documentation you might have encountered.</p> <p>Admonitions, or alerts should be written the way GitHub defines them. The above admonition is written like this:</p> <pre><code>&gt; [!IMPORTANT]\n&gt; This is an important distinction from other `mkdocs`-based documentation you might have encountered.\n</code></pre>"},{"location":"Development%3A-Documenting-niri.html#images","title":"Images","text":"<p>Images should have relative links to resources in <code>docs/wiki/img/</code>, and should contain sensible alt-text.</p>"},{"location":"Development%3A-Documenting-niri.html#videos","title":"Videos","text":"<p>For compatibility with both mkdocs and GitHub Wiki, videos need to be wrapped in a <code>&lt;video&gt;</code> tag (displayed by mkdocs) and have the video link again as fallback text (displayed by GitHub Wiki) padded with blank lines.</p> <pre><code>&lt;video controls src=\"https://github.com/user-attachments/assets/379a5d1f-acdb-4c11-b36c-e85fd91f0995\"&gt;\n\nhttps://github.com/user-attachments/assets/379a5d1f-acdb-4c11-b36c-e85fd91f0995\n\n&lt;/video&gt;\n</code></pre>"},{"location":"Development%3A-Documenting-niri.html#snippets","title":"Snippets","text":"<p>Configuration and code snippets in general should be annotated with a language.</p> <p>If the language used in the snippet is KDL, open the code block like this:</p> <pre><code>```kdl\n</code></pre>"},{"location":"Development%3A-Fractional-Layout.html","title":"Fractional Layout","text":"<p>There are two main coordinate spaces in niri: physical (pixels of every individual output) and logical (shared among all outputs, takes into account the scale of every output). Wayland clients mostly work in the logical space, and it's the most convenient space to do all the layout in, since it bakes in the output scaling factor.</p> <p>However, many things need to be sized or positioned at integer physical coordinates. For example, Wayland toplevel buffers are assumed to be placed at an integer physical pixel on an output (and <code>WaylandSurfaceRenderElement</code> will do that for you). Borders and focus rings should also have a width equal to an integer number of physical pixels to stay crisp (not to mention that <code>SolidColorRenderElement</code> does not anti-alias lines at fractional pixel positions).</p> <p>Integer physical coordinates do not necessarily correspond to integer logical coordinates though. Even with an integer scale = 2, a physical pixel at (1, 1) will be at the logical position of (0.5, 0.5). This problem becomes much worse with fractional scale factors where most integer logical coordinates will fall on fractional physical coordinates.</p> <p>Thus, niri uses fractional logical coordinates for most of its layout. However, one needs to be very careful to keep things aligned to the physical grid to avoid artifacts like:</p> <ul> <li>Border width alternating 1 px thicker/thinner</li> <li>Border showing 1 px off from the window at certain positions</li> <li>1 px gaps around rounded corners</li> <li>Slightly blurry window contents during resizes</li> <li>And so on...</li> </ul> <p>The way it's handled in niri is:</p> <ol> <li> <p>All relevant sizes on a workspace are rounded to an integer physical coordinate according to the current output scale. Things like struts, gaps, border widths, working area location.</p> <p>It's important to understand that they remain fractional numbers in the logical space, but these numbers correspond to an integer number of pixels in the physical space. The rounding looks something like: <code>(logical_size * scale).round() / scale</code>. Whenever a workspace moves to an output with a different scale (or the output scale changes), all sizes are re-rounded from their original configured values to align with the new physical space.</p> </li> <li> <p>The view offset and individual column/tile render offsets are not rounded to physical pixels, but:</p> </li> <li><code>tiles_with_render_positions()</code> rounds tile positions to physical pixels as it returns them,</li> <li>Custom shaders like opening, closing and resizing windows, are also careful to keep positions and sizes rounded to the physical pixels.</li> </ol> <p>The idea is that every tile can assume that it is rendered at an integer physical coordinate, therefore when shifting the position by, say, border width (also rounded to integer physical coordinates), the new position will stay rounded to integer physical coordinates. The same logic works for the rest of the layout thanks to gaps, struts and working area being similarly rounded. This way, the entire layout is always aligned, as long as it is positioned at an integer physical coordinate (which rounding the tile positions effectively achieves).</p>"},{"location":"Development%3A-Redraw-Loop.html","title":"Redraw Loop","text":"<p>On a TTY, only one frame can be submitted to an output at a time, and the compositor must wait until the output repaints (indicated by a VBlank) to be able to submit the next frame. In niri we keep track of this via the <code>RedrawState</code> enum that you can find in an <code>OutputState</code>.</p> <p>Here's a diagram of state transitions for the <code>RedrawState</code> state machine:</p> <p> </p> <p><code>Idle</code> is the default state, when the output does not need to be repainted. Any operation that may cause the screen to update calls <code>queue_redraw()</code>, which moves the output to a <code>Queued</code> state. Then, at the end of an event loop dispatch, niri calls <code>redraw()</code> for every <code>Queued</code> output.</p> <p>If the redraw causes damage (i.e. something on the output changed), we move into the <code>WaitingForVBlank</code> state, since we cannot redraw until we receive a VBlank event. However, if there's no damage, we do not return to <code>Idle</code> right away. Instead, we set a timer to fire roughly at when the next VBlank would occur, and transition to a <code>WaitingForEstimatedVBlank</code> state.</p> <p>This is necessary in order to throttle frame callbacks sent to applications to at most once per output refresh cycle. Without this throttling, applications can start continuously redrawing without damage (for instance, if the application window is partially off-screen, and it is only the off-screen part that changes), and eating a lot of CPU in the process.</p> <p>Then, either the estimated VBlank timer completes, and we go back to <code>Idle</code>, or maybe we call <code>queue_redraw()</code> once more and try to redraw again.</p>"},{"location":"Example-systemd-Setup.html","title":"Example systemd Setup","text":"<p>When starting niri from a display manager like GDM, or otherwise through the <code>niri-session</code> binary, it runs as a systemd service. This provides the necessary systemd integration to run programs like <code>mako</code> and services like <code>xdg-desktop-portal</code> bound to the graphical session.</p> <p>Here's an example on how you might set up <code>mako</code>, <code>waybar</code>, <code>swaybg</code> and <code>swayidle</code> to run as systemd services with niri. Unlike <code>spawn-at-startup</code>, this lets you easily monitor their status and output, and restart or reload them.</p> <ol> <li>Install them, i.e. <code>sudo dnf install mako waybar swaybg swayidle</code></li> <li> <p><code>mako</code> and <code>waybar</code> provide systemd units out of the box, so you can simply add them to the niri session:</p> <pre><code>systemctl --user add-wants niri.service mako.service\nsystemctl --user add-wants niri.service waybar.service\n</code></pre> <p>This will create links in <code>~/.config/systemd/user/niri.service.wants/</code>, a special systemd folder for services that need to start together with <code>niri.service</code>.</p> </li> <li> <p><code>swaybg</code> does not provide a systemd unit, since you need to pass the background image as a command-line argument.     So we will make our own.     Create <code>~/.config/systemd/user/swaybg.service</code> with the following contents:</p> <pre><code>[Unit]\nPartOf=graphical-session.target\nAfter=graphical-session.target\nRequisite=graphical-session.target\n\n[Service]\nExecStart=/usr/bin/swaybg -m fill -i \"%h/Pictures/LakeSide.png\"\nRestart=on-failure\n</code></pre> <p>Replace the image path with the one you want. <code>%h</code> is expanded to your home directory.</p> <p>After editing <code>swaybg.service</code>, run <code>systemctl --user daemon-reload</code> so systemd picks up the changes in the file.</p> <p>Now, add it to the niri session:</p> <pre><code>systemctl --user add-wants niri.service swaybg.service\n</code></pre> </li> <li> <p><code>swayidle</code> similarly does not provide a service, so we will also make our own.     Create <code>~/.config/systemd/user/swayidle.service</code> with the following contents:</p> <pre><code>[Unit]\nPartOf=graphical-session.target\nAfter=graphical-session.target\nRequisite=graphical-session.target\n\n[Service]\nExecStart=/usr/bin/swayidle -w timeout 601 'niri msg action power-off-monitors' timeout 600 'swaylock -f' before-sleep 'swaylock -f'\nRestart=on-failure\n</code></pre> <p>Then, run <code>systemctl --user daemon-reload</code> and add it to the niri session:</p> <pre><code>systemctl --user add-wants niri.service swayidle.service\n</code></pre> </li> </ol> <p>That's it! Now these three utilities will be started together with the niri session and stopped when it exits. You can also restart them with a command like <code>systemctl --user restart waybar.service</code>, for example after editing their config files.</p> <p>To remove a service from niri startup, remove its symbolic link from <code>~/.config/systemd/user/niri.service.wants/</code>. Then, run <code>systemctl --user daemon-reload</code>.</p>"},{"location":"Example-systemd-Setup.html#running-programs-across-logout","title":"Running Programs Across Logout","text":"<p>When running niri as a session, exiting it (logging out) will kill all programs that you've started within. However, sometimes you want a program, like <code>tmux</code>, <code>dtach</code> or similar, to persist in this case. To do this, run it in a transient systemd scope:</p> <pre><code>systemd-run --user --scope tmux new-session\n</code></pre>"},{"location":"FAQ.html","title":"FAQ","text":""},{"location":"FAQ.html#how-to-disable-client-side-decorationsmake-windows-rectangular","title":"How to disable client-side decorations/make windows rectangular?","text":"<p>Uncomment the <code>prefer-no-csd</code> setting at the top level of the config, and then restart your apps. Then niri will ask windows to omit client-side decorations, and also inform them that they are being tiled (which makes some windows rectangular, even if they cannot omit the decorations).</p> <p>Note that currently this will prevent edge window resize handles from showing up. You can still resize windows by holding Mod and the right mouse button.</p>"},{"location":"FAQ.html#why-are-transparent-windows-tinted-why-is-the-borderfocus-ring-showing-up-through-semitransparent-windows","title":"Why are transparent windows tinted? / Why is the border/focus ring showing up through semitransparent windows?","text":"<p>Uncomment the <code>prefer-no-csd</code> setting at the top level of the config, and then restart your apps. Niri will draw focus rings and borders around windows that agree to omit their client-side decorations.</p> <p>By default, focus ring and border are rendered as a solid background rectangle behind windows. That is, they will show up through semitransparent windows. This is because windows using client-side decorations can have an arbitrary shape.</p> <p>You can also override this behavior with the <code>draw-border-with-background</code> window rule.</p>"},{"location":"FAQ.html#how-to-enable-rounded-corners-for-all-windows","title":"How to enable rounded corners for all windows?","text":"<p>Put this window rule in your config:</p> <pre><code>window-rule {\n    geometry-corner-radius 12\n    clip-to-geometry true\n}\n</code></pre> <p>For more information, check the <code>geometry-corner-radius</code> window rule.</p>"},{"location":"FAQ.html#how-to-hide-the-important-hotkeys-pop-up-at-the-start","title":"How to hide the \"Important Hotkeys\" pop-up at the start?","text":"<p>Put this into your config:</p> <pre><code>hotkey-overlay {\n    skip-at-startup\n}\n</code></pre>"},{"location":"FAQ.html#how-to-run-x11-apps-like-steam-or-discord","title":"How to run X11 apps like Steam or Discord?","text":"<p>To run X11 apps, you can use xwayland-satellite. Check the Xwayland wiki page for instructions.</p> <p>Keep in mind that you can run many Electron apps such as VSCode natively on Wayland by passing the right flags, e.g. <code>code --ozone-platform-hint=auto</code></p>"},{"location":"FAQ.html#why-doesnt-niri-integrate-xwayland-like-other-compositors","title":"Why doesn't niri integrate Xwayland like other compositors?","text":"<p>A combination of factors:</p> <ul> <li>Integrating Xwayland is quite a bit of work, as the compositor needs to implement parts of an X11 window manager.</li> <li>You need to appease the X11 ideas of windowing, whereas for niri I want to have the best code for Wayland.</li> <li>niri doesn't have a good global coordinate system required by X11.</li> <li>You tend to get an endless stream of X11 bugs that take further time and effort away from other tasks.</li> <li>There aren't actually that many X11-only clients nowadays, and xwayland-satellite takes perfect care of most of those.</li> <li>niri isn't a Big Serious Desktop Environment which Must Support All Use Cases (and is Backed By Some Corporation).</li> </ul> <p>All in all, the situation works out in favor of avoiding Xwayland integration.</p> <p>Since: 25.08 niri has seamless built-in xwayland-satellite integration that by and large works as well as built-in Xwayland in other compositors, solving the hurdle of having to set it up manually.</p> <p>I wouldn't be too surprised if, down the road, xwayland-satellite becomes the standard way of integrating Xwayland into new compositors, since it takes on the bulk of the annoying work, and isolates the compositor from misbehaving clients.</p>"},{"location":"FAQ.html#can-i-enable-blur-behind-semitransparent-windows","title":"Can I enable blur behind semitransparent windows?","text":"<p>Not yet, follow/upvote this issue.</p> <p>There's also a PR adding blur to niri which you can build and run manually. Keep in mind that it's an experimental implementation that may have problems and performance concerns.</p>"},{"location":"FAQ.html#can-i-make-a-window-sticky-pinned-always-on-top-appear-on-all-workspaces","title":"Can I make a window sticky / pinned / always on top / appear on all workspaces?","text":"<p>Not yet, follow/upvote this issue.</p> <p>You can emulate this with a script that uses the niri IPC. For example, nirius seems to have this feature (<code>toggle-follow-mode</code>).</p>"},{"location":"FAQ.html#how-do-i-make-the-bitwarden-window-in-firefox-open-as-floating","title":"How do I make the Bitwarden window in Firefox open as floating?","text":"<p>Firefox seems to first open the Bitwarden window with a generic Firefox title, and only later change the window title to Bitwarden, so you can't effectively target it with an <code>open-floating</code> window rule.</p> <p>You'll need to use a script, for example this one or other ones (search niri issues and discussions for Bitwarden).</p>"},{"location":"FAQ.html#can-i-open-a-window-directly-in-the-current-column-in-the-same-column-as-another-window","title":"Can I open a window directly in the current column / in the same column as another window?","text":"<p>No, but you can script the behavior you want with the niri IPC. Listen to the event stream for a new window opening, then call an action like <code>consume-or-expel-window-left</code>.</p> <p>Adding this directly to niri is challenging:</p> <ul> <li>The act of \"opening a window directly in some column\" by itself is quite involved. Niri will have to compute the exact initial window size provided how other windows in a column would resize in response. This logic exists, but it isn't directly pluggable to the code computing a size for a new window. Then, it'll need to handle all sorts of edge cases like the column disappearing, or new windows getting added to the column, before the target window had a chance to appear.</li> <li>How do you indicate if a new window should spawn in an existing column (and in which one), as opposed to a new column? Different people seem to have different needs here (including very complex rules based on parent PID, etc.), and it's very unclear design-wise what kind of (simple) setting is actually needed and would be useful. See also https://github.com/YaLTeR/niri/discussions/1125.</li> </ul>"},{"location":"FAQ.html#why-does-moving-the-mouse-against-a-monitor-edge-focus-the-next-window-but-only-sometimes","title":"Why does moving the mouse against a monitor edge focus the next window, but only sometimes?","text":"<p>This can happen with <code>focus-follows-mouse</code>. When using client-side decorations, windows are supposed to have some margins outside their geometry for the mouse resizing handles. These margins \"peek out\" of the monitor edges since they're outside the window geometry, and <code>focus-follows-mouse</code> triggers when the mouse crosses them.</p> <p>It doesn't always happen:</p> <ul> <li>Some toolkits don't put resize handles outside the window geometry. Then there's no input area outside, so nowhere for <code>focus-follows-mouse</code> to trigger.</li> <li>If the current window has its own margin for resizing, and it extends all the way to the monitor edge, then <code>focus-follows-mouse</code> won't trigger because the mouse will never leave the current window.</li> </ul> <p>To fix this, you can:</p> <ul> <li>Use <code>focus-follows-mouse max-scroll-amount=\"0%\"</code>, which will prevent <code>focus-follows-mouse</code> from triggering when it would cause scrolling.</li> <li>Set <code>prefer-no-csd</code> which will generally cause clients to remove those resizing margins.</li> </ul>"},{"location":"FAQ.html#how-do-i-recover-from-a-dead-screen-locker-from-a-red-screen","title":"How do I recover from a dead screen locker / from a red screen?","text":"<p>When your screen locker dies, you will be left with a red screen. This is niri's locked session background.</p> <p>You can recover from this by spawning a new screen locker. One way is to switch to a different TTY (with a shortcut like CtrlAltF3) and spawning a screen locker to niri's Wayland display, e.g. <code>WAYLAND_DISPLAY=wayland-1 swaylock</code>.</p> <p>Another way is to set <code>allow-when-locked=true</code> on your screen locker bind, then you can press it on the red screen to get a fresh screen locker. <pre><code>binds {\n    Super+Alt+L allow-when-locked=true { spawn \"swaylock\"; }\n}\n</code></pre></p>"},{"location":"FAQ.html#how-do-i-change-output-configuration-based-on-connected-monitors","title":"How do I change output configuration based on connected monitors?","text":"<p>If you require different output configurations depending on what outputs are connected then you can use Kanshi.</p> <p>Kanshi has its own simple configuration and communicates with niri via IPC. You may want to launch kanshi from the niri config.kdl e.g. <code>spawn-at-startup \"/usr/bin/kanshi\"</code></p> <p>For example, if you wish to scale your laptop display differently when an external monitor is connected, you might use a Kanshi config like this: <pre><code>profile {\n    output eDP-1 enable scale 1.0\n}\n\nprofile { \n    output HDMI-A-1 enable scale 1.0 position 0,0\n    output eDP-1 enable scale 1.25 position 1920,0\n}\n</code></pre></p>"},{"location":"Floating-Windows.html","title":"Floating Windows","text":""},{"location":"Floating-Windows.html#overview","title":"Overview","text":"<p>Since: 25.01</p> <p>Floating windows in niri always show on top of the tiled windows. The floating layout does not scroll. Each workspace/monitor has its own floating layout, just like each workspace/monitor has its own tiling layout.</p> <p>New windows will automatically float if they have a parent (e.g. dialogs) or if they are fixed size (e.g. splash screens). To change a window between floating and tiling, you can use the <code>toggle-window-floating</code> bind or right click while dragging/moving the window. You can also use the <code>open-floating true/false</code> window rule to either force a window to open as floating, or to disable the automatic floating logic.</p> <p>Use <code>switch-focus-between-floating-and-tiling</code> to switch the focus between the two layouts. When focused on the floating layout, binds (like <code>focus-column-right</code>) will operate on the floating window.</p> <p>You can precisely position a floating window with a command like <code>niri msg action move-floating-window -x 100 -y 200</code>.</p>"},{"location":"Fullscreen-and-Maximize.html","title":"Fullscreen and Maximize","text":"<p>There are several ways to make a window big on niri: maximizing the column, maximizing the window to edges, and fullscreening the window. Let's look at their differences.</p>"},{"location":"Fullscreen-and-Maximize.html#maximized-full-width-columns","title":"Maximized (full-width) columns","text":"<p>Maximizing the column via <code>maximize-column</code> (bound to ModF by default) expands its width to cover the whole screen. Maximized columns still leave space for struts and gaps, and can contain multiple windows. The windows retain their borders. This is the simplest of the sizing modes, and is equivalent to <code>proportion 1.0</code> column width, or <code>set-column-width \"100%\"</code>.</p> <p></p> <p>You can make a window open in a maximized column with the <code>open-maximized true</code> window rule.</p>"},{"location":"Fullscreen-and-Maximize.html#windows-maximized-to-edges","title":"Windows maximized to edges","text":"<p>Since: next release</p> <p>You can maximize an individual window via <code>maximize-window-to-edges</code>. This is the same maximize as you can find on other desktop environments and operating systems: it expands a window to the edges of the available screen area. You will still see your bar, but not struts, gaps, or borders.</p> <p>Windows are aware of their maximized-to-edges status and generally respond by squaring their corners. Windows can also control maximizing-to-edges: when you click on the square icon in the window's titlebar, or double-click on the titlebar, the window will request niri to maximize or unmaximize itself.</p> <p>You can put multiple maximized windows into a tabbed column, but not into a regular column.</p> <p></p> <p>You can make a window open maximized-to-edges, or prevent a window from maximizing upon opening, with the <code>open-maximized-to-edges</code> window rule.</p>"},{"location":"Fullscreen-and-Maximize.html#fullscreen-windows","title":"Fullscreen windows","text":"<p>Windows can go fullscreen, usually seen with video players, presentations or games. You can also force a window to go fullscreen via <code>fullscreen-window</code> (bound to ModShiftF by default). Fullscreen windows cover the entire screen. Similarly to maximize-to-edges, windows are aware of their fullscreen status, and can respond by hiding their titlebars or other parts of the UI.</p> <p>Niri renders a solid black backdrop behind fullscreen windows. This backdrop helps match the screen size when the window itself remains too small (e.g. if you try to fullscreen a fixed-size dialog window), which is the behavior defined by the Wayland protocol.</p> <p>When a fullscreen window is focused and not animating, it will cover floating windows and the top layer-shell layer. If you want for example your layer-shell notifications or launcher to appear over fullscreen windows, configure the respective tools to put them on the overlay layer-shell layer.</p> <p></p> <p>You can make a window open fullscreen, or prevent a window from fullscreening upon opening, with the <code>open-fullscreen</code> window rule.</p>"},{"location":"Fullscreen-and-Maximize.html#common-behaviors-across-fullscreen-and-maximize","title":"Common behaviors across fullscreen and maximize","text":"<p>Fullscreen or maximized-to-edges windows can only be in the scrolling layout. So if you try to fullscreen or maximize a floating window, it'll move into the scrolling layout. Then, unfullscreening/unmaximizing will bring it back into the floating layout automatically.</p> <p>Thanks to scrollable tiling, fullscreen and maximized windows remain a normal participant of the layout: you can scroll left and right from them and see other windows.</p> <p></p> <p>Fullscreen and maximize-to-edges are both special states that the windows are aware of and can control. Windows sometimes want to restore their fullscreen or, more frequently, maximized state when they open. The best opportunity for this is during the initial configure sequence when the window tells niri everything it should know before opening the window. If the window does this, then <code>open-maximized-to-edges</code> and <code>open-fullscreen</code> window rules have a chance to block or adjust the request.</p> <p>However, some clients tend to request to be maximized shortly after the initial configure sequence, when the niri already sent them the initial size request (sometimes even after showing on screen, resulting in a quick resize right after opening). From niri's point of view, the window is already open by this point, so if the window does this, then the <code>open-maximized-to-edges</code> and <code>open-fullscreen</code> window rules don't do anything.</p>"},{"location":"Fullscreen-and-Maximize.html#windowed-fullscreen","title":"Windowed fullscreen","text":"<p>Since: 25.05</p> <p>Niri can also tell a window that it's in fullscreen without actually making it fullscreen, via the <code>toggle-windowed-fullscreen</code> action. This is generally useful for screencasting browser-based presentations, when you want to hide the browser UI, but still have the window sized as a normal window.</p> <p>When in windowed fullscreen, you can use the niri action to maximize or unmaximize the window. Window-side titlebar maximize buttons and gestures may not work, since the window will always think that it's in fullscreen.</p> <p>See also windowed fullscreen on the screencasting features wiki page.</p>"},{"location":"Gestures.html","title":"Gestures","text":""},{"location":"Gestures.html#overview","title":"Overview","text":"<p>There are several gestures in niri.</p> <p>Also see the gestures configuration wiki page.</p>"},{"location":"Gestures.html#mouse","title":"Mouse","text":""},{"location":"Gestures.html#interactive-move","title":"Interactive Move","text":"<p>Since: 0.1.10</p> <p>You can move windows by holding Mod and the left mouse button.</p> <p>You can customize the look of the window insertion preview in the <code>insert-hint</code> layout config.</p> <p>Since: 25.01 Right click while moving to toggle between floating and tiling layout to put the window into.</p>"},{"location":"Gestures.html#interactive-resize","title":"Interactive Resize","text":"<p>Since: 0.1.6</p> <p>You can resize windows by holding Mod and the right mouse button.</p>"},{"location":"Gestures.html#reset-window-height","title":"Reset Window Height","text":"<p>Since: 0.1.6</p> <p>If you double-click on a top or bottom tiled window resize edge, the window height will reset to automatic.</p> <p>This works with both window-initiated resizes (when using client-side decorations), and niri-initiated Mod + right click resizes.</p>"},{"location":"Gestures.html#toggle-full-width","title":"Toggle Full Width","text":"<p>Since: 0.1.6</p> <p>If you double-click on a left or right tiled window resize edge, the column will expand to the full workspace width.</p> <p>This works with both window-initiated resizes (when using client-side decorations), and niri-initiated Mod + right click resizes.</p>"},{"location":"Gestures.html#horizontal-view-movement","title":"Horizontal View Movement","text":"<p>Since: 0.1.6</p> <p>Move the view horizontally by holding Mod and the middle mouse button (or the wheel) and dragging the mouse horizontally.</p>"},{"location":"Gestures.html#workspace-switch","title":"Workspace Switch","text":"<p>Since: 0.1.7</p> <p>Switch workspaces by holding Mod and the middle mouse button (or the wheel) and dragging the mouse vertically.</p>"},{"location":"Gestures.html#touchpad","title":"Touchpad","text":""},{"location":"Gestures.html#workspace-switch_1","title":"Workspace Switch","text":"<p>Switch workspaces with three-finger vertical swipes.</p>"},{"location":"Gestures.html#horizontal-view-movement_1","title":"Horizontal View Movement","text":"<p>Move the view horizontally with three-finger horizontal swipes.</p>"},{"location":"Gestures.html#open-and-close-the-overview","title":"Open and Close the Overview","text":"<p>Since: 25.05</p> <p>Open and close the overview with a four-finger vertical swipe.</p>"},{"location":"Gestures.html#all-pointing-devices","title":"All Pointing Devices","text":""},{"location":"Gestures.html#drag-and-drop-edge-view-scroll","title":"Drag-and-Drop Edge View Scroll","text":"<p>Since: 25.02</p> <p>Scroll the tiling view when moving the mouse cursor against a monitor edge during drag-and-drop (DnD). Also works on a touchscreen.</p>"},{"location":"Gestures.html#drag-and-drop-edge-workspace-switch","title":"Drag-and-Drop Edge Workspace Switch","text":"<p>Since: 25.05</p> <p>Scroll the workspaces up/down when moving the mouse cursor against a monitor edge during drag-and-drop (DnD) while in the overview. Also works on a touchscreen.</p>"},{"location":"Gestures.html#drag-and-drop-hold-to-activate","title":"Drag-and-Drop Hold to Activate","text":"<p>Since: 25.05</p> <p>While drag-and-dropping, hold your mouse over a window to activate it. This will bring a floating window to the top for example.</p> <p>In the overview, you can also hold the mouse over a workspace to switch to it.</p>"},{"location":"Gestures.html#hot-corner-to-toggle-the-overview","title":"Hot Corner to Toggle the Overview","text":"<p>Since: 25.05</p> <p>Put your mouse at the very top-left corner of a monitor to toggle the overview. Also works during drag-and-dropping something.</p>"},{"location":"Getting-Started.html","title":"Getting Started","text":"<p>The easiest way to get niri is to install one of the distribution packages. Here are some of them: Fedora COPR and nightly COPR (which I maintain myself), NixOS Flake, and some more from repology below. See the Building section if you'd like to compile niri yourself and the Packaging niri page if you want to package niri.</p> <p></p> <p>After installing, start niri from your display manager like GDM. Press SuperT to run a terminal (Alacritty) and SuperD to run an application launcher (fuzzel). To exit niri, press SuperShiftE.</p> <p>If you're not using a display manager, you should run <code>niri-session</code> (systemd/dinit) or <code>niri --session</code> (others) from a TTY. The <code>--session</code> flag will make niri import its environment variables globally into the system manager and D-Bus, and start its D-Bus services. The <code>niri-session</code> script will additionally start niri as a systemd/dinit service, which starts up a graphical session target required by some services like portals.</p> <p>You can also run <code>niri</code> inside an existing desktop session. Then it will open as a window, where you can give it a try. Note that this windowed mode is mainly meant for development, so it is a bit buggy (in particular, there are issues with hotkeys).</p> <p>Next, see the list of important software required for normal desktop use, like a notification daemon and portals. Also, check the configuration introduction page to get started configuring niri. There you can find links to other pages containing thorough documentation and examples for all options. Finally, the Xwayland page explains how to run X11 applications on niri.</p>"},{"location":"Getting-Started.html#desktop-environments","title":"Desktop environments","text":"<p>Some desktop environments and shells work with niri and can give a more out-of-the-box experience:</p> <ul> <li>LXQt officially supports niri, see their wiki for details on setting it up.</li> <li>Many XFCE components work on Wayland, including niri. See their wiki for details.</li> <li>There are complete desktop shells based on Quickshell that support niri, for example DankMaterialShell and Noctalia.</li> <li>You can run a COSMIC session with niri using cosmic-ext-extra-sessions.</li> </ul>"},{"location":"Getting-Started.html#nvidia","title":"NVIDIA","text":"<p>The NVIDIA drivers currently have an issue with high VRAM usage due to a heap reuse quirk. You're recommended to apply a manual fix documented here if you run niri on an NVIDIA GPU.</p> <p>NVIDIA GPUs can have problems running niri (for example, the screen remains black upon starting from a TTY). Sometimes, the problems can be fixed. You can try the following:</p> <ol> <li>Update NVIDIA drivers. You need a GPU and drivers recent enough to support GBM.</li> <li>Make sure kernel modesetting is enabled. This usually involves adding <code>nvidia-drm.modeset=1</code> to the kernel command line. Find and follow a guide for your distribution. Guides from other Wayland compositors can help.</li> </ol>"},{"location":"Getting-Started.html#asahi-arm-and-other-kmsro-devices","title":"Asahi, ARM, and other kmsro devices","text":"<p>On some of these systems, niri fails to correctly detect the primary render device. If you're getting a black screen when starting niri on a TTY, you can try to set the device manually.</p> <p>First, find which devices you have:</p> <pre><code>$ ls -l /dev/dri/\ndrwxr-xr-x@       - root 14 \u043c\u0430\u044f 07:07 by-path\ncrw-rw----@   226,0 root 14 \u043c\u0430\u044f 07:07 card0\ncrw-rw----@   226,1 root 14 \u043c\u0430\u044f 07:07 card1\ncrw-rw-rw-@ 226,128 root 14 \u043c\u0430\u044f 07:07 renderD128\ncrw-rw-rw-@ 226,129 root 14 \u043c\u0430\u044f 07:07 renderD129\n</code></pre> <p>You will likely have one <code>render</code> device and two <code>card</code> devices.</p> <p>Open the niri config file at <code>~/.config/niri/config.kdl</code> and put your <code>render</code> device path like this:</p> <pre><code>debug {\n    render-drm-device \"/dev/dri/renderD128\"\n}\n</code></pre> <p>Save, then try to start niri again. If you still get a black screen, try using each of the <code>card</code> devices.</p>"},{"location":"Getting-Started.html#nixnixos","title":"Nix/NixOS","text":"<p>There's a common problem of mesa drivers going out of sync with niri, so make sure your system mesa version matches the niri mesa version. When this happens, you usually see a black screen when trying to start niri from a TTY.</p> <p>Also, on Intel graphics, you may need a workaround described here.</p>"},{"location":"Getting-Started.html#virtual-machines","title":"Virtual Machines","text":"<p>To run niri in a VM, make sure to enable 3D acceleration.</p>"},{"location":"Getting-Started.html#main-default-hotkeys","title":"Main Default Hotkeys","text":"<p>When running on a TTY, the Mod key is Super. When running in a window, the Mod key is Alt.</p> <p>The general system is: if a hotkey switches somewhere, then adding Ctrl will move the focused window or column there.</p> Hotkey Description ModShift/ Show a list of important niri hotkeys ModT Spawn <code>alacritty</code> (terminal) ModD Spawn <code>fuzzel</code> (application launcher) SuperAltL Spawn <code>swaylock</code> (screen locker) ModQ Close the focused window ModH or Mod\u2190 Focus the column to the left ModL or Mod\u2192 Focus the column to the right ModJ or Mod\u2193 Focus the window below in a column ModK or Mod\u2191 Focus the window above in a column ModCtrlH or ModCtrl\u2190 Move the focused column to the left ModCtrlL or ModCtrl\u2192 Move the focused column to the right ModCtrlJ or ModCtrl\u2193 Move the focused window below in a column ModCtrlK or ModCtrl\u2191 Move the focused window above in a column ModShiftHJKL or ModShift\u2190\u2193\u2191\u2192 Focus the monitor to the side ModCtrlShiftHJKL or ModCtrlShift\u2190\u2193\u2191\u2192 Move the focused column to the monitor to the side ModU or ModPageDown Switch to the workspace below ModI or ModPageUp Switch to the workspace above ModCtrlU or ModCtrlPageDown Move the focused column to the workspace below ModCtrlI or ModCtrlPageUp Move the focused column to the workspace above ModShiftU or ModShiftPageDown Move the focused workspace down ModShiftI or ModShiftPageUp Move the focused workspace up Mod, Consume the window to the right into the focused column Mod. Expel the bottom window in the focused column into its own column Mod[ Consume or expel the focused window to the left Mod] Consume or expel the focused window to the right ModR Toggle between preset column widths ModShiftR Toggle between preset column heights ModF Maximize column ModC Center column within view Mod- Decrease column width by 10% Mod= Increase column width by 10% ModShift- Decrease window height by 10% ModShift= Increase window height by 10% ModCtrlR Reset window height back to automatic ModShiftF Toggle full-screen on the focused window ModV Move the focused window between the floating and the tiling layout ModShiftV Switch focus between the floating and the tiling layout PrtSc Take an area screenshot. Select the area to screenshot with mouse, then press Space to save the screenshot, or Escape to cancel AltPrtSc Take a screenshot of the focused window to clipboard and to <code>~/Pictures/Screenshots/</code> CtrlPrtSc Take a screenshot of the focused monitor to clipboard and to <code>~/Pictures/Screenshots/</code> ModShiftE or CtrlAltDelete Exit niri"},{"location":"Getting-Started.html#building","title":"Building","text":"<p>First, install the dependencies for your distribution.</p> <ul> <li> <p>Ubuntu 24.04:</p> <pre><code>sudo apt-get install -y gcc clang libudev-dev libgbm-dev libxkbcommon-dev libegl1-mesa-dev libwayland-dev libinput-dev libdbus-1-dev libsystemd-dev libseat-dev libpipewire-0.3-dev libpango1.0-dev libdisplay-info-dev\n</code></pre> </li> <li> <p>Fedora:</p> <pre><code>sudo dnf install gcc libudev-devel libgbm-devel libxkbcommon-devel wayland-devel libinput-devel dbus-devel systemd-devel libseat-devel pipewire-devel pango-devel cairo-gobject-devel clang libdisplay-info-devel\n</code></pre> </li> </ul> <p>Next, get latest stable Rust: https://rustup.rs/</p> <p>Then, build niri with <code>cargo build --release</code>.</p> <p>Check Cargo.toml for a list of build features. For example, you can replace systemd integration with dinit integration using <code>cargo build --release --no-default-features --features dinit,dbus,xdp-gnome-screencast</code>.</p> <p>Warning</p> <p>Do NOT build with <code>--all-features</code>!</p> <p>Some features are meant only for development use. For example, one of the features enables collection of profiling data into a memory buffer that will grow indefinitely until you run out of memory.</p>"},{"location":"Getting-Started.html#nixosnix","title":"NixOS/Nix","text":"<p>We have a community-maintained flake which provides a devshell with required dependencies. Use <code>nix build</code> to build niri, and then run <code>./results/bin/niri</code>.</p> <p>If you're not on NixOS, you may need NixGL to run the resulting binary:</p> <pre><code>nix run --impure github:guibou/nixGL -- ./results/bin/niri\n</code></pre>"},{"location":"Getting-Started.html#manual-installation","title":"Manual Installation","text":"<p>If installing directly without a package, the recommended file destinations are slightly different. In this case, put the files in the directories indicated in the table below. These may vary depending on your distribution.</p> <p>Don't forget to make sure that the path to <code>niri</code> in niri.service is correct. This defaults to <code>/usr/bin/niri</code>.</p> File Destination <code>target/release/niri</code> <code>/usr/local/bin/</code> <code>resources/niri-session</code> <code>/usr/local/bin/</code> <code>resources/niri.desktop</code> <code>/usr/local/share/wayland-sessions/</code> <code>resources/niri-portals.conf</code> <code>/usr/local/share/xdg-desktop-portal/</code> <code>resources/niri.service</code> (systemd) <code>/etc/systemd/user/</code> <code>resources/niri-shutdown.target</code> (systemd) <code>/etc/systemd/user/</code> <code>resources/dinit/niri</code> (dinit) <code>/etc/dinit.d/user/</code> <code>resources/dinit/niri-shutdown</code> (dinit) <code>/etc/dinit.d/user/</code>"},{"location":"IPC.html","title":"IPC, niri msg","text":"<p>You can communicate with the running niri instance over an IPC socket. Check <code>niri msg --help</code> for available commands.</p> <p>The <code>--json</code> flag prints the response in JSON, rather than formatted. For example, <code>niri msg --json outputs</code>.</p> <p>Tip</p> <p>If you're getting parsing errors from <code>niri msg</code> after upgrading niri, make sure that you've restarted niri itself. You might be trying to run a newer <code>niri msg</code> against an older <code>niri</code> compositor.</p>"},{"location":"IPC.html#event-stream","title":"Event Stream","text":"<p>Since: 0.1.9</p> <p>While most niri IPC requests return a single response, the event stream request will make niri continuously stream events into the IPC connection until it is closed. This is useful for implementing various bars and indicators that update as soon as something happens, without continuous polling.</p> <p>The event stream IPC is designed to give you the complete current state up-front, then follow up with updates to that state. This way, your state can never \"desync\" from niri, and you don't need to make any other IPC information requests.</p> <p>Where reasonable, event stream state updates are atomic, though this is not always the case. For example, a window may end up with a workspace id for a workspace that had already been removed. This can happen if the corresponding workspaces-changed event arrives before the corresponding window-changed event.</p> <p>To get a taste of the events, run <code>niri msg event-stream</code>. Though, this is more of a debug function than anything. You can get raw events from <code>niri msg --json event-stream</code>, or by connecting to the niri socket and requesting an event stream manually.</p> <p>You can find the full list of events along with documentation here.</p>"},{"location":"IPC.html#programmatic-access","title":"Programmatic Access","text":"<p><code>niri msg --json</code> is a thin wrapper over writing and reading to a socket. When implementing more complex scripts and modules, you're encouraged to access the socket directly.</p> <p>Connect to the UNIX domain socket located at <code>$NIRI_SOCKET</code> in the filesystem. Write your request encoded in JSON on a single line, followed by a newline character, or by flushing and shutting down the write end of the connection. Read the reply as JSON, also on a single line.</p> <p>You can use <code>socat</code> to test communicating with niri directly:</p> <pre><code>$ socat STDIO \"$NIRI_SOCKET\"\n\"FocusedWindow\"\n{\"Ok\":{\"FocusedWindow\":{\"id\":12,\"title\":\"t socat STDIO /run/u ~\",\"app_id\":\"Alacritty\",\"workspace_id\":6,\"is_focused\":true}}}\n</code></pre> <p>The reply is an <code>Ok</code> or an <code>Err</code> wrapping the same JSON object as you get from <code>niri msg --json</code>.</p> <p>For more complex requests, you can use <code>socat</code> to find how <code>niri msg</code> formats them:</p> <pre><code>$ socat STDIO UNIX-LISTEN:temp.sock\n# then, in a different terminal:\n$ env NIRI_SOCKET=./temp.sock niri msg action focus-workspace 2\n# then, look in the socat terminal:\n{\"Action\":{\"FocusWorkspace\":{\"reference\":{\"Index\":2}}}}\n</code></pre> <p>You can find all available requests and response types in the niri-ipc sub-crate documentation.</p>"},{"location":"IPC.html#backwards-compatibility","title":"Backwards Compatibility","text":"<p>The JSON output should remain stable, as in:</p> <ul> <li>existing fields and enum variants should not be renamed</li> <li>non-optional existing fields should not be removed</li> </ul> <p>However, new fields and enum variants will be added, so you should handle unknown fields or variants gracefully where reasonable.</p> <p>The formatted/human-readable output (i.e. without <code>--json</code> flag) is not considered stable. Please prefer the JSON output for scripts, since I reserve the right to make any changes to the human-readable output.</p> <p>The <code>niri-ipc</code> sub-crate (like other niri sub-crates) is not API-stable in terms of the Rust semver; rather, it follows the version of niri itself. In particular, new struct fields and enum variants will be added.</p>"},{"location":"Important-Software.html","title":"Important Software","text":"<p>Since niri is not a complete desktop environment, you will very likely want to run the following software to make sure that other apps work fine.</p>"},{"location":"Important-Software.html#notification-daemon","title":"Notification Daemon","text":"<p>Many apps need one. For example, mako works well. Use a systemd setup or <code>spawn-at-startup</code>.</p>"},{"location":"Important-Software.html#portals","title":"Portals","text":"<p>These provide a cross-desktop API for apps to use for various things like file pickers or UI settings. Flatpak apps in particular require working portals.</p> <p>Portals require running niri as a session, which means through the <code>niri-session</code> script or from a display manager. You will want the following portals installed:</p> <ul> <li><code>xdg-desktop-portal-gtk</code>: implements most of the basic functionality, this is the \"default fallback portal\".</li> <li><code>xdg-desktop-portal-gnome</code>: required for screencasting support.</li> <li><code>gnome-keyring</code>: implements the Secret portal, required for certain apps to work.</li> </ul> <p>Then systemd should start them on-demand automatically. These particular portals are configured in <code>niri-portals.conf</code> which must be installed in the correct location.</p> <p>Since we're using <code>xdg-desktop-portal-gnome</code>, Flatpak apps will read the GNOME UI settings. For example, to enable the dark style, run:</p> <pre><code>dconf write /org/gnome/desktop/interface/color-scheme '\"prefer-dark\"'\n</code></pre> <p>Note that if you're using the provided <code>resources/niri-portals.conf</code>, you also need to install the <code>nautilus</code> file manager in order for file chooser dialogues to work properly. This is necessary because xdg-desktop-portal-gnome uses nautilus as the file chooser by default starting from version 47.0.</p> <p>If you do not want to install <code>nautilus</code> (say you use <code>nemo</code> instead), you can set <code>org.freedesktop.impl.portal.FileChooser=gtk;</code> in <code>niri-portals.conf</code> to use the GTK portal for file chooser dialogues.</p>"},{"location":"Important-Software.html#authentication-agent","title":"Authentication Agent","text":"<p>Required when apps need to ask for root permissions. Something like <code>plasma-polkit-agent</code> works fine. Start it with systemd or with <code>spawn-at-startup</code>.</p> <p>Note that to start <code>plasma-polkit-agent</code> with systemd on Fedora, you'll need to override its systemd service to add the correct dependency. Run:</p> <pre><code>systemctl --user edit --full plasma-polkit-agent.service\n</code></pre> <p>Then add <code>After=graphical-session.target</code>.</p>"},{"location":"Important-Software.html#xwayland","title":"Xwayland","text":"<p>To run X11 apps like Steam or Discord, you can use xwayland-satellite. Check the Xwayland wiki page for instructions.</p>"},{"location":"Integrating-niri.html","title":"Integrating niri","text":"<p>This page contains various bits of information helpful for integrating niri in a distribution. First, for creating a niri package, see the Packaging page.</p>"},{"location":"Integrating-niri.html#configuration","title":"Configuration","text":"<p>Niri will load configuration from <code>$XDG_CONFIG_HOME/niri/config.kdl</code> or <code>~/.config/niri/config.kdl</code>, falling back to <code>/etc/niri/config.kdl</code>. If both of these files are missing, niri will create <code>$XDG_CONFIG_HOME/niri/config.kdl</code> with the contents of the default configuration file, which are embedded into the niri binary at build time.</p> <p>This means that you can customize your distribution defaults by creating <code>/etc/niri/config.kdl</code>. When this file is present, niri will not automatically create a config at <code>~/.config/niri/</code>, so you'll need to direct your users how to do it themselves.</p> <p>Keep in mind that we update the default config in new releases, so if you have a custom <code>/etc/niri/config.kdl</code>, you likely want to inspect and apply the relevant changes too.</p> <p>Splitting the niri config file into multiple files, or includes, are not supported yet.</p>"},{"location":"Integrating-niri.html#xwayland","title":"Xwayland","text":"<p>Xwayland is required for running X11 apps and games, and also the Orca screen reader.</p> <p>Since: 25.08 Niri integrates with xwayland-satellite out of the box. The integration requires xwayland-satellite &gt;= 0.7 available in <code>$PATH</code>. Please consider making niri depend on (or at least recommend) the xwayland-satellite package. If you had a custom config which manually started <code>xwayland-satellite</code> and set <code>$DISPLAY</code>, you should remove those customizations for the automatic integration to work.</p> <p>You can change the path where niri looks for xwayland-satellite using the <code>xwayland-satellite</code> top-level option.</p>"},{"location":"Integrating-niri.html#keyboard-layout","title":"Keyboard layout","text":"<p>Since: 25.08 By default (unless manually configured otherwise), niri reads keyboard layout settings from systemd-localed at <code>org.freedesktop.locale1</code> over D-Bus. Make sure your system installer sets the keyboard layout via systemd-localed, and niri should pick it up.</p>"},{"location":"Integrating-niri.html#autostart","title":"Autostart","text":"<p>Niri works with the normal systemd autostart. The default niri.service brings up <code>graphical-session.target</code> as well as <code>xdg-desktop-autostart.target</code>.</p> <p>To make a program run at niri startup without editing the niri config, you can either link its .desktop to <code>~/.config/autostart/</code>, or use a .service file with <code>WantedBy=graphical-session.target</code>. See the example systemd setup page for some examples.</p> <p>If this is inconvenient, you can also add <code>spawn-at-startup</code> lines in the niri config.</p>"},{"location":"Integrating-niri.html#screen-readers","title":"Screen readers","text":"<p>Since: 25.08 Niri works with the Orca screen reader. Please see the Accessibility page for details and advice for accessibility-focused distributions.</p>"},{"location":"Integrating-niri.html#desktop-components","title":"Desktop components","text":"<p>You very likely want to run at least a notification daemon, portals, and an authentication agent. This is detailed on the Important Software page.</p> <p>On top of that, you may want to preconfigure some desktop shell components to make the experience less barebones. Niri's default config spawns Waybar, which is a good starting point, but you may want to consider changing its default configuration to be less of a kitchen sink, and adding the <code>niri/workspaces</code> module. You will probably also want a desktop background tool (swaybg or swww), and a nicer screen locker (compared to the default <code>swaylock</code>), like hyprlock.</p> <p>Alternatively, some desktop environments and shells work with niri, and can give a more cohesive experience in one package:</p> <ul> <li>LXQt officially supports niri, see their wiki for details on setting it up.</li> <li>Many XFCE components work on Wayland, including niri. See their wiki for details.</li> <li>There are complete desktop shells based on Quickshell that support niri, for example DankMaterialShell and Noctalia.</li> <li>You can run a COSMIC session with niri using cosmic-ext-extra-sessions.</li> </ul>"},{"location":"Layer%E2%80%90Shell-Components.html","title":"Layer\u2010Shell Components","text":"<p>Things to keep in mind with layer-shell components (bars, launchers, etc.):</p> <ol> <li>When a full-screen window is active and covers the entire screen, it will render above the top layer, and it will be prioritized for keyboard focus. If your launcher uses the top layer, and you try to run it while looking at a full-screen window, it won't show up. Only the overlay layer will show up on top of full-screen windows.</li> <li>Components on the bottom and background layers will receive on-demand keyboard focus as expected. However, they will only receive exclusive keyboard focus when there are no windows on the workspace.</li> <li>When opening the Overview, components on the bottom and background layers will zoom out and remain on the workspaces, while the top and overlay layers remain on top of the Overview. So, if you want the bar to remain on top, put it on the top layer.</li> </ol>"},{"location":"Name-and-Logo.html","title":"Name and Logo","text":"<p>The name \"niri\" is canonically written in lower-case, but feel free to capitalize it if you'd like, especially at the start of sentences where the grammatical rules require it. This name is not intended to mean or stand for anything.</p> <p>Our logo comes in four versions: full-sized, simple full-sized, icon, and simple icon. The simple versions are single-color and suitable for smaller sizes.</p> full-sized icon normal simple <p>The logo is intentionally recolorable. In fact, there's a webpage that lets you quickly adjust the color and download an SVG.</p> <p>All versions of the logo are licensed under CC\u00a0BY-SA. The full-sized logo is based on the Cherry Bomb One font, licensed under the SIL Open Font License 1.1.</p>"},{"location":"Nvidia.html","title":"Nvidia","text":""},{"location":"Nvidia.html#high-vram-usage-fix","title":"High VRAM usage fix","text":"<p>Presently, there is a quirk in the NVIDIA drivers that affects niri's VRAM usage (the driver does not properly release VRAM back into the pool). Niri should use on the order of 100 MiB of VRAM (as checked in nvtop); if you see anywhere close to 1 GiB of VRAM in use, you are likely hitting this issue (heap not returning freed buffers to the driver).</p> <p>Luckily, you can mitigate this by configuring the NVIDIA drivers with a per-process application profile as follows:</p> <ul> <li><code>sudo mkdir -p /etc/nvidia/nvidia-application-profiles-rc.d</code> to make the config dir if it does not exist (it most likely does not if you are reading this)</li> <li> <p>write the following JSON blob to set the <code>GLVidHeapReuseRatio</code> config value for the <code>niri</code> process into the file <code>/etc/nvidia/nvidia-application-profiles-rc.d/50-limit-free-buffer-pool-in-wayland-compositors.json</code>:</p> <pre><code>{\n    \"rules\": [\n        {\n            \"pattern\": {\n                \"feature\": \"procname\",\n                \"matches\": \"niri\"\n            },\n            \"profile\": \"Limit Free Buffer Pool On Wayland Compositors\"\n        }\n    ],\n    \"profiles\": [\n        {\n            \"name\": \"Limit Free Buffer Pool On Wayland Compositors\",\n            \"settings\": [\n                {\n                    \"key\": \"GLVidHeapReuseRatio\",\n                    \"value\": 0\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>(The file in <code>/etc/nvidia/nvidia-application-profiles-rc.d/</code> can be named anything, and does not actually need an extension).</p> </li> </ul> <p>Restart niri after writing the config file to apply the change.</p> <p>The upstream issue that this solution was pulled from is here. There is a (slim) chance that NVIDIA updates their built-in application profiles to apply this to niri automatically; it is unlikely that the underlying heuristic will see a proper fix.</p> <p>The fix shipped in the driver at the time of writing uses a value of 0, while the initial config posted by an Nvidia engineer approximately a year prior used a value of 1. </p>"},{"location":"Nvidia.html#screencast-flickering-fix","title":"Screencast flickering fix","text":"<p>Until: 25.08</p> <p>If you have screencast glitches or flickering on NVIDIA, set this in the niri config:</p> <pre><code>debug {\n    wait-for-frame-completion-in-pipewire\n}\n</code></pre> <p>This debug flag has since been removed because the problem was properly fixed in niri.</p>"},{"location":"Overview.html","title":"Overview","text":""},{"location":"Overview.html#overview","title":"Overview","text":"<p>Since: 25.05</p> <p>The Overview is a zoomed-out view of your workspaces and windows. It lets you see what's going on at a glance, navigate, and drag windows around.</p>   https://github.com/user-attachments/assets/379a5d1f-acdb-4c11-b36c-e85fd91f0995   <p>Open it with the <code>toggle-overview</code> bind, via the top-left hot corner, or using a touchpad four-finger swipe up. While in the overview, all keyboard shortcuts keep working, while pointing devices get easier:</p> <ul> <li>Mouse: left click and drag windows to move them, right click and drag to scroll workspaces left/right, scroll to switch workspaces (no holding Mod required).</li> <li>Touchpad: two-finger scrolling that matches the normal three-finger gestures.</li> <li>Touchscreen: one-finger scrolling, or one-finger long press to move a window.</li> </ul> <p>Tip</p> <p>The overview needs to draw a background under every workspace. So, layer-shell surfaces work this way: the background and bottom layers zoom out together with the workspaces, while the top and overlay layers remain on top of the overview.</p> <p>Put your bar on the top layer.</p> <p>Drag-and-drop will scroll the workspaces up/down in the overview, and will activate a workspace when holding it for a moment. Combined with the hot corner, this lets you do a mouse-only DnD across workspaces.</p>   https://github.com/user-attachments/assets/5f09c5b7-ff40-462b-8b9c-f1b8073a2cbb   <p>You can also drag-and-drop a window to a new workspace above, below, or between existing workspaces.</p>   https://github.com/user-attachments/assets/b76d5349-aa20-4889-ab90-0a51554c789d"},{"location":"Overview.html#configuration","title":"Configuration","text":"<p>See the full documentation for the <code>overview {}</code> section here.</p> <p>You can set the zoom-out level like this:</p> <pre><code>// Make workspaces four times smaller than normal in the overview.\noverview {\n    zoom 0.25\n}\n</code></pre> <p>To change the color behind the workspaces, use the <code>backdrop-color</code> setting:</p> <pre><code>// Make the backdrop light.\noverview {\n    backdrop-color \"#777777\"\n}\n</code></pre> <p>You can also disable the hot corner:</p> <pre><code>// Disable the hot corners.\ngestures {\n    hot-corners {\n        off\n    }\n}\n</code></pre>"},{"location":"Overview.html#backdrop-customization","title":"Backdrop customization","text":"<p>Apart from setting a custom backdrop color like described above, you can also put a layer-shell wallpaper into the backdrop with a layer rule, for example:</p> <pre><code>// Put swaybg inside the overview backdrop.\nlayer-rule {\n    match namespace=\"^wallpaper$\"\n    place-within-backdrop true\n}\n</code></pre> <p>This will only work for background layer surfaces that ignore exclusive zones (typical for wallpaper tools).</p> <p>You can run two different wallpaper tools (like swaybg and swww), one for the backdrop and one for the normal workspace background. This way you could set the backdrop one to a blurred version of the wallpaper for a nice effect.</p> <p>You can also combine this with a transparent background color if you don't like the wallpaper moving together with workspaces:</p> <pre><code>// Make the wallpaper stationary, rather than moving with workspaces.\nlayer-rule {\n    // This is for swaybg; change for other wallpaper tools.\n    // Find the right namespace by running niri msg layers.\n    match namespace=\"^wallpaper$\"\n    place-within-backdrop true\n}\n\n// Set transparent workspace background color.\nlayout {\n    background-color \"transparent\"\n}\n\n// Optionally, disable the workspace shadows in the overview.\noverview {\n    workspace-shadow {\n        off\n    }\n}\n</code></pre>"},{"location":"Packaging-niri.html","title":"Packaging niri","text":""},{"location":"Packaging-niri.html#overview","title":"Overview","text":"<p>When building niri, check <code>Cargo.toml</code> for a list of build features. For example, you can replace systemd integration with dinit integration using <code>cargo build --release --no-default-features --features dinit,dbus,xdp-gnome-screencast</code>. The defaults however should work fine for most distributions.</p> <p>Warning</p> <p>Do NOT build with <code>--all-features</code>!</p> <p>Some features are meant only for development use. For example, one of the features enables collection of profiling data into a memory buffer that will grow indefinitely until you run out of memory.</p> <p>The <code>niri-visual-tests</code> sub-crate/binary is development-only and should not be packaged.</p> <p>The recommended way to package niri is so that it runs as a standalone desktop session. To do that, put files into the correct directories according to this table.</p> File Destination <code>target/release/niri</code> <code>/usr/bin/</code> <code>resources/niri-session</code> <code>/usr/bin/</code> <code>resources/niri.desktop</code> <code>/usr/share/wayland-sessions/</code> <code>resources/niri-portals.conf</code> <code>/usr/share/xdg-desktop-portal/</code> <code>resources/niri.service</code> (systemd) <code>/usr/lib/systemd/user/</code> <code>resources/niri-shutdown.target</code> (systemd) <code>/usr/lib/systemd/user/</code> <code>resources/dinit/niri</code> (dinit) <code>/usr/lib/dinit.d/user/</code> <code>resources/dinit/niri-shutdown</code> (dinit) <code>/usr/lib/dinit.d/user/</code> <p>Doing this will make niri appear in GDM and other display managers.</p> <p>See the Integrating niri page for further information on distribution integration.</p>"},{"location":"Packaging-niri.html#running-tests","title":"Running tests","text":"<p>A bulk of our tests spawn niri compositor instances and test Wayland clients. This does not require a graphical session, however due to test parallelism, it can run into file descriptor limits on high core count systems.</p> <p>If you run into this problem, you may need to limit not just the Rust test harness thread count, but also the Rayon thread count, since some niri tests use internal Rayon threading:</p> <pre><code>$ export RAYON_NUM_THREADS=2\n...proceed to run cargo test, perhaps with --test-threads=2\n</code></pre> <p>Don't forget to exclude the development-only <code>niri-visual-tests</code> crate when running tests.</p> <p>Some tests require surfaceless EGL to be available at test time. If this is problematic, you can skip them like so:</p> <pre><code>$ cargo test -- --skip=::egl\n</code></pre> <p>You may also want to set the <code>RUN_SLOW_TESTS=1</code> environment variable to run the slower tests.</p>"},{"location":"Packaging-niri.html#version-string","title":"Version string","text":"<p>The niri version string includes its version and commit hash:</p> <pre><code>$ niri --version\nniri 25.01 (e35c630)\n</code></pre> <p>When building in a packaging system, there's usually no repository, so the commit hash is unavailable and the version will show \"unknown commit\". In this case, please set the commit hash manually:</p> <pre><code>$ export NIRI_BUILD_COMMIT=\"e35c630\"\n...proceed to build niri\n</code></pre> <p>You can also override the version string entirely, in this case please make sure the corresponding niri version stays intact:</p> <pre><code>$ export NIRI_BUILD_VERSION_STRING=\"25.01-1 (e35c630)\"\n...proceed to build niri\n</code></pre> <p>Remember to set this variable for both <code>cargo build</code> and <code>cargo install</code> since the latter will rebuild niri if the environment changes.</p>"},{"location":"Packaging-niri.html#panics","title":"Panics","text":"<p>Good panic backtraces are required for diagnosing niri crashes. Please use the <code>niri panic</code> command to test that your package produces good backtraces.</p> <pre><code>$ niri panic\nthread 'main' panicked at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/core/src/time.rs:1142:31:\noverflow when subtracting durations\nstack backtrace:\n   0: rust_begin_unwind\n             at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/std/src/panicking.rs:665:5\n   1: core::panicking::panic_fmt\n             at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/core/src/panicking.rs:74:14\n   2: core::panicking::panic_display\n             at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/core/src/panicking.rs:264:5\n   3: core::option::expect_failed\n             at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/core/src/option.rs:2021:5\n   4: expect&lt;core::time::Duration&gt;\n             at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/core/src/option.rs:933:21\n   5: sub\n             at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/core/src/time.rs:1142:31\n   6: cause_panic\n             at /builddir/build/BUILD/niri-0.0.git.1699.279c8b6a-build/niri/src/utils/mod.rs:382:13\n   7: main\n             at /builddir/build/BUILD/niri-0.0.git.1699.279c8b6a-build/niri/src/main.rs:107:27\n   8: call_once&lt;fn() -&gt; core::result::Result&lt;(), alloc::boxed::Box&lt;dyn core::error::Error, alloc::alloc::Global&gt;&gt;, ()&gt;\n             at /builddir/build/BUILD/rust-1.83.0-build/rustc-1.83.0-src/library/core/src/ops/function.rs:250:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre> <p>Important things to look for:</p> <ul> <li>The panic message is there: \"overflow when subtracting durations\".</li> <li>The backtrace goes all the way up to <code>main</code> and includes <code>cause_panic</code>.</li> <li>The backtrace includes the file and line number for <code>cause_panic</code>: <code>at /.../src/utils/mod.rs:382:13</code>.</li> </ul> <p>If possible, please ensure that your niri package on its own has good panics, i.e. without installing debuginfo or other packages. The user likely won't have debuginfo installed when their compositor first crashes, and we really want to be able to diagnose and fix all crashes right away.</p>"},{"location":"Packaging-niri.html#rust-dependencies","title":"Rust dependencies","text":"<p>Every niri release comes with a vendored dependencies archive from <code>cargo vendor</code>. You can use it to build the corresponding niri release completely offline.</p> <p>If you don't want to use vendored dependencies, consider following the niri release's <code>Cargo.lock</code>. It contains the exact dependency versions that I used when testing the release.</p> <p>If you need to change the versions of some dependencies, pay extra attention to <code>smithay</code> and <code>smithay-drm-extras</code> commit hash. These crates don't currently have regular stable releases, so niri uses git snapshots. Upstream frequently has breaking changes (API and behavior), so you're strongly advised to use the exact commit hash from the niri release's <code>Cargo.lock</code>.</p>"},{"location":"Packaging-niri.html#shell-completions","title":"Shell completions","text":"<p>You can generate shell completions for several shells via <code>niri completions &lt;SHELL&gt;</code>, i.e. <code>niri completions bash</code>. See <code>niri completions -h</code> for a full list.</p>"},{"location":"Screencasting.html","title":"Screencasting","text":""},{"location":"Screencasting.html#overview","title":"Overview","text":"<p>The primary screencasting interface that niri offers is through portals and pipewire. It is supported by OBS, Firefox, Chromium, Electron, Telegram, and other apps. You can screencast both monitors and individual windows.</p> <p>In order to use it, you need a working D-Bus session, pipewire, <code>xdg-desktop-portal-gnome</code>, and running niri as a session (i.e. through <code>niri-session</code> or from a display manager). On widely used distros this should all \"just work\".</p> <p>Alternatively, you can use tools that rely on the <code>wlr-screencopy</code> protocol, which niri also supports.</p> <p>There are several features in niri designed for screencasting. Let's take a look!</p>"},{"location":"Screencasting.html#block-out-windows","title":"Block out windows","text":"<p>You can block out specific windows from screencasts, replacing them with solid black rectangles. This can be useful for password managers or messenger windows, etc.</p> <p></p> <p>This is controlled through the <code>block-out-from</code> window rule, for example:</p> <pre><code>// Block out password managers from screencasts.\nwindow-rule {\n    match app-id=r#\"^org\\.keepassxc\\.KeePassXC$\"#\n    match app-id=r#\"^org\\.gnome\\.World\\.Secrets$\"#\n\n    block-out-from \"screencast\"\n}\n</code></pre> <p>You can similarly block out layer surfaces, using a layer rule:</p> <pre><code>// Block out mako notifications from screencasts.\nlayer-rule {\n    match namespace=\"^notifications$\"\n\n    block-out-from \"screencast\"\n}\n</code></pre> <p>Check the corresponding wiki section for more details and examples.</p>"},{"location":"Screencasting.html#dynamic-screencast-target","title":"Dynamic screencast target","text":"<p>Since: 25.05</p> <p>Niri provides a special screencast stream that you can change dynamically. It shows up as \"niri Dynamic Cast Target\" in the screencast window dialog.</p> <p></p> <p>When you select it, it will start as an empty, transparent video stream. Then, you can use the following binds to change what it shows:</p> <ul> <li><code>set-dynamic-cast-window</code> to cast the focused window.</li> <li><code>set-dynamic-cast-monitor</code> to cast the focused monitor.</li> <li><code>clear-dynamic-cast-target</code> to go back to an empty stream.</li> </ul> <p>You can also use these actions from the command line, for example to interactively pick which window to cast:</p> <pre><code>$ niri msg action set-dynamic-cast-window --id $(niri msg --json pick-window | jq .id)\n</code></pre>   https://github.com/user-attachments/assets/c617a9d6-7d5e-4f1f-b8cc-9301182d9634   <p>If the cast target disappears (e.g. the target window closes), the stream goes back to empty.</p> <p>All dynamic casts share the same target, but new ones start out empty until the next time you change it (to avoid surprises and sharing something sensitive by mistake).</p>"},{"location":"Screencasting.html#indicate-screencasted-windows","title":"Indicate screencasted windows","text":"<p>Since: 25.02</p> <p>The <code>is-window-cast-target=true</code> window rule matches windows targeted by an ongoing window screencast. You use it with a special border color to clearly indicate screencasted windows.</p> <p>This also works for windows targeted by dynamic screencasts. However, it will not work for windows that just happen to be visible in a full-monitor screencast.</p> <pre><code>// Indicate screencasted windows with red colors.\nwindow-rule {\n    match is-window-cast-target=true\n\n    focus-ring {\n        active-color \"#f38ba8\"\n        inactive-color \"#7d0d2d\"\n    }\n\n    border {\n        inactive-color \"#7d0d2d\"\n    }\n\n    shadow {\n        color \"#7d0d2d70\"\n    }\n\n    tab-indicator {\n        active-color \"#f38ba8\"\n        inactive-color \"#7d0d2d\"\n    }\n}\n</code></pre> <p>Example:</p> <p></p>"},{"location":"Screencasting.html#windowed-fakedetached-fullscreen","title":"Windowed (fake/detached) fullscreen","text":"<p>Since: 25.05</p> <p>When screencasting browser-based presentations like Google Slides, you usually want to hide the browser UI, which requires making the browser fullscreen. This is not always convenient, for example if you have an ultrawide monitor, or just want to leave the browser as a smaller window, without taking up an entire monitor.</p> <p>The <code>toggle-windowed-fullscreen</code> bind helps with this. It tells the app that it went fullscreen, while in reality leaving it as a normal window that you can resize and put wherever you want.</p> <pre><code>binds {\n    Mod+Ctrl+Shift+F { toggle-windowed-fullscreen; }\n}\n</code></pre> <p>Keep in mind that not all apps react to fullscreening, so it may sometimes look as if the bind did nothing.</p> <p>Here's an example showing a windowed-fullscreen Google Slides presentation, along with the presenter view and a meeting app:</p> <p></p>"},{"location":"Screencasting.html#screen-mirroring","title":"Screen mirroring","text":"<p>For presentations it can be useful to mirror an output to another. Currently, niri doesn't have built-in output mirroring, but you can use a third-party tool <code>wl-mirror</code> that mirrors an output to a window. Note that the command below requires <code>jq</code> to be installed. <pre><code>binds {\n    Mod+P repeat=false { spawn-sh \"wl-mirror $(niri msg --json focused-output | jq -r .name)\"; }\n}\n</code></pre> Focus the output you want to mirror, press ModP and move the <code>wl-mirror</code> window to the target output. Finally, fullscreen the <code>wl-mirror</code> window (by default, ModShiftF).</p>"},{"location":"Tabs.html","title":"Tabs","text":""},{"location":"Tabs.html#overview","title":"Overview","text":"<p>Since: 25.02</p> <p>You can switch a column to present windows as tabs, rather than as vertical tiles. All tabs in a column have the same window size, so this is useful to get more vertical space.</p> <p></p> <p>Use this bind to toggle a column between normal and tabbed display:</p> <pre><code>binds {\n   Mod+W { toggle-column-tabbed-display; }\n}\n</code></pre> <p>All other binds remain the same: switch tabs with <code>focus-window-down/up</code>, add or remove windows with <code>consume-window-into-column</code>/<code>expel-window-from-column</code>, and so on.</p> <p>Unlike regular columns, tabbed columns can go full-screen with multiple windows.</p>"},{"location":"Tabs.html#tab-indicator","title":"Tab indicator","text":"<p>Tabbed columns show a tab indicator on the side. You can click on the indicator to switch tabs.</p> <p>See the <code>tab-indicator</code> section in the layout section to configure it.</p> <p>By default, the indicator draws \"outside\" the column, so it can overlay other windows or go off-screen. The <code>place-within-column</code> flag puts the indicator \"inside\" the column, adjusting the window size to make space for it. This is especially useful for thicker tab indicators, or when you have very small gaps.</p> Default <code>place-within-column</code>"},{"location":"Workspaces.html","title":"Workspaces","text":""},{"location":"Workspaces.html#overview","title":"Overview","text":"<p>Niri has dynamic workspaces that can move between monitors.</p> <p>Each monitor contains an independent set of workspaces arranged vertically. You can switch between workspaces on a monitor with <code>focus-workspace-down</code> and <code>focus-workspace-up</code>. Empty workspaces \"in the middle\" automatically disappear when you switch away from them.</p> <p>There's always one empty workspace at the end (at the bottom) of every monitor. When you open a window on this empty workspace, a new empty workspace will immediately appear further below it.</p> <p>You can move workspaces up and down on the monitor with <code>move-workspace-up/down</code>. The way to put a window on a new workspace \"in the middle\" is to put it on the last (empty) workspace, then move the workspace up to where you need.</p> <p>Here's a visual representation that shows two monitors and their workspaces. The left monitor has three workspaces (two with windows, plus one empty), and the right monitor has two workspaces (one with windows, plus one empty).</p> <p> </p> <p>You can move a workspace to a different monitor using binds like <code>move-workspace-to-monitor-left/right/up/down</code> and <code>move-workspace-to-monitor-next/previous</code>.</p> <p>When you disconnect a monitor, its workspaces will automatically move to a different monitor. But, they will also \"remember\" their original monitor, so when you reconnect it, the workspaces will automatically move back to it.</p> <p>Tip</p> <p>From other tiling WMs, you may be used to thinking about workspaces like this: \"These are all of my workspaces. I can show workspace X on my first monitor, and workspace Y on my second monitor.\" In niri, instead, think like this: \"My first monitor contains these workspaces, including X and Y, and my second monitor contains these other workspaces. I can switch my first monitor to workspace X or Y. I can move workspace Y to my second monitor to show it there.\"</p>"},{"location":"Workspaces.html#addressing-workspaces-by-index","title":"Addressing workspaces by index","text":"<p>Several actions in niri can address workspaces \"by index\": <code>focus-workspace 2</code>, <code>move-column-to-workspace 4</code>. This index refers to whichever workspace currently happens to be at this position on the focused monitor. So, <code>focus-workspace 2</code> will always put you on the second workspace of the monitor, whichever workspace that currently is.</p> <p>This is an important distinction from WMs with static workspace systems. In niri, workspaces do not have indices on their own. If you take the first workspace and move it further down on the monitor, <code>focus-workspace 1</code> will now put you on a different workspace (the one that was below the first workspace before you moved it).</p> <p>When you want to have a more permanent workspace in niri, you can create a named workspace in the config or via the <code>set-workspace-name</code> action. You can refer to named workspaces by name, e.g. <code>focus-workspace \"browser\"</code>, and they won't disappear when they become empty.</p> <p>Tip</p> <p>You can try to emulate static workspaces by creating workspaces named \"one\", \"two\", \"three\", ..., and binding keys to <code>focus-workspace \"one\"</code>, <code>focus-workspace \"two\"</code>, ... This can work to some extent, but it can become somewhat confusing, since you can still move these workspaces up and down and between monitors.</p> <p>If you're coming from a static workspace WM, I suggest not doing that, but instead trying the \"niri way\" with dynamic workspaces, focusing and moving up/down instead of by index. Thanks to scrollable tiling, you generally need fewer workspaces than on a traditional tiling WM.</p>"},{"location":"Workspaces.html#example-workflow","title":"Example workflow","text":"<p>This is how I like to use workspaces.</p> <p>I will usually have my browser on the topmost workspace, then one workspace per project (or a \"thing\") I'm working on. On a single workspace I have 1\u20132 windows that fit inside a monitor that I switch between frequently, and maybe extra windows scrolled outside the view, usually either ones I need rarely, or temporary windows that I quickly close. When I need another permanent window, I'll put it on a new workspace.</p> <p>I actively move workspaces up and down as I'm working on things to make what I need accessible in one motion. For example, I usually frequently switch between the browser and whatever I'm doing, so I always move whatever I'm currently doing to right below the browser, so a single <code>focus-workspace-up/down</code> gets me where I want.</p>"},{"location":"Xwayland.html","title":"Xwayland","text":""},{"location":"Xwayland.html#using-xwayland-satellite","title":"Using xwayland-satellite","text":"<p>Since: 25.08 Niri integrates with xwayland-satellite out of the box. Ensure xwayland-satellite &gt;= 0.7 is installed and available in <code>$PATH</code>. With no further configuration, niri will create X11 sockets on disk, export <code>$DISPLAY</code>, and spawn xwayland-satellite on-demand when an X11 client connects. If xwayland-satellite dies, niri will automatically restart it.</p> <p>If you had a custom config which manually started <code>xwayland-satellite</code> and set <code>$DISPLAY</code>, you should remove those customizations for the automatic integration to work.</p> <p>To check that the integration works, verify that the niri output says something like <code>listening on X11 socket: :0</code>:</p> <pre><code>$ journalctl --user-unit=niri -b\nsystemd[2338]: Starting niri.service - A scrollable-tiling Wayland compositor...\nniri[2474]: 2025-08-29T04:07:40.043402Z  INFO niri: starting version 25.05.1 (0.0.git.2345.d9833fc1)\n(...)\nniri[2474]: 2025-08-29T04:07:40.690512Z  INFO niri: listening on Wayland socket: wayland-1\nniri[2474]: 2025-08-29T04:07:40.690520Z  INFO niri: IPC listening on: /run/user/1000/niri.wayland-1.2474.sock\nniri[2474]: 2025-08-29T04:07:40.700137Z  INFO niri: listening on X11 socket: :0\nsystemd[2338]: Started niri.service - A scrollable-tiling Wayland compositor.\n$ echo $DISPLAY\n:0\n</code></pre> <p></p> <p>We're using xwayland-satellite rather than Xwayland directly because X11 is very cursed. xwayland-satellite takes on the bulk of the work dealing with the X11 peculiarities from us, giving niri normal Wayland windows to manage.</p> <p>xwayland-satellite works well with most applications: Steam, games, Discord, even more exotic things like Ardour with wine Windows VST plugins. However, X11 apps that want to position windows or bars at specific screen coordinates won't behave correctly and will need a nested compositor to run. See sections below for how to do that.</p>"},{"location":"Xwayland.html#using-the-labwc-wayland-compositor","title":"Using the labwc Wayland compositor","text":"<p>Labwc is a traditional stacking Wayland compositor with Xwayland. You can run it as a window, then run X11 apps inside.</p> <ol> <li>Install labwc from your distribution packages.</li> <li>Run it inside niri with the <code>labwc</code> command. It will open as a new window.</li> <li>Run an X11 application on the X11 DISPLAY that it provides, e.g. <code>env DISPLAY=:0 glxgears</code></li> </ol> <p></p>"},{"location":"Xwayland.html#directly-running-xwayland-in-rootful-mode","title":"Directly running Xwayland in rootful mode","text":"<p>This method involves invoking XWayland directly and running it as its own window, it also requires an extra X11 window manager running inside it.</p> <p></p> <p>Here's how you do it:</p> <ol> <li>Run <code>Xwayland</code> (just the binary on its own without flags). This will spawn a black window which you can resize and fullscreen (with Mod+Shift+F) for convenience. On older Xwayland versions the window will be screen-sized and non-resizable.</li> <li>Run some X11 window manager in there, e.g. <code>env DISPLAY=:0 i3</code>. This way you can manage X11 windows inside the Xwayland instance.</li> <li>Run an X11 application there, e.g. <code>env DISPLAY=:0 flatpak run com.valvesoftware.Steam</code>.</li> </ol> <p>With fullscreen game inside a fullscreen Xwayland you get pretty much a normal gaming experience.</p> <p>Tip</p> <p>If you don't run an X11 window manager, Xwayland will close and re-open its window every time all X11 windows close and a new one opens. To prevent this, start an X11 WM inside as mentioned above, or open some other long-running X11 window.</p> <p>One caveat is that currently rootful Xwayland doesn't seem to share clipboard with the compositor. For textual data you can do it manually using wl-clipboard, for example:</p> <ul> <li><code>env DISPLAY=:0 xsel -ob | wl-copy</code> to copy from Xwayland to niri clipboard</li> <li><code>wl-paste -n | env DISPLAY=:0 xsel -ib</code> to copy from niri to Xwayland clipboard</li> </ul> <p>You can also bind these to hotkeys if you want:</p> <pre><code>binds {\n    Mod+Shift+C { spawn \"sh\" \"-c\" \"env DISPLAY=:0 xsel -ob | wl-copy\"; }\n    Mod+Shift+V { spawn \"sh\" \"-c\" \"wl-paste -n | env DISPLAY=:0 xsel -ib\"; }\n}\n</code></pre>"},{"location":"Xwayland.html#using-xwayland-run-to-run-xwayland","title":"Using xwayland-run to run Xwayland","text":"<p>xwayland-run is a helper utility to run an X11 client within a dedicated Xwayland rootful server. It takes care of starting Xwayland, setting the X11 DISPLAY environment variable, setting up xauth and running the specified X11 client using the newly started Xwayland instance. When the X11 client terminates, xwayland-run will automatically close the dedicated Xwayland server.</p> <p>It works like this:</p> <pre><code>xwayland-run &lt;Xwayland arguments&gt; -- your-x11-app &lt;X11 app arguments&gt;\n</code></pre> <p>For example:</p> <pre><code>xwayland-run -geometry 800x600 -fullscreen -- wine wingame.exe\n</code></pre>"},{"location":"Xwayland.html#using-the-cage-wayland-compositor","title":"Using the Cage Wayland compositor","text":"<p>It is also possible to run the X11 application in Cage, which runs a nested Wayland session which also supports Xwayland, where the X11 application can run in.</p> <p>Compared to the Xwayland rootful method, this does not require running an extra X11 window manager, and can be used with one command <code>cage -- /path/to/application</code>. However, it can also cause issues if multiple windows are launched inside Cage, since Cage is meant to be used in kiosks, every new window will be automatically full-screened and take over the previously opened window.</p> <p>To use Cage you need to:</p> <ol> <li>Install <code>cage</code>, it should be in most repositories.</li> <li>Run <code>cage -- /path/to/application</code> and enjoy your X11 program on niri.</li> </ol> <p>Optionally one can also modify the desktop entry for the application and add the <code>cage --</code> prefix to the <code>Exec</code> property. The Spotify Flatpak for example would look something like this:</p> <pre><code>[Desktop Entry]\nType=Application\nName=Spotify\nGenericName=Online music streaming service\nComment=Access all of your favorite music\nIcon=com.spotify.Client\nExec=cage -- flatpak run com.spotify.Client\nTerminal=false\n</code></pre>"},{"location":"Xwayland.html#proton-ge-native-wayland","title":"Proton-GE native Wayland","text":"<p>It's possible to run some games as native Wayland clients, sidestepping the issues related to X11. You can do it with a custom version of Proton like Proton-GE by setting the <code>PROTON_ENABLE_WAYLAND=1</code> environmental variable in the game's launch parameters. Do note that for now this is an experimental feature, might not work with every game and might have its own issues.</p> <pre><code>PROTON_ENABLE_WAYLAND=1 %command%\n</code></pre>"},{"location":"Xwayland.html#using-gamescope","title":"Using gamescope","text":"<p>You can use gamescope to run X11 games and even Steam itself.</p> <p>Similar to Cage, gamescope will only show a single, topmost window, so it's not very suitable to running regular apps. But you can run Steam in gamescope and then start some game from Steam just fine.</p> <pre><code>gamescope -- flatpak run com.valvesoftware.Steam\n</code></pre> <p>To run gamescope fullscreen, you can pass flags that set the necessary resolution, and a flag that starts it in fullscreen mode:</p> <pre><code>gamescope -W 2560 -H 1440 -w 2560 -h 1440 -f  -- flatpak run com.valvesoftware.Steam\n</code></pre> <p>Note</p> <p>If Steam terminates abnormally while running in gamescope, it seems that subsequent gamescope invocations will sometimes fail to start it properly. If this happens, run Steam inside a rootful Xwayland as described above, then exit it normally, and then you will be able to use gamescope again.</p>"},{"location":"_Sidebar.html","title":"Sidebar","text":""},{"location":"_Sidebar.html#usage","title":"Usage","text":"<ul> <li>Getting Started</li> <li>Example systemd Setup</li> <li>Important Software</li> <li>Workspaces</li> <li>Floating Windows</li> <li>Tabs</li> <li>Overview</li> <li>Screencasting</li> <li>Layer\u2010Shell Components</li> <li>IPC, <code>niri msg</code></li> <li>Application-Specific Issues</li> <li>Nvidia</li> <li>Xwayland</li> <li>Gestures</li> <li>Fullscreen and Maximize</li> <li>Packaging niri</li> <li>Integrating niri</li> <li>Accessibility</li> <li>Name and Logo</li> <li>FAQ</li> </ul>"},{"location":"_Sidebar.html#configuration","title":"Configuration","text":"<ul> <li>Introduction</li> <li>Input</li> <li>Outputs</li> <li>Key Bindings</li> <li>Switch Events</li> <li>Layout</li> <li>Named Workspaces</li> <li>Miscellaneous</li> <li>Window Rules</li> <li>Layer Rules</li> <li>Animations</li> <li>Gestures</li> <li>Debug Options</li> <li>Include</li> </ul>"},{"location":"_Sidebar.html#development","title":"Development","text":"<ul> <li>Design Principles</li> <li>Developing niri</li> <li>Documenting niri</li> <li>Fractional Layout</li> <li>Redraw Loop</li> <li>Animation Timing</li> </ul>"}]}