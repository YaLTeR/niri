name: CI

on:
  push:
    branches: ['main']
    paths-ignore:
      - '**.md'
      - 'wiki/**'
      - 'docs/**'
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *' # Monthly scheduled runs

# Concurrency group to ensure only one workflow runs at a time per ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUN_SLOW_TESTS: 1
  # Handle network issues with git dependencies by using the system git client
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  DEPS_APT: |
    curl gcc clang libudev-dev libgbm-dev libxkbcommon-dev libegl1-mesa-dev \
    libwayland-dev libinput-dev libdbus-1-dev libsystemd-dev libseat-dev \
    libpipewire-0.3-dev libpango1.0-dev libdisplay-info-dev
  DEPS_DNF: |
    cargo gcc clang libudev-devel libgbm-devel libxkbcommon-devel \
    wayland-devel libinput-devel dbus-devel systemd-devel libseat-devel \
    pipewire-devel pango-devel cairo-gobject-devel libdisplay-info-devel

jobs:
  # Basic lint check - using simple checks instead of pre-commit
  lint:
    name: Basic lint checks
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      
      - name: Check for trailing whitespace
        run: |
          ! grep -r --include="*.rs" --include="*.toml" '\s$' .

      - name: Check for large files
        run: |
          ! find . -type f -size +1M -not -path "*/target/*" -not -path "*/.git/*" | grep .

  # Core build and test jobs
  build:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release]
        include:
          - configuration: release
            release-flag: '--release'

    name: Test - ${{ matrix.configuration }}
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          show-progress: false
          fetch-depth: 1

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }}

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Configure cargo for network reliability
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 3' >> ~/.cargo/config.toml
          echo 'offline = false' >> ~/.cargo/config.toml
          echo '[term]' >> ~/.cargo/config.toml
          echo 'progress.when = "always"' >> ~/.cargo/config.toml

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.configuration }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.configuration }}-

      - name: Check (no default features)
        run: cargo check ${{ matrix.release-flag }} --no-default-features
        timeout-minutes: 5
        # Add network failure retries
        continue-on-error: true
        id: check-no-features

      - name: Retry check if network failure (no default features)
        if: steps.check-no-features.outcome == 'failure'
        run: |
          echo "Retrying after possible network failure..."
          sleep 2
          cargo check ${{ matrix.release-flag }} --no-default-features
        timeout-minutes: 5

      - name: Feature matrix checks
        run: |
          echo "Checking individual features..."
          for feature in dbus systemd dinit xdp-gnome-screencast; do
            echo "=== Checking feature: $feature ==="
            cargo check ${{ matrix.release-flag }} --no-default-features --features $feature || \
            (echo "Retrying feature $feature after potential network failure..." && sleep 5 && \
             cargo check ${{ matrix.release-flag }} --no-default-features --features $feature)
          done
        timeout-minutes: 10

      - name: Check (all features)
        run: cargo check ${{ matrix.release-flag }}
        timeout-minutes: 5
        id: check-all-features
        continue-on-error: true
        
      - name: Retry check if network failure (all features)
        if: steps.check-all-features.outcome == 'failure'
        run: |
          echo "Retrying after possible network failure..."
          sleep 5
          cargo check ${{ matrix.release-flag }}
        timeout-minutes: 5

      - name: Build (with profiling)
        run: cargo build ${{ matrix.release-flag }} --features profile-with-tracy
        id: build-with-profiling
        continue-on-error: true
        
      - name: Retry build if network failure (with profiling)
        if: steps.build-with-profiling.outcome == 'failure'
        run: |
          echo "Retrying build after possible network failure..."
          sleep 5
          cargo build ${{ matrix.release-flag }} --features profile-with-tracy

      - name: Build tests
        run: cargo test --no-run --all --exclude niri-visual-tests ${{ matrix.release-flag }}

      - name: Run tests
        run: cargo test --all --exclude niri-visual-tests ${{ matrix.release-flag }} -- --nocapture
        timeout-minutes: 10
        env:
          RUST_BACKTRACE: 1

      - name: Upload artifacts (release only)
        if: matrix.configuration == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: niri-release-binaries
          path: |
            target/release/niri
            target/release/niri-*
          retention-days: 7
          if-no-files-found: error

  randomized-tests:
    needs: lint
    name: Randomized Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    env:
      RUST_BACKTRACE: 1
      PROPTEST_CASES: 200000
      PROPTEST_MAX_LOCAL_REJECTS: 200000
      PROPTEST_MAX_GLOBAL_REJECTS: 200000
      PROPTEST_MAX_SHRINK_ITERS: 200000

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }}

      - uses: dtolnay/rust-toolchain@stable

      - name: Configure cargo for network reliability
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 3' >> ~/.cargo/config.toml

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-randomized-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-randomized-

      - name: Build tests
        run: cargo test --no-run --all --exclude niri-visual-tests --release
        id: build-tests
        continue-on-error: true
        
      - name: Retry build tests if network failure
        if: steps.build-tests.outcome == 'failure'
        run: |
          echo "Retrying after possible network failure..."
          sleep 5
          cargo test --no-run --all --exclude niri-visual-tests --release

      - name: Run randomized tests
        run: cargo test --all --exclude niri-visual-tests --release
        timeout-minutes: 20

  visual-tests:
    needs: lint
    name: Visual Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }} libadwaita-1-dev

      - uses: dtolnay/rust-toolchain@stable

      - name: Configure cargo for network reliability
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 3' >> ~/.cargo/config.toml

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-visual-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-visual-

      - name: Build visual tests
        run: cargo build --package niri-visual-tests
        id: build-visual-tests
        continue-on-error: true
        
      - name: Retry build visual tests if network failure
        if: steps.build-visual-tests.outcome == 'failure'
        run: |
          echo "Retrying after possible network failure..."
          sleep 5
          cargo build --package niri-visual-tests

      - name: Run visual tests
        run: cargo test --package niri-visual-tests -- --nocapture
        timeout-minutes: 10

  code-quality:
    needs: lint
    name: Code Quality
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }} libadwaita-1-dev

      - name: Configure cargo for network reliability
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 3' >> ~/.cargo/config.toml

      - name: MSRV Check
        uses: dtolnay/rust-toolchain@1.80.1
        
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-msrv-
          
      - name: Verify MSRV compatibility
        run: cargo check --all-targets
        id: msrv-check
        continue-on-error: true
        
      - name: Retry MSRV check if network failure
        if: steps.msrv-check.outcome == 'failure'
        run: |
          echo "Retrying MSRV check after possible network failure..."
          sleep 5
          cargo check --all-targets
      
      # Use stable for clippy
      - name: Setup Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          
      - name: Run Clippy
        run: cargo clippy --all --all-targets -- -D warnings
        id: clippy
        continue-on-error: true
        
      - name: Retry Clippy if network failure
        if: steps.clippy.outcome == 'failure'
        run: |
          echo "Retrying Clippy after possible network failure..."
          sleep 5
          cargo clippy --all --all-targets -- -D warnings
        
      # Use nightly for rustfmt
      - name: Setup Rust nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
          
      - name: Run Rustfmt
        run: cargo fmt --all -- --check

  platform-compatibility:
    needs: build
    name: Platform Compatibility
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Create cargo config for Docker run
        run: |
          mkdir -p .cargo
          echo '[net]' > .cargo/config.toml
          echo 'git-fetch-with-cli = true' >> .cargo/config.toml
          echo 'retry = 3' >> .cargo/config.toml
      
      - name: Fedora build
        uses: docker://fedora:41
        with:
          entrypoint: |
            sh -c "dnf update -y && dnf install -y ${{ env.DEPS_DNF }} git libadwaita-devel && export CARGO_NET_GIT_FETCH_WITH_CLI=true && cargo build --all || (echo 'Retrying build after possible network failure...' && sleep 5 && cargo build --all)"

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9
        continue-on-error: true

      - name: Check flake inputs
        uses: DeterminateSystems/flake-checker-action@v5
        continue-on-error: true

      - name: Nix flake check
        run: nix flake check
        continue-on-error: true

  check-links:
    needs: lint
    name: Check Documentation Links
    runs-on: ubuntu-24.04
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - uses: lycheeverse/lychee-action@v2.0.2
        with:
          args: '--max-retries 3 --offline --include-fragments --no-progress --timeout 30 "wiki/*.md" "**/*.md"'
          fail: true

  security-audit:
    needs: lint
    name: Security Audit
    runs-on: ubuntu-24.04
    
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
      
      - name: Run cargo-audit
        run: cargo audit

  publish-wiki:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, check-links]
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          show-progress: false

      - uses: Andrew-Chen-Wang/github-wiki-action@b7e552d7cb0fa7f83e459012ffc6840fd87bcb83

  rustdoc:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - uses: dtolnay/rust-toolchain@stable

      - name: Configure cargo for network reliability
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 3' >> ~/.cargo/config.toml

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-docs-

      - name: Generate Documentation
        run: |
          RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --document-private-items --all-features
        id: generate-docs
        continue-on-error: true
        
      - name: Retry documentation generation if network failure
        if: steps.generate-docs.outcome == 'failure'
        run: |
          echo "Retrying documentation generation after possible network failure..."
          sleep 5
          RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --document-private-items --all-features

      - run: cp ./resources/rustdoc-index.html ./target/doc/index.html

      - name: Deploy Documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true
          
  # Summary job that runs after everything else to report final status
  ci-completion:
    if: always()
    needs: [build, randomized-tests, visual-tests, code-quality, platform-compatibility, check-links, security-audit]
    runs-on: ubuntu-24.04
    steps:
      - name: CI Status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "::error::CI workflow failed"
            exit 1
          else
            echo "::notice::All CI checks passed successfully"
          fi
