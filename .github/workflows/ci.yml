name: Rust CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: '0 0 1 * *'  # Monthly maintenance tasks
  workflow_dispatch:

env:
  CARGO_NET_RETRY: 10
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  GIT_TERMINAL_PROMPT: 0
  RUST_BACKTRACE: full

jobs:
  global_setup:
    name: üõ†Ô∏è Global Configuration
    runs-on: ubuntu-24.04
    outputs:
      cargo_config: ${{ steps.cargo_config.outputs.path }}
    steps:
      - name: Configure Git
        run: |
          git config --global http.postBuffer 1048576000
          git config --global http.lowSpeedLimit 1000
          git config --global http.lowSpeedTime 120
          git config --global core.compression 9

      - name: Create Cargo config
        id: cargo_config
        run: |
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml <<EOF
          [net]
          git-fetch-with-cli = true
          retry = 15
          
          [registries.crates-io]
          protocol = "sparse"
          EOF
          echo "path=~/.cargo/config.toml" >> $GITHUB_OUTPUT

  build_and_test:
    name: üß™ Build & Test (${{ matrix.configuration }})
    needs: global_setup
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release]
        include:
          - configuration: debug
            args: ""
          - configuration: release
            args: --release
    runs-on: ubuntu-24.04
    timeout-minutes: 45

    steps:
      - name: üõí Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Install System Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            curl gcc clang \
            libudev-dev libgbm-dev libxkbcommon-dev \
            libegl1-mesa-dev libwayland-dev libinput-dev \
            libdbus-1-dev libsystemd-dev libseat-dev \
            libpipewire-0.3-dev libpango1.0-dev libdisplay-info-dev

      - name: ü¶Ä Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üóÑÔ∏è Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.configuration }}
          save-if: true

      - name: üîÑ Resilient Cargo Runner
        id: cargo_runner
        run: |
          cat > cargo-retry <<'EOL'
          #!/bin/bash
          max_attempts=8
          base_delay=15
          success=false
          
          for ((attempt=1; attempt<=max_attempts; attempt++)); do
            echo "‚ü≥ Attempt $attempt/$max_attempts: cargo $@"
            if cargo "$@"; then
              success=true
              break
            fi
            
            # Clean partial git operations
            find ~/.cargo/git -mindepth 1 -maxdepth 1 -type d \
              -exec git -C {} fetch --prune \; || true
            
            delay=$((base_delay * 2 ** (attempt-1)))
            echo "‚ö†Ô∏è Failed! Retrying in ${delay}s..."
            sleep $delay
          done
          
          $success || exit 1
          EOL
          chmod +x cargo-retry
          echo "./cargo-retry" >> $GITHUB_PATH

      - name: üîç Basic Checks
        run: |
          cargo-retry check ${{ matrix.args }} --no-default-features
          cargo-retry check ${{ matrix.args }} --no-default-features --features dbus
          cargo-retry check ${{ matrix.args }} --no-default-features --features systemd
          cargo-retry check ${{ matrix.args }} --no-default-features --features dinit
          cargo-retry check ${{ matrix.args }} --no-default-features --features xdp-gnome-screencast
          cargo-retry check ${{ matrix.args }}

      - name: üèóÔ∏è Build & Test
        run: |
          cargo-retry build ${{ matrix.args }} --features profile-with-tracy
          cargo-retry test --no-run --all --exclude niri-visual-tests ${{ matrix.args }}
          cargo-retry test --all --exclude niri-visual-tests ${{ matrix.args }} -- --nocapture

      - name: üìÇ Prepare Artifacts
        if: always() && matrix.configuration == 'release'
        run: mkdir -p ./target/doc

  quality_checks:
    name: üß∞ Code Quality
    needs: global_setup
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    strategy:
      matrix:
        task: [clippy, fmt]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }}
        if: matrix.task == 'clippy'

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: ${{ matrix.task == 'clippy' && 'clippy' || 'rustfmt' }}

      - name: Run ${{ matrix.task }}
        run: |
          case "${{ matrix.task }}" in
            clippy)
              cargo clippy --all --all-targets -- -D warnings
              ;;
            fmt)
              cargo fmt --all -- --check
              ;;
          esac

  documentation:
    name: üìö Documentation
    needs: build_and_test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Docs
        run: |
          mkdir -p target/doc
          cargo doc --no-deps -p niri-ipc || echo "‚ö†Ô∏è Documentation generation failed"

      - name: Prepare Fallback
        if: failure()
        run: |
          echo "<html><body><h1>Documentation Unavailable</h1><p>Build failed - check CI logs</p></body></html>" \
            > target/doc/index.html

      - name: Deploy
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  post_failure:
    name: üö® Failure Recovery
    if: failure()
    needs: 
      - build_and_test
      - quality_checks
      - documentation
    runs-on: ubuntu-24.04
    steps:
      - name: Clone Mirror Fallback
        run: |
          git config --global url."https://github.com/pipewire-rs-mirror".insteadOf "https://gitlab.freedesktop.org/pipewire"
          cargo update -p pipewire
        continue-on-error: true
      
      - name: Upload Logs
        uses: actions/upload-artifact@v3
        with:
          name: failure-logs
          path: |
            **/target/debug
            **/target/release
            **/cargo-log.txt
