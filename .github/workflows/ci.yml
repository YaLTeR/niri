name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *' # Monthly

env:
  RUN_SLOW_TESTS: 1
  DEPS_APT: curl gcc clang libudev-dev libgbm-dev libxkbcommon-dev libegl1-mesa-dev libwayland-dev libinput-dev libdbus-1-dev libsystemd-dev libseat-dev libpipewire-0.3-dev libpango1.0-dev libdisplay-info-dev
  DEPS_DNF: cargo gcc clang libudev-devel libgbm-devel libxkbcommon-devel wayland-devel libinput-devel dbus-devel systemd-devel libseat-devel pipewire-devel pango-devel cairo-gobject-devel libdisplay-info-devel
  # Global Git configuration for more resilient network operations
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 5
  GIT_TERMINAL_PROMPT: 0

jobs:
  # Common pre-job to set up dependencies and git configuration
  setup:
    runs-on: ubuntu-24.04
    outputs:
      git_config: ${{ steps.git_config.outputs.config_done }}
    steps:
      - name: Configure git for resilient fetching
        id: git_config
        run: |
          git config --global http.postBuffer 524288000
          git config --global http.lowSpeedLimit 1000
          git config --global http.lowSpeedTime 60
          echo "config_done=true" >> $GITHUB_OUTPUT

  build:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        configuration: [debug, release]
        include:
          - configuration: release
            release-flag: '--release'

    name: test - ${{ matrix.configuration }}
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }}

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.configuration }}
          save-if: true

      - name: Configure Cargo for reliable Git fetching
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 10' >> ~/.cargo/config.toml

      # Function to run cargo commands with retries
      - name: Create retry function
        run: |
          function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }
          echo 'function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }' >> ~/.bashrc
          echo 'export -f cargo_with_retry' >> ~/.bashrc
          source ~/.bashrc

      - name: Check (no default features)
        run: source ~/.bashrc && cargo_with_retry check ${{ matrix.release-flag }} --no-default-features

      - name: Check (just dbus)
        run: source ~/.bashrc && cargo_with_retry check ${{ matrix.release-flag }} --no-default-features --features dbus

      - name: Check (just systemd)
        run: source ~/.bashrc && cargo_with_retry check ${{ matrix.release-flag }} --no-default-features --features systemd

      - name: Check (just dinit)
        run: source ~/.bashrc && cargo_with_retry check ${{ matrix.release-flag }} --no-default-features --features dinit

      - name: Check (just xdp-gnome-screencast)
        run: source ~/.bashrc && cargo_with_retry check ${{ matrix.release-flag }} --no-default-features --features xdp-gnome-screencast

      - name: Check
        run: source ~/.bashrc && cargo_with_retry check ${{ matrix.release-flag }}

      - name: Build (with profiling)
        run: source ~/.bashrc && cargo_with_retry build ${{ matrix.release-flag }} --features profile-with-tracy

      - name: Build tests
        run: source ~/.bashrc && cargo_with_retry test --no-run --all --exclude niri-visual-tests ${{ matrix.release-flag }}

      - name: Test
        run: source ~/.bashrc && cargo_with_retry test --all --exclude niri-visual-tests ${{ matrix.release-flag }} -- --nocapture

      # Ensure we create the doc directory for downstream jobs even if the tests fail
      - name: Prepare doc directory
        if: always() && matrix.configuration == 'release'
        run: mkdir -p ./target/doc

  # Job that runs randomized tests for a longer period of time.
  randomized-tests:
    needs: setup
    strategy:
      fail-fast: false

    name: randomized tests
    runs-on: ubuntu-24.04

    env:
      RUST_BACKTRACE: 1
      PROPTEST_CASES: 200000
      PROPTEST_MAX_LOCAL_REJECTS: 200000
      PROPTEST_MAX_GLOBAL_REJECTS: 200000
      PROPTEST_MAX_SHRINK_ITERS: 200000

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }}

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: true

      - name: Configure Cargo for reliable Git fetching
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 10' >> ~/.cargo/config.toml

      # Function to run cargo commands with retries
      - name: Create retry function
        run: |
          function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }
          echo 'function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }' >> ~/.bashrc
          echo 'export -f cargo_with_retry' >> ~/.bashrc
          source ~/.bashrc

      - name: Build tests
        run: source ~/.bashrc && cargo_with_retry test --no-run --all --exclude niri-visual-tests --release

      - name: Test
        run: source ~/.bashrc && cargo_with_retry test --all --exclude niri-visual-tests --release

  visual-tests:
    needs: setup
    strategy:
      fail-fast: false

    name: visual tests
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }} libadwaita-1-dev

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: true

      - name: Configure Cargo for reliable Git fetching
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 10' >> ~/.cargo/config.toml

      # Function to run cargo commands with retries
      - name: Create retry function
        run: |
          function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }
          echo 'function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }' >> ~/.bashrc
          echo 'export -f cargo_with_retry' >> ~/.bashrc
          source ~/.bashrc

      - name: Build
        run: source ~/.bashrc && cargo_with_retry build --package niri-visual-tests

  msrv:
    needs: setup
    strategy:
      fail-fast: false

    name: msrv
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }} libadwaita-1-dev

      - uses: dtolnay/rust-toolchain@1.80.1

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: true

      - name: Configure Cargo for reliable Git fetching
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 10' >> ~/.cargo/config.toml

      # Function to run cargo commands with retries
      - name: Create retry function
        run: |
          function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }
          echo 'function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }' >> ~/.bashrc
          echo 'export -f cargo_with_retry' >> ~/.bashrc
          source ~/.bashrc

      - name: Check all targets
        run: source ~/.bashrc && cargo_with_retry check --all-targets

  clippy:
    needs: setup
    strategy:
      fail-fast: false

    name: clippy
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ env.DEPS_APT }} libadwaita-1-dev

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: true

      - name: Configure Cargo for reliable Git fetching
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 10' >> ~/.cargo/config.toml

      # Function to run cargo commands with retries
      - name: Create retry function
        run: |
          function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }
          echo 'function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }' >> ~/.bashrc
          echo 'export -f cargo_with_retry' >> ~/.bashrc
          source ~/.bashrc

      - name: Run clippy
        run: source ~/.bashrc && cargo_with_retry clippy --all --all-targets

  rustfmt:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  fedora:
    needs: setup
    runs-on: ubuntu-24.04
    container: fedora:41

    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Install dependencies
        run: |
          dnf update -y
          dnf install -y ${{ env.DEPS_DNF }} libadwaita-devel

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: true

      - name: Configure Cargo for reliable Git fetching
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 10' >> ~/.cargo/config.toml

      # Function to run cargo commands with retries
      - name: Create retry function
        run: |
          function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }
          echo 'function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }' >> ~/.bashrc
          echo 'export -f cargo_with_retry' >> ~/.bashrc || true
          # Ensure bash is available
          which bash && source ~/.bashrc || echo "No bash available, using fallback retry method"

      - name: Build all
        run: |
          if [ -f ~/.bashrc ]; then
            source ~/.bashrc && cargo_with_retry build --all
          else
            # Fallback if bash isn't available
            for attempt in {1..5}; do
              echo "Running: cargo build --all, attempt $attempt"
              if cargo build --all; then
                exit 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            exit 1
          fi

  nix:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Check flake inputs
        uses: DeterminateSystems/flake-checker-action@v4
        continue-on-error: true

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v3
        continue-on-error: true

      # Add special handling for pipewire-rs in flake.nix
      - name: Temporarily patch flake.nix for network resilience (if needed)
        run: |
          if grep -q "pipewire-rs.git" flake.nix; then
            echo "Detected pipewire-rs Git dependency in flake.nix, adding allRefs=true"
            sed -i 's/fetchGit\s*{/fetchGit { allRefs = true;/g' flake.nix || true
          fi
        continue-on-error: true

      - run: nix flake check --accept-flake-config
        continue-on-error: true

  check-links:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      - uses: lycheeverse/lychee-action@v2.0.2 # later versions break fragment checks. don't bump until this is fixed: https://github.com/lycheeverse/lychee/issues/1574
        with:
          args: --offline --include-fragments 'wiki/*.md'
        continue-on-error: true

  publish-wiki:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build
      - check-links
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          show-progress: false

      # Check if wiki exists first
      - name: Check if wiki repository exists
        id: check_wiki
        run: |
          # Use GitHub CLI to check if the wiki repository exists
          if gh repo view ${GITHUB_REPOSITORY}.wiki --json name &>/dev/null; then
            echo "wiki_exists=true" >> $GITHUB_OUTPUT
          else
            echo "wiki_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Only run the wiki action if the wiki exists
      - uses: Andrew-Chen-Wang/github-wiki-action@b7e552d7cb0fa7f83e459012ffc6840fd87bcb83
        if: steps.check_wiki.outputs.wiki_exists == 'true'
        continue-on-error: true

  rustdoc:
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: true

      - name: Configure Cargo for reliable Git fetching
        run: |
          mkdir -p ~/.cargo
          echo '[net]' >> ~/.cargo/config.toml
          echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
          echo 'retry = 10' >> ~/.cargo/config.toml

      # Function to run cargo commands with retries
      - name: Create retry function
        run: |
          function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }
          echo 'function cargo_with_retry() {
            for attempt in {1..5}; do
              echo "Running: cargo $@, attempt $attempt"
              if cargo "$@"; then
                return 0
              fi
              echo "Attempt $attempt failed, retrying in $((attempt * 5)) seconds..."
              sleep $((attempt * 5))
            done
            echo "All attempts failed!"
            return 1
          }' >> ~/.bashrc
          echo 'export -f cargo_with_retry' >> ~/.bashrc
          source ~/.bashrc

      - name: Generate documentation with retries
        run: source ~/.bashrc && cargo_with_retry doc --no-deps -p niri-ipc

      # Ensure target/doc directory exists even if doc generation fails
      - name: Ensure target/doc directory exists
        run: mkdir -p ./target/doc
        
      - name: Copy index file with error handling
        run: |
          if [ -f ./resources/rustdoc-index.html ]; then
            cp ./resources/rustdoc-index.html ./target/doc/index.html || echo "Could not copy index file"
          else
            echo "<html><body><h1>Documentation Generation Failed</h1><p>Please check CI logs.</p></body></html>" > ./target/doc/index.html
          fi

      - name: Deploy documentation
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true
